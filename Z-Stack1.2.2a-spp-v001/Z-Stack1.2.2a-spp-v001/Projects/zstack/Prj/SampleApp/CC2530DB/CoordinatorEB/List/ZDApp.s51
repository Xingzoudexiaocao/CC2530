///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              20/Oct/2019  21:43:11
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Components\stack\zdo\ZDApp.c
//    Command line       =  
//        -f C:\Users\hhhho\AppData\Local\Temp\EWAAE2.tmp
//        (C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Components\stack\zdo\ZDApp.c
//        -D ZTOOL_P1 -D SECURE=1 -D xNV_INIT -D xNV_RESTORE -D
//        LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D
//        FEATURE_SYSTEM_STATS -lC
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List
//        -lA
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\Source\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\Source\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List\ZDApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AddrMgrWriteNVRequest::?relay`
        FUNCTION `??AddrMgrWriteNVRequest::?relay`,0203H
        PUBLIC `??ZDAppCheckForHoldKey::?relay`
        FUNCTION `??ZDAppCheckForHoldKey::?relay`,0203H
        PUBLIC `??ZDAppDetermineDeviceType::?relay`
        FUNCTION `??ZDAppDetermineDeviceType::?relay`,0203H
        PUBLIC `??ZDApp_AgeOutPendingBindEntry::?relay`
        FUNCTION `??ZDApp_AgeOutPendingBindEntry::?relay`,0203H
        PUBLIC `??ZDApp_AnnounceNewAddress::?relay`
        FUNCTION `??ZDApp_AnnounceNewAddress::?relay`,0203H
        PUBLIC `??ZDApp_ChangeMatchDescRespPermission::?relay`
        FUNCTION `??ZDApp_ChangeMatchDescRespPermission::?relay`,0203H
        PUBLIC `??ZDApp_ChangeState::?relay`
        FUNCTION `??ZDApp_ChangeState::?relay`,0203H
        PUBLIC `??ZDApp_CoordStartPANIDConflictCB::?relay`
        FUNCTION `??ZDApp_CoordStartPANIDConflictCB::?relay`,0203H
        PUBLIC `??ZDApp_DeviceAuthEvt::?relay`
        FUNCTION `??ZDApp_DeviceAuthEvt::?relay`,0203H
        PUBLIC `??ZDApp_DeviceConfigured::?relay`
        FUNCTION `??ZDApp_DeviceConfigured::?relay`,0203H
        PUBLIC `??ZDApp_ForceConcentratorChange::?relay`
        FUNCTION `??ZDApp_ForceConcentratorChange::?relay`,0203H
        PUBLIC `??ZDApp_GetEmptyPendingBindReq::?relay`
        FUNCTION `??ZDApp_GetEmptyPendingBindReq::?relay`,0203H
        PUBLIC `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,0203H
        PUBLIC `??ZDApp_Init::?relay`
        FUNCTION `??ZDApp_Init::?relay`,0203H
        PUBLIC `??ZDApp_InitPendingBind::?relay`
        FUNCTION `??ZDApp_InitPendingBind::?relay`,0203H
        PUBLIC `??ZDApp_InitUserDesc::?relay`
        FUNCTION `??ZDApp_InitUserDesc::?relay`,0203H
        PUBLIC `??ZDApp_InitZdoCBFunc::?relay`
        FUNCTION `??ZDApp_InitZdoCBFunc::?relay`,0203H
        PUBLIC `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlBypass::?relay`
        FUNCTION `??ZDApp_LeaveCtrlBypass::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlInit::?relay`
        FUNCTION `??ZDApp_LeaveCtrlInit::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlReset::?relay`
        FUNCTION `??ZDApp_LeaveCtrlReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlSet::?relay`
        FUNCTION `??ZDApp_LeaveCtrlSet::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlStartup::?relay`
        FUNCTION `??ZDApp_LeaveCtrlStartup::?relay`,0203H
        PUBLIC `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveUpdate::?relay`
        FUNCTION `??ZDApp_LeaveUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,0203H
        PUBLIC `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,0203H
        PUBLIC `??ZDApp_NetworkStartEvt::?relay`
        FUNCTION `??ZDApp_NetworkStartEvt::?relay`,0203H
        PUBLIC `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,0203H
        PUBLIC `??ZDApp_NwkDescListProcessing::?relay`
        FUNCTION `??ZDApp_NwkDescListProcessing::?relay`,0203H
        PUBLIC `??ZDApp_NwkStateUpdateCB::?relay`
        FUNCTION `??ZDApp_NwkStateUpdateCB::?relay`,0203H
        PUBLIC `??ZDApp_ProcessMsgCBs::?relay`
        FUNCTION `??ZDApp_ProcessMsgCBs::?relay`,0203H
        PUBLIC `??ZDApp_ProcessNetworkJoin::?relay`
        FUNCTION `??ZDApp_ProcessNetworkJoin::?relay`,0203H
        PUBLIC `??ZDApp_ProcessOSALMsg::?relay`
        FUNCTION `??ZDApp_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??ZDApp_ProcessPendingBindReq::?relay`
        FUNCTION `??ZDApp_ProcessPendingBindReq::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecEvent::?relay`
        FUNCTION `??ZDApp_ProcessSecEvent::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecMsg::?relay`
        FUNCTION `??ZDApp_ProcessSecMsg::?relay`,0203H
        PUBLIC `??ZDApp_ReadNetworkRestoreState::?relay`
        FUNCTION `??ZDApp_ReadNetworkRestoreState::?relay`,0203H
        PUBLIC `??ZDApp_RegisterCBs::?relay`
        FUNCTION `??ZDApp_RegisterCBs::?relay`,0203H
        PUBLIC `??ZDApp_ResetNwkKey::?relay`
        FUNCTION `??ZDApp_ResetNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerCancel::?relay`
        FUNCTION `??ZDApp_ResetTimerCancel::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SaveNetworkStateEvt::?relay`
        FUNCTION `??ZDApp_SaveNetworkStateEvt::?relay`,0203H
        PUBLIC `??ZDApp_SaveNwkKey::?relay`
        FUNCTION `??ZDApp_SaveNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SecInit::?relay`
        FUNCTION `??ZDApp_SecInit::?relay`,0203H
        PUBLIC `??ZDApp_SendEventMsg::?relay`
        FUNCTION `??ZDApp_SendEventMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendMsg::?relay`
        FUNCTION `??ZDApp_SendMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendParentAnnce::?relay`
        FUNCTION `??ZDApp_SendParentAnnce::?relay`,0203H
        PUBLIC `??ZDApp_SetParentAnnceTimer::?relay`
        FUNCTION `??ZDApp_SetParentAnnceTimer::?relay`,0203H
        PUBLIC `??ZDApp_SetPendingBindDefault::?relay`
        FUNCTION `??ZDApp_SetPendingBindDefault::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinBackoffDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinBackoffDuration::?relay`,0203H
        PUBLIC `??ZDApp_SetRejoinScanDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinScanDuration::?relay`,0203H
        PUBLIC `??ZDApp_StartJoiningCycle::?relay`
        FUNCTION `??ZDApp_StartJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StopJoiningCycle::?relay`
        FUNCTION `??ZDApp_StopJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_event_loop::?relay`
        FUNCTION `??ZDApp_event_loop::?relay`,0203H
        PUBLIC `??ZDOInitDevice::?relay`
        FUNCTION `??ZDOInitDevice::?relay`,0203H
        PUBLIC `??ZDO_AddrChangeIndicationCB::?relay`
        FUNCTION `??ZDO_AddrChangeIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_ConcentratorIndicationCB::?relay`
        FUNCTION `??ZDO_ConcentratorIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_JoinConfirmCB::?relay`
        FUNCTION `??ZDO_JoinConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_JoinIndicationCB::?relay`
        FUNCTION `??ZDO_JoinIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_LeaveCnf::?relay`
        FUNCTION `??ZDO_LeaveCnf::?relay`,0203H
        PUBLIC `??ZDO_LeaveInd::?relay`
        FUNCTION `??ZDO_LeaveInd::?relay`,0203H
        PUBLIC `??ZDO_ManytoOneFailureIndicationCB::?relay`
        FUNCTION `??ZDO_ManytoOneFailureIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkDiscoveryConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkDiscoveryConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkFormationConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkFormationConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkStatusCB::?relay`
        FUNCTION `??ZDO_NetworkStatusCB::?relay`,0203H
        PUBLIC `??ZDO_PermitJoinCB::?relay`
        FUNCTION `??ZDO_PermitJoinCB::?relay`,0203H
        PUBLIC `??ZDO_PollConfirmCB::?relay`
        FUNCTION `??ZDO_PollConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_SrcRtgIndCB::?relay`
        FUNCTION `??ZDO_SrcRtgIndCB::?relay`,0203H
        PUBLIC `??ZDO_StartRouterConfirmCB::?relay`
        FUNCTION `??ZDO_StartRouterConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_SyncIndicationCB::?relay`
        FUNCTION `??ZDO_SyncIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_UpdateDeviceIndication::?relay`
        FUNCTION `??ZDO_UpdateDeviceIndication::?relay`,0203H
        PUBLIC `??ZDO_beaconNotifyIndCB::?relay`
        FUNCTION `??ZDO_beaconNotifyIndCB::?relay`,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MatchRsps
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppPendingBindReq
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AgeOutPendingBindEntry
        FUNCTION ZDApp_AgeOutPendingBindEntry,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ChangeState
        FUNCTION ZDApp_ChangeState,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_DeviceConfigured
        FUNCTION ZDApp_DeviceConfigured,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_ForceConcentratorChange
        FUNCTION ZDApp_ForceConcentratorChange,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_GetEmptyPendingBindReq
        FUNCTION ZDApp_GetEmptyPendingBindReq,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitPendingBind
        FUNCTION ZDApp_InitPendingBind,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_InitZdoCBFunc
        FUNCTION ZDApp_InitZdoCBFunc,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlReset
        FUNCTION ZDApp_LeaveCtrlReset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NewDeviceList
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_NwkDescListProcessing
        FUNCTION ZDApp_NwkDescListProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 58, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessPendingBindReq
        FUNCTION ZDApp_ProcessPendingBindReq,0a1203H
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 53, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDApp_SendParentAnnce
        FUNCTION ZDApp_SendParentAnnce,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDApp_SetParentAnnceTimer
        FUNCTION ZDApp_SetParentAnnceTimer,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_SetPendingBindDefault
        FUNCTION ZDApp_SetPendingBindDefault,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SetRejoinBackoffDuration
        FUNCTION ZDApp_SetRejoinBackoffDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_SetRejoinScanDuration
        FUNCTION ZDApp_SetRejoinScanDuration,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_NetworkStatusCB
        FUNCTION ZDO_NetworkStatusCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PermitJoinCB
        FUNCTION ZDO_PermitJoinCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBLIC ZDO_beaconNotifyIndCB
        FUNCTION ZDO_beaconNotifyIndCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_258
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_4e2
        PUBWEAK __Constant_64
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC prevDevState
        PUBLIC retryCnt
        PUBLIC runtimeChannel
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        PUBLIC zdoDiscCounter
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_BindRequest   SYMBOL "APSME_BindRequest"
`??APSME_BindRequest::?relay` SYMBOL "?relay", APSME_BindRequest
APSME_HoldDataRequests SYMBOL "APSME_HoldDataRequests"
`??APSME_HoldDataRequests::?relay` SYMBOL "?relay", APSME_HoldDataRequests
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
`??APSME_UpdateDeviceReq::?relay` SYMBOL "?relay", APSME_UpdateDeviceReq
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
AssocMakeListOfRfdChild SYMBOL "AssocMakeListOfRfdChild"
`??AssocMakeListOfRfdChild::?relay` SYMBOL "?relay", AssocMakeListOfRfdChild
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
`??NLME_GetEnergyThreshold::?relay` SYMBOL "?relay", NLME_GetEnergyThreshold
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
`??NLME_LeaveRsp::?relay` SYMBOL "?relay", NLME_LeaveRsp
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
`??NLME_NetworkDiscoveryRequest::?relay` SYMBOL "?relay", NLME_NetworkDiscoveryRequest
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_RemoveChild    SYMBOL "NLME_RemoveChild"
`??NLME_RemoveChild::?relay` SYMBOL "?relay", NLME_RemoveChild
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
`??NLME_SetBroadcastFilter::?relay` SYMBOL "?relay", NLME_SetBroadcastFilter
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
`??NLME_SetEnergyThreshold::?relay` SYMBOL "?relay", NLME_SetEnergyThreshold
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
`??NLME_StartRouterRequest::?relay` SYMBOL "?relay", NLME_StartRouterRequest
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
`??RTG_MTORouteReq::?relay` SYMBOL "?relay", RTG_MTORouteReq
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
`??RTG_RemoveRtgEntry::?relay` SYMBOL "?relay", RTG_RemoveRtgEntry
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
`??SSP_ReadNwkActiveKey::?relay` SYMBOL "?relay", SSP_ReadNwkActiveKey
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
`??ZDConfig_InitDescriptors::?relay` SYMBOL "?relay", ZDConfig_InitDescriptors
ZDMatchSendState    SYMBOL "ZDMatchSendState"
`??ZDMatchSendState::?relay` SYMBOL "?relay", ZDMatchSendState
ZDO_Init            SYMBOL "ZDO_Init"
`??ZDO_Init::?relay` SYMBOL "?relay", ZDO_Init
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
`??ZDO_MatchEndDeviceBind::?relay` SYMBOL "?relay", ZDO_MatchEndDeviceBind
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
`??ZDO_ParseBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ParseBindUnbindReq
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
`??ZDO_ParseEndDeviceBindReq::?relay` SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
`??ZDO_ProcessBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ProcessBindUnbindReq
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
`??ZDO_StartDevice::?relay` SYMBOL "?relay", ZDO_StartDevice
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
`??ZDO_UpdateAddrManager::?relay` SYMBOL "?relay", ZDO_UpdateAddrManager
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
`??ZDO_UpdateNwkStatus::?relay` SYMBOL "?relay", ZDO_UpdateNwkStatus
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_ParentAnnce     SYMBOL "ZDP_ParentAnnce"
`??ZDP_ParentAnnce::?relay` SYMBOL "?relay", ZDP_ParentAnnce
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
`??ZDSecMgrNewDeviceEvent::?relay` SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
`??ZDSecMgrUpdateDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwkNeighborRemove   SYMBOL "nwkNeighborRemove"
`??nwkNeighborRemove::?relay` SYMBOL "?relay", nwkNeighborRemove
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_desc_list_free  SYMBOL "nwk_desc_list_free"
`??nwk_desc_list_free::?relay` SYMBOL "?relay", nwk_desc_list_free
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
`??osal_pwrmgr_device::?relay` SYMBOL "?relay", osal_pwrmgr_device
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
`??AddrMgrWriteNVRequest::?relay` SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
`??ZDAppCheckForHoldKey::?relay` SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
`??ZDAppDetermineDeviceType::?relay` SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AgeOutPendingBindEntry SYMBOL "ZDApp_AgeOutPendingBindEntry"
`??ZDApp_AgeOutPendingBindEntry::?relay` SYMBOL "?relay", ZDApp_AgeOutPendingBindEntry
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
`??ZDApp_AnnounceNewAddress::?relay` SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
`??ZDApp_ChangeMatchDescRespPermission::?relay` SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_ChangeState   SYMBOL "ZDApp_ChangeState"
`??ZDApp_ChangeState::?relay` SYMBOL "?relay", ZDApp_ChangeState
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
`??ZDApp_CoordStartPANIDConflictCB::?relay` SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
`??ZDApp_DeviceAuthEvt::?relay` SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_DeviceConfigured SYMBOL "ZDApp_DeviceConfigured"
`??ZDApp_DeviceConfigured::?relay` SYMBOL "?relay", ZDApp_DeviceConfigured
ZDApp_ForceConcentratorChange SYMBOL "ZDApp_ForceConcentratorChange"
`??ZDApp_ForceConcentratorChange::?relay` SYMBOL "?relay", ZDApp_ForceConcentratorChange
ZDApp_GetEmptyPendingBindReq SYMBOL "ZDApp_GetEmptyPendingBindReq"
`??ZDApp_GetEmptyPendingBindReq::?relay` SYMBOL "?relay", ZDApp_GetEmptyPendingBindReq
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
`??ZDApp_Init::?relay` SYMBOL "?relay", ZDApp_Init
ZDApp_InitPendingBind SYMBOL "ZDApp_InitPendingBind"
`??ZDApp_InitPendingBind::?relay` SYMBOL "?relay", ZDApp_InitPendingBind
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
`??ZDApp_InitUserDesc::?relay` SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_InitZdoCBFunc SYMBOL "ZDApp_InitZdoCBFunc"
`??ZDApp_InitZdoCBFunc::?relay` SYMBOL "?relay", ZDApp_InitZdoCBFunc
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
`??ZDApp_LeaveCtrlBypass::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
`??ZDApp_LeaveCtrlInit::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlReset SYMBOL "ZDApp_LeaveCtrlReset"
`??ZDApp_LeaveCtrlReset::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlReset
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
`??ZDApp_LeaveCtrlSet::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
`??ZDApp_LeaveCtrlStartup::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
`??ZDApp_LeaveUpdate::?relay` SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
`??ZDApp_NetworkStartEvt::?relay` SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkDescListProcessing SYMBOL "ZDApp_NwkDescListProcessing"
`??ZDApp_NwkDescListProcessing::?relay` SYMBOL "?relay", ZDApp_NwkDescListProcessing
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
`??ZDApp_NwkStateUpdateCB::?relay` SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
`??ZDApp_ProcessMsgCBs::?relay` SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
`??ZDApp_ProcessNetworkJoin::?relay` SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
`??ZDApp_ProcessOSALMsg::?relay` SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessPendingBindReq SYMBOL "ZDApp_ProcessPendingBindReq"
`??ZDApp_ProcessPendingBindReq::?relay` SYMBOL "?relay", ZDApp_ProcessPendingBindReq
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
`??ZDApp_ProcessSecEvent::?relay` SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
`??ZDApp_ProcessSecMsg::?relay` SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
`??ZDApp_ReadNetworkRestoreState::?relay` SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
`??ZDApp_RegisterCBs::?relay` SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
`??ZDApp_ResetNwkKey::?relay` SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
`??ZDApp_ResetTimerCancel::?relay` SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
`??ZDApp_SaveNetworkStateEvt::?relay` SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
`??ZDApp_SaveNwkKey::?relay` SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
`??ZDApp_SecInit::?relay` SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
`??ZDApp_SendEventMsg::?relay` SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
`??ZDApp_SendMsg::?relay` SYMBOL "?relay", ZDApp_SendMsg
ZDApp_SendParentAnnce SYMBOL "ZDApp_SendParentAnnce"
`??ZDApp_SendParentAnnce::?relay` SYMBOL "?relay", ZDApp_SendParentAnnce
ZDApp_SetParentAnnceTimer SYMBOL "ZDApp_SetParentAnnceTimer"
`??ZDApp_SetParentAnnceTimer::?relay` SYMBOL "?relay", ZDApp_SetParentAnnceTimer
ZDApp_SetPendingBindDefault SYMBOL "ZDApp_SetPendingBindDefault"
`??ZDApp_SetPendingBindDefault::?relay` SYMBOL "?relay", ZDApp_SetPendingBindDefault
ZDApp_SetRejoinBackoffDuration SYMBOL "ZDApp_SetRejoinBackoffDuration"
`??ZDApp_SetRejoinBackoffDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinBackoffDuration
ZDApp_SetRejoinScanDuration SYMBOL "ZDApp_SetRejoinScanDuration"
`??ZDApp_SetRejoinScanDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinScanDuration
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
`??ZDApp_StartJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
`??ZDApp_StopJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
`??ZDApp_event_loop::?relay` SYMBOL "?relay", ZDApp_event_loop
ZDOInitDevice       SYMBOL "ZDOInitDevice"
`??ZDOInitDevice::?relay` SYMBOL "?relay", ZDOInitDevice
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
`??ZDO_AddrChangeIndicationCB::?relay` SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
`??ZDO_ConcentratorIndicationCB::?relay` SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
`??ZDO_JoinConfirmCB::?relay` SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
`??ZDO_JoinIndicationCB::?relay` SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
`??ZDO_LeaveCnf::?relay` SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
`??ZDO_LeaveInd::?relay` SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
`??ZDO_ManytoOneFailureIndicationCB::?relay` SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
`??ZDO_NetworkDiscoveryConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
`??ZDO_NetworkFormationConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_NetworkStatusCB SYMBOL "ZDO_NetworkStatusCB"
`??ZDO_NetworkStatusCB::?relay` SYMBOL "?relay", ZDO_NetworkStatusCB
ZDO_PermitJoinCB    SYMBOL "ZDO_PermitJoinCB"
`??ZDO_PermitJoinCB::?relay` SYMBOL "?relay", ZDO_PermitJoinCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
`??ZDO_PollConfirmCB::?relay` SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
`??ZDO_SrcRtgIndCB::?relay` SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
`??ZDO_StartRouterConfirmCB::?relay` SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
`??ZDO_SyncIndicationCB::?relay` SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
`??ZDO_UpdateDeviceIndication::?relay` SYMBOL "?relay", ZDO_UpdateDeviceIndication
ZDO_beaconNotifyIndCB SYMBOL "ZDO_beaconNotifyIndCB"
`??ZDO_beaconNotifyIndCB::?relay` SYMBOL "?relay", ZDO_beaconNotifyIndCB

        EXTERN `??APSME_BindRequest::?relay`
        FUNCTION `??APSME_BindRequest::?relay`,00H
        EXTERN `??APSME_HoldDataRequests::?relay`
        FUNCTION `??APSME_HoldDataRequests::?relay`,00H
        EXTERN `??APSME_UpdateDeviceReq::?relay`
        FUNCTION `??APSME_UpdateDeviceReq::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??AssocMakeListOfRfdChild::?relay`
        FUNCTION `??AssocMakeListOfRfdChild::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetEnergyThreshold::?relay`
        FUNCTION `??NLME_GetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveRsp::?relay`
        FUNCTION `??NLME_LeaveRsp::?relay`,00H
        EXTERN `??NLME_NetworkDiscoveryRequest::?relay`
        FUNCTION `??NLME_NetworkDiscoveryRequest::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_RemoveChild::?relay`
        FUNCTION `??NLME_RemoveChild::?relay`,00H
        EXTERN `??NLME_SetBroadcastFilter::?relay`
        FUNCTION `??NLME_SetBroadcastFilter::?relay`,00H
        EXTERN `??NLME_SetEnergyThreshold::?relay`
        FUNCTION `??NLME_SetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??NLME_StartRouterRequest::?relay`
        FUNCTION `??NLME_StartRouterRequest::?relay`,00H
        EXTERN `??RTG_MTORouteReq::?relay`
        FUNCTION `??RTG_MTORouteReq::?relay`,00H
        EXTERN `??RTG_RemoveRtgEntry::?relay`
        FUNCTION `??RTG_RemoveRtgEntry::?relay`,00H
        EXTERN `??SSP_ReadNwkActiveKey::?relay`
        FUNCTION `??SSP_ReadNwkActiveKey::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDConfig_InitDescriptors::?relay`
        FUNCTION `??ZDConfig_InitDescriptors::?relay`,00H
        EXTERN `??ZDMatchSendState::?relay`
        FUNCTION `??ZDMatchSendState::?relay`,00H
        EXTERN `??ZDO_Init::?relay`
        FUNCTION `??ZDO_Init::?relay`,00H
        EXTERN `??ZDO_MatchEndDeviceBind::?relay`
        FUNCTION `??ZDO_MatchEndDeviceBind::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseBindUnbindReq::?relay`
        FUNCTION `??ZDO_ParseBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_ParseEndDeviceBindReq::?relay`
        FUNCTION `??ZDO_ParseEndDeviceBindReq::?relay`,00H
        EXTERN `??ZDO_ProcessBindUnbindReq::?relay`
        FUNCTION `??ZDO_ProcessBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_StartDevice::?relay`
        FUNCTION `??ZDO_StartDevice::?relay`,00H
        EXTERN `??ZDO_UpdateAddrManager::?relay`
        FUNCTION `??ZDO_UpdateAddrManager::?relay`,00H
        EXTERN `??ZDO_UpdateNwkStatus::?relay`
        FUNCTION `??ZDO_UpdateNwkStatus::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,00H
        EXTERN `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,00H
        EXTERN `??ZDP_ParentAnnce::?relay`
        FUNCTION `??ZDP_ParentAnnce::?relay`,00H
        EXTERN `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,00H
        EXTERN `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,00H
        EXTERN `??ZDSecMgrNewDeviceEvent::?relay`
        FUNCTION `??ZDSecMgrNewDeviceEvent::?relay`,00H
        EXTERN `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,00H
        EXTERN `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrUpdateDeviceInd::?relay`
        FUNCTION `??ZDSecMgrUpdateDeviceInd::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwkNeighborRemove::?relay`
        FUNCTION `??nwkNeighborRemove::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_desc_list_free::?relay`
        FUNCTION `??nwk_desc_list_free::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_pwrmgr_device::?relay`
        FUNCTION `??osal_pwrmgr_device::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,00H
        EXTERN `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN APSME_BindRequest
        FUNCTION APSME_BindRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_HoldDataRequests
        FUNCTION APSME_HoldDataRequests,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeListOfRfdChild
        FUNCTION AssocMakeListOfRfdChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RemoveChild
        FUNCTION NLME_RemoveChild,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN NwkDescList
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDMatchSendState
        FUNCTION ZDMatchSendState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ParentAnnce
        FUNCTION ZDP_ParentAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SendData
        FUNCTION ZDP_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_TransID
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN epList
        EXTERN gMIN_TREE_LQI
        EXTERN matchED
        EXTERN nwkFrameCounter
        EXTERN nwkFrameCounterChanges
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborRemove
        FUNCTION nwkNeighborRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_desc_list_free
        FUNCTION nwk_desc_list_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_clear_event
        FUNCTION osal_clear_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pZDNwkMgr_ProcessDataConfirm
        EXTERN pbindRemoveDev
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN savedQueuedPollRate
        EXTERN savedResponseRate
        EXTERN zgChildAgingEnable
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDefaultRejoinBackoff
        EXTERN zgDefaultRejoinScan
        EXTERN zgDeviceLogicalType
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPollRate
        EXTERN zgQueuedPollRate
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgResponsePollRate
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
//    4   Revision:       $Revision: 44520 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMAC.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66 
//   67 #include "ssp.h"
//   68 
//   69 /* HAL */
//   70 #include "hal_led.h"
//   71 #include "hal_lcd.h"
//   72 #include "hal_key.h"
//   73 
//   74 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   75   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   76 #endif
//   77 
//   78 /*********************************************************************
//   79  * CONSTANTS
//   80  */
//   81 
//   82 #if !defined( NWK_START_DELAY )
//   83   #define NWK_START_DELAY             100   // in milliseconds
//   84 #endif
//   85 
//   86 #if !defined( LEAVE_RESET_DELAY )
//   87   #define LEAVE_RESET_DELAY           5000  // in milliseconds
//   88 #endif
//   89 
//   90 // Init ZDO, but hold and wait for application to start the joining or
//   91 // forming network
//   92 #define ZDO_INIT_HOLD_NWK_START       0xFFFF
//   93 
//   94 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   95   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   96 #endif
//   97 
//   98 #if !defined( BEACON_REQUEST_DELAY )
//   99   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//  100 #endif
//  101 
//  102 #if !defined( BEACON_REQ_DELAY_MASK )
//  103   #define BEACON_REQ_DELAY_MASK       0x007F
//  104 #endif
//  105 
//  106 #define MAX_RESUME_RETRY            3
//  107 
//  108 #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
//  109 
//  110 // Beacon Order Settings (see NLMEDE.h)
//  111 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  112 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  113 
//  114 #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
//  115 // Additional counts to add to the frame counter when restoring from NV
//  116 // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
//  117 #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
//  118 #endif
//  119 
//  120 // Leave control bits
//  121 #define ZDAPP_LEAVE_CTRL_INIT 0
//  122 #define ZDAPP_LEAVE_CTRL_SET  1
//  123 #define ZDAPP_LEAVE_CTRL_RA   2
//  124 
//  125 // Address Manager Stub Implementation
//  126 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  127 
//  128 
//  129 #if !defined ZDO_NV_SAVE_RFDs
//  130 #define ZDO_NV_SAVE_RFDs  TRUE
//  131 #endif
//  132 
//  133 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  134 #if ZDO_NV_SAVE_RFDs
//  135 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  136 #else
//  137 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  138 #endif
//  139 
//  140 // Timeout value to process New Devices
//  141 #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
//  142 
//  143 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  144 #if !defined MAX_PENDING_BIND_REQ
//  145 #define MAX_PENDING_BIND_REQ 3
//  146 #endif
//  147 #endif
//  148 
//  149 /******************************************************************************
//  150  * TYPEDEFS
//  151  */
//  152 typedef struct
//  153 {
//  154   void   *next;
//  155   uint16 shortAddr;
//  156   uint16 timeDelta;
//  157 } ZDAppNewDevice_t;
//  158 
//  159 /*********************************************************************
//  160  * GLOBAL VARIABLES
//  161  */
//  162 
//  163 #if defined( LCD_SUPPORTED )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164   uint8 MatchRsps = 0;
MatchRsps:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  165 #endif
//  166 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uint8 zdoDiscCounter = 1;
zdoDiscCounter:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  170 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  171 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  176 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  177 uint8 continueJoining = TRUE;
continueJoining:
        DATA8
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  178 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  179 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  180 
//  181 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  184 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 #if !defined ( ZDP_BIND_SKIP_VALIDATION )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  187 ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
ZDAppPendingBindReq:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  188 #endif
//  189 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  190 uint32 runtimeChannel;
runtimeChannel:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  191 
//  192 /*********************************************************************
//  193  * EXTERNAL VARIABLES
//  194  */
//  195 
//  196 /*********************************************************************
//  197  * EXTERNAL FUNCTIONS
//  198  */
//  199 
//  200 /*********************************************************************
//  201  * LOCAL FUNCTIONS
//  202  */
//  203 
//  204 void ZDApp_NetworkStartEvt( void );
//  205 void ZDApp_DeviceAuthEvt( void );
//  206 void ZDApp_SaveNetworkStateEvt( void );
//  207 
//  208 uint8 ZDApp_ReadNetworkRestoreState( void );
//  209 uint8 ZDApp_RestoreNetworkState( void );
//  210 void ZDAppDetermineDeviceType( void );
//  211 void ZDApp_InitUserDesc( void );
//  212 void ZDAppCheckForHoldKey( void );
//  213 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  214 void ZDApp_ProcessNetworkJoin( void );
//  215 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  216 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
//  217 networkDesc_t* ZDApp_NwkDescListProcessing(void);
//  218 
//  219 void ZDApp_SecInit( uint8 state );
//  220 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  221 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  222 
//  223 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  224 
//  225 void ZDApp_ResetTimerStart( uint16 delay );
//  226 void ZDApp_ResetTimerCancel( void );
//  227 void ZDApp_LeaveCtrlInit( void );
//  228 void ZDApp_LeaveCtrlSet( uint8 ra );
//  229 uint8 ZDApp_LeaveCtrlBypass( void );
//  230 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  231 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  232                         uint8 removeChildren );
//  233 void ZDApp_NodeProfileSync( uint8 stackProfile );
//  234 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  235 void ZDApp_RegisterCBs( void );
//  236 void ZDApp_InitZdoCBFunc(void);
//  237 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  238 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
//  239 void ZDApp_InitPendingBind( void );
//  240 void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
//  241 void ZDApp_AgeOutPendingBindEntry( void );
//  242 #endif
//  243 
//  244 void ZDApp_SetParentAnnceTimer( void );
//  245 
//  246 /*********************************************************************
//  247  * LOCAL VARIABLES
//  248  */
//  249 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  250 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  251 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  252 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  253 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  254 
//  255 #if defined( HOLD_AUTO_START )
//  256   devStates_t devState = DEV_HOLD;
//  257 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  258   devStates_t devState = DEV_INIT;
devState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devState>`
        REQUIRE __INIT_XDATA_I
//  259 #endif
//  260 
//  261 // previous rejoin state

        RSEG XDATA_I:XDATA:NOROOT(0)
//  262   devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
prevDevState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for prevDevState>`
        REQUIRE __INIT_XDATA_I
//  263 
//  264 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
//  265   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
//  266   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  267                         // to parent. Set to make the device do an Orphan scan.
//  268 #else
//  269   // Set the default to coodinator

        RSEG XDATA_I:XDATA:NOROOT(0)
//  270   devStartModes_t devStartMode = MODE_HARD;
devStartMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for devStartMode>`
        REQUIRE __INIT_XDATA_I
//  271 #endif
//  272 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  273 uint8 retryCnt = 0;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  274 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  275 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  276 {
//  277   ZDO_EP,
//  278   &ZDAppTaskID,
//  279   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  280   (afNetworkLatencyReq_t)0            // No Network Latency req
//  281 };
//  282 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  283 uint32 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DATA32
        DS 4
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  284 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  285 ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
ZDApp_NewDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  286 
//  287 /* "Hold Key" status saved during ZDAppCheckForHoldKey() */
//  288 //static uint8 zdappHoldKeys;
//  289 
//  290 /*********************************************************************
//  291  * @fn      ZDApp_Init
//  292  *
//  293  * @brief   ZDApp Initialization function.
//  294  *
//  295  * @param   task_id - ZDApp Task ID
//  296  *
//  297  * @return  None
//  298  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  299 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDApp_Init
        CODE
//  300 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitZdoCBFunc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitPendingBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  301   // Save the task ID
//  302   ZDAppTaskID = task_id;
        MOV       DPTR,#ZDAppTaskID
        MOVX      @DPTR,A
//  303 
//  304   // Initialize the ZDO global device short address storage
//  305   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV       DPTR,#ZDAppNwkAddr + 8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  306   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV       DPTR,#ZDAppNwkAddr
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  307   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
//  308 
//  309   // Check for manual "Hold Auto Start"
//  310 //  ZDAppCheckForHoldKey();
//  311 
//  312   // Initialize ZDO items and setup the device - type of device to create.
//  313   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
//  314 
//  315   // Register the endpoint description with the AF
//  316   // This task doesn't have a Simple description, but we still need
//  317   // to register the endpoint.
//  318   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,#ZDApp_epDesc & 0xff
        MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  319 
//  320 #if defined( ZDO_USERDESC_RESPONSE )
//  321   ZDApp_InitUserDesc();
//  322 #endif // ZDO_USERDESC_RESPONSE
//  323 
//  324   // Start the device?
//  325   if ( devState != DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JZ        ??ZDApp_Init_0
//  326   {
//  327     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??ZDApp_Init_1
//  328   }
//  329   else
//  330   {
//  331     ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
??ZDApp_Init_0:
        ; Setup parameters for call to function ZDOInitDevice
        MOV       R2,#-0x1
        MOV       R3,#-0x1
??ZDApp_Init_1:
        LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
//  332     // Blink LED to indicate HOLD_START
//  333 //    HalLedBlink ( HAL_LED_4, 0, 50, 500 );
//  334   }
//  335 
//  336   // Initialize the ZDO callback function pointers zdoCBFunc[]
//  337   ZDApp_InitZdoCBFunc();
        ; Setup parameters for call to function ZDApp_InitZdoCBFunc
        LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
//  338 
//  339   ZDApp_RegisterCBs();
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
//  340 
//  341 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  342 #if defined ( REFLECTOR )
//  343   ZDApp_InitPendingBind();
        ; Setup parameters for call to function ZDApp_InitPendingBind
        LCALL     `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
//  344 #endif
//  345 #endif
//  346 } /* ZDApp_Init() */
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  347 
//  348 /*********************************************************************
//  349  * @fn          ZDApp_SecInit
//  350  *
//  351  * @brief       ZDApp initialize security.
//  352  *
//  353  * @param       state - device initialization state
//  354  *
//  355  * @return      none
//  356  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  357 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDApp_SecInit
        CODE
//  358 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,R1
//  359   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  360 
//  361   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  362   {
//  363     // Set the Trust Center bit
//  364     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
        MOVX      A,@DPTR
        ORL       A,#0x1
        MOVX      @DPTR,A
//  365   }
//  366 
//  367   // Initialize ZigBee Device Security Manager
//  368   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
//  369 
//  370   if ( ZG_SECURE_ENABLED )
//  371   {
//  372     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
        MOV       A,?V0
        JZ        ??ZDApp_SecInit_0
//  373     {
//  374       nwkFrameCounter = 0;
        MOV       DPTR,#nwkFrameCounter
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  375 
//  376       if( _NIB.nwkKeyLoaded == FALSE )
        MOV       DPTR,#_NIB + 61
        MOVX      A,@DPTR
        JNZ       ??ZDApp_SecInit_0
//  377       {
//  378         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  379              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
//  380         {
//  381             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
//  382             SSP_UpdateNwkKey( zgPreConfigKey, 0);
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
//  383             SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       R1,#0x0
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
//  384 
//  385             // clear local copy of key
//  386             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  387         }
//  388       }
//  389     }
//  390 
//  391     // clean the new devices list when Security module is initialized
//  392     if ( ZDApp_NewDeviceList != NULL )
??ZDApp_SecInit_0:
        MOV       DPTR,#ZDApp_NewDeviceList
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_97:
        JZ        ??ZDApp_SecInit_1
//  393     {
//  394       ZDAppNewDevice_t *pNewDeviceNext;
//  395 
//  396       while ( ZDApp_NewDeviceList )
//  397       {
//  398         pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
??ZDApp_SecInit_2:
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  399         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        LCALL     ?Subroutine21 & 0xFFFF
//  400         ZDApp_NewDeviceList = pNewDeviceNext;
??CrossCallReturnLabel_43:
        MOV       A,R7
        MOV       R1,A
        MOV       DPTR,#ZDApp_NewDeviceList
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  401       }
        MOV       A,R6
        ORL       A,R1
        JNZ       ??ZDApp_SecInit_2
//  402     }
//  403   }
//  404 }
??ZDApp_SecInit_1:
        MOV       A,#0x10
        LJMP      ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ZDApp_ProcessSecEvent
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDApp_SecInit
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDApp_ProcessSecEvent
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function ZDApp_ProcessSecEvent
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV       DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function ZDApp_SecInit
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function ZDApp_ProcessSecEvent
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
//  405 
//  406 /*********************************************************************
//  407  * @fn      ZDApp_event_loop()
//  408  *
//  409  * @brief   Main event loop for Zigbee device objects task. This function
//  410  *          should be called at periodic intervals.
//  411  *
//  412  * @param   task_id - Task ID
//  413  * @param   events  - Bitmap of events
//  414  *
//  415  * @return  none
//  416  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  417 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZDApp_event_loop
        CODE
//  418 {
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_NetworkStartEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_pwrmgr_device
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_SendParentAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StartJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_StopJoiningCycle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_AgeOutPendingBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessSecEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  419   uint8 *msg_ptr;
//  420 
//  421   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??ZDApp_event_loop_0
//  422   {
//  423     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  424     {
//  425       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  426 
//  427       // Release the memory
//  428       osal_msg_deallocate( msg_ptr );
//  429     }
//  430 
//  431     // Return unprocessed events
//  432     return (events ^ SYS_EVENT_MSG);
//  433   }
//  434 
//  435   if ( events & ZDO_NETWORK_INIT )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??ZDApp_event_loop_1
//  436   {
//  437     // Initialize apps and start the network
//  438     ZDApp_ChangeState( DEV_INIT );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x1
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  439 
//  440     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  441                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV       R4,#0xf
        MOV       R3,#0xf
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        MOV       R1,A
        LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
//  442 
//  443     // Return unprocessed events
//  444     return (events ^ ZDO_NETWORK_INIT);
        MOV       A,R6
        XRL       A,#0x1
        LJMP      ??ZDApp_event_loop_2 & 0xFFFF
//  445   }
??ZDApp_event_loop_3:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??ZDApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,R3
        JNZ       ??ZDApp_event_loop_3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??ZDApp_event_loop_4 & 0xFFFF
//  446 
//  447   if ( ZSTACK_ROUTER_BUILD )
//  448   {
//  449     if ( events & ZDO_NETWORK_START )
??ZDApp_event_loop_1:
        ANL       A,#0x2
        JZ        ??ZDApp_event_loop_5
//  450     {
//  451       ZDApp_NetworkStartEvt();
        ; Setup parameters for call to function ZDApp_NetworkStartEvt
        LCALL     `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
//  452 
//  453       // Return unprocessed events
//  454       return (events ^ ZDO_NETWORK_START);
        MOV       A,R6
        XRL       A,#0x2
        LJMP      ??ZDApp_event_loop_2 & 0xFFFF
//  455     }
//  456 
//  457     if ( events & ZDO_ROUTER_START )
??ZDApp_event_loop_5:
        MOV       A,R2
        ANL       A,#0x20
        JZ        ??ZDApp_event_loop_6
//  458     {
//  459       if ( nwkStatus == ZSuccess )
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_event_loop_7
//  460       {
//  461         if ( devState == DEV_END_DEVICE )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??ZDApp_event_loop_8
//  462         {
//  463           ZDApp_ChangeState( DEV_ROUTER );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x7
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  464         }
//  465 
//  466         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_event_loop_8:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV       R1,#0x0
        LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
//  467 
//  468         if ( zgChildAgingEnable == TRUE )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_event_loop_7
//  469         {
//  470           // Once the device has changed its state to a ROUTER set the timer to send
//  471           // Parent annce
//  472           ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
//  473         }
//  474       }
//  475       else
//  476       {
//  477         // remain as end device
//  478       }
//  479       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_event_loop_7:
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
//  480 
//  481       // Return unprocessed events
//  482       return (events ^ ZDO_ROUTER_START);
??CrossCallReturnLabel_51:
        MOV       A,R6
        XRL       A,#0x20
        SJMP      ??ZDApp_event_loop_2
//  483     }
//  484 
//  485     if ( events & ZDO_PARENT_ANNCE_EVT )
??ZDApp_event_loop_6:
        MOV       A,R3
        ANL       A,#0x40
        JZ        ??ZDApp_event_loop_9
//  486     {
//  487       ZDApp_SendParentAnnce();
        ; Setup parameters for call to function ZDApp_SendParentAnnce
        LCALL     `??ZDApp_SendParentAnnce::?relay`; Banked call to: ZDApp_SendParentAnnce
//  488 
//  489       // Return unprocessed events
//  490       return (events ^ ZDO_PARENT_ANNCE_EVT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x40
        LJMP      ??ZDApp_event_loop_4 & 0xFFFF
//  491     }
//  492   }
//  493 
//  494   if( events & ZDO_REJOIN_BACKOFF )
??ZDApp_event_loop_9:
        MOV       A,R3
        ANL       A,#0x20
        JZ        ??ZDApp_event_loop_10
//  495   {
//  496     if( devState == DEV_NWK_BACKOFF )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0xc
        JNZ       ??ZDApp_event_loop_11
//  497     {
//  498       ZDApp_ChangeState(DEV_NWK_DISC);
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x2
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  499       // Restart scan for rejoin
//  500       ZDApp_StartJoiningCycle();
        ; Setup parameters for call to function ZDApp_StartJoiningCycle
        LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
//  501       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#zgDefaultRejoinScan
        SJMP      ??ZDApp_event_loop_12
//  502     }
//  503     else
//  504     {
//  505       // Rejoin backoff, silent period
//  506       ZDApp_ChangeState(DEV_NWK_BACKOFF);
??ZDApp_event_loop_11:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0xc
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  507       ZDApp_StopJoiningCycle();
        ; Setup parameters for call to function ZDApp_StopJoiningCycle
        LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
//  508       osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#zgDefaultRejoinBackoff
??ZDApp_event_loop_12:
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x0
        MOV       R3,#0x20
//  509     }
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  510 
//  511     return ( events ^ ZDO_REJOIN_BACKOFF);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x20
        SJMP      ??ZDApp_event_loop_4
//  512   }
//  513 
//  514   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_10:
        MOV       A,R2
        ANL       A,#0x10
        JZ        ??ZDApp_event_loop_13
//  515   {
//  516     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
//  517 
//  518     // At start up, do one MTO route discovery if the device is a concentrator
//  519     if ( zgConcentratorEnable == TRUE )
        MOV       DPTR,#zgConcentratorEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_event_loop_14
//  520     {
//  521       // Start next event
//  522       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine57_0 & 0xFFFF
//  523     }
??CrossCallReturnLabel_85:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  524 
//  525     // Return unprocessed events
//  526     return (events ^ ZDO_STATE_CHANGE_EVT);
??ZDApp_event_loop_14:
        MOV       A,R6
        XRL       A,#0x10
??ZDApp_event_loop_2:
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_event_loop_4
//  527   }
//  528 
//  529   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_13:
        MOV       A,R2
        ANL       A,#0x8
        JZ        ??ZDApp_event_loop_15
//  530   {
//  531     // User defined logic
//  532 
//  533     // Return unprocessed events
//  534     return (events ^ ZDO_COMMAND_CNF);
        MOV       A,R2
        XRL       A,#0x8
        MOV       R2,A
        SJMP      ??ZDApp_event_loop_16
//  535   }
//  536 
//  537   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_15:
        MOV       A,R3
        ANL       A,#0x1
        JZ        ??ZDApp_event_loop_17
//  538   {
//  539     // Save only in valid state
//  540     if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
//  541     {
//  542       ZDApp_SaveNetworkStateEvt();
//  543     }
//  544 
//  545     // Return unprocessed events
//  546     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV       A,R3
        XRL       A,#0x1
        SJMP      ??ZDApp_event_loop_4
//  547   }
//  548 
//  549   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_17:
        MOV       A,R2
        ANL       A,#0x4
        JZ        ??ZDApp_event_loop_18
//  550   {
//  551 #ifdef ZBA_FALLBACK_NWKKEY
//  552     if ( devState == DEV_END_DEVICE_UNAUTH )
//  553     {
//  554       ZDSecMgrFallbackNwkKey();
//  555     }
//  556     else
//  557 #endif
//  558     {
//  559       // Set the NV startup option to force a "new" join.
//  560       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x2
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  561 
//  562       // The device has been in the UNAUTH state, so reset
//  563       // Note: there will be no return from this call
//  564       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL     Onboard_soft_reset & 0xFFFF
//  565     }
//  566   }
//  567 
//  568 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  569   if ( events & ZDO_PENDING_BIND_REQ_EVT )
??ZDApp_event_loop_18:
        MOV       A,R7
        ANL       A,#0x10
        JZ        ??ZDApp_event_loop_19
//  570   {
//  571 #if defined ( REFLECTOR )
//  572     ZDApp_AgeOutPendingBindEntry();
        ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
        LCALL     `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
//  573 #endif
//  574     // Return unprocessed events
//  575     return (events ^ ZDO_PENDING_BIND_REQ_EVT);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x10
??ZDApp_event_loop_4:
        MOV       R3,A
        SJMP      ??ZDApp_event_loop_16
//  576   }
//  577 #endif
//  578 
//  579   if ( ZG_SECURE_ENABLED )
//  580   {
//  581     return ( ZDApp_ProcessSecEvent( task_id, events ) );
??ZDApp_event_loop_19:
        ; Setup parameters for call to function ZDApp_ProcessSecEvent
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V2
        LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
//  582   }
??ZDApp_event_loop_16:
        SJMP      ??Subroutine48_0
//  583   else
//  584   {
//  585     // Discard or make more handlers
//  586     return 0;
//  587   }
//  588 }
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ZDApp_NetworkStartEvt
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond20) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond20) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond20) CFA_SP SP+-7
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function ZDApp_ChangeState
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOV       R2,#0x10
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
          CFI Conditional ??CrossCallReturnLabel_57
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function ZDO_NetworkFormationConfirmCB
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function ZDO_StartRouterConfirmCB
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function ZDApp_NetworkInit
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function ZDApp_event_loop
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function ZDApp_NetworkStartEvt
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond31) CFA_SP SP+-7
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDApp_ChangeState
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOV       R3,#0x0
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 58)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock37
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock38
//  589 
//  590 /*********************************************************************
//  591  * @fn      ZDApp_ProcessSecEvent()
//  592  *
//  593  * @brief   Process incoming security events.
//  594  *
//  595  * @param   task_id - Task ID
//  596  * @param   events  - Bitmap of events
//  597  *
//  598  * @return  none
//  599  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  600 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
        CODE
//  601 {
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrNewDeviceEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  602   (void)task_id;  // Intentionally unreferenced parameter
//  603 
//  604   if ( ZSTACK_ROUTER_BUILD )
//  605   {
//  606     if ( events & ZDO_NEW_DEVICE )
        MOV       A,R2
        ANL       A,#0x40
        JZ        ??ZDApp_ProcessSecEvent_0
//  607     {
//  608       // process the new device event
//  609       if ( ZDApp_NewDeviceList )
        MOV       DPTR,#ZDApp_NewDeviceList
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_98:
        JZ        ??ZDApp_ProcessSecEvent_1
//  610       {
//  611         ZDAppNewDevice_t *pNewDevice;
//  612         uint16 timeDelta;
//  613 
//  614         (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
        ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_135:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL     `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
//  615 
//  616         pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  617         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        LCALL     ?Subroutine21 & 0xFFFF
//  618         ZDApp_NewDeviceList = pNewDevice;
??CrossCallReturnLabel_44:
        MOV       DPTR,#ZDApp_NewDeviceList
        LCALL     ??Subroutine64_0 & 0xFFFF
//  619 
//  620         if ( pNewDevice )
??CrossCallReturnLabel_117:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??ZDApp_ProcessSecEvent_1
//  621         {
//  622           timeDelta = pNewDevice->timeDelta;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
//  623           pNewDevice = pNewDevice->next;
        SJMP      ??ZDApp_ProcessSecEvent_2
//  624 
//  625           while ( pNewDevice )
//  626           {
//  627             pNewDevice->timeDelta -= timeDelta;
??ZDApp_ProcessSecEvent_3:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,?V5
        MOVX      @DPTR,A
//  628             pNewDevice = pNewDevice->next;
??ZDApp_ProcessSecEvent_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  629           }
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??ZDApp_ProcessSecEvent_3
//  630 
//  631           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
        ; Setup parameters for call to function osal_start_timerEx
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine16 & 0xFFFF
//  632         }
//  633       }
??CrossCallReturnLabel_79:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  634 
//  635       // Return unprocessed events
//  636       return (events ^ ZDO_NEW_DEVICE);
??ZDApp_ProcessSecEvent_1:
        MOV       A,R6
        XRL       A,#0x40
        SJMP      ??ZDApp_ProcessSecEvent_4
//  637     }
//  638   }
//  639 
//  640   if ( events & ZDO_DEVICE_AUTH )
??ZDApp_ProcessSecEvent_0:
        MOV       A,R2
        ANL       A,#0x80
        JZ        ??ZDApp_ProcessSecEvent_5
//  641   {
//  642     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
//  643 
//  644     // Return unprocessed events
//  645     return (events ^ ZDO_DEVICE_AUTH);
        MOV       A,R6
        XRL       A,#0x80
??ZDApp_ProcessSecEvent_4:
        MOV       R2,A
        MOV       A,R7
        SJMP      ??ZDApp_ProcessSecEvent_6
//  646   }
//  647 
//  648   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_5:
        MOV       A,R3
        ANL       A,#0x2
        JZ        ??ZDApp_ProcessSecEvent_7
//  649   {
//  650     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  651 
//  652     // Return unprocessed events
//  653     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x2
        SJMP      ??ZDApp_ProcessSecEvent_6
//  654   }
//  655 
//  656   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_7:
        MOV       A,R3
        ANL       A,#0x8
        JZ        ??ZDApp_ProcessSecEvent_8
//  657   {
//  658 #if defined (NV_RESTORE)
//  659     ZDSecMgrSaveApsLinkKey();
//  660 #endif // (NV_RESTORE)
//  661 
//  662     // Return unprocessed events
//  663     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV       A,R3
        XRL       A,#0x8
        SJMP      ??ZDApp_ProcessSecEvent_6
//  664   }
//  665 
//  666   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_8:
        MOV       A,R3
        ANL       A,#0x4
        JZ        ??ZDApp_ProcessSecEvent_9
//  667   {
//  668     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
//  669 
//  670     // Return unprocessed events
//  671     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x4
??ZDApp_ProcessSecEvent_6:
        MOV       R3,A
        SJMP      ??ZDApp_ProcessSecEvent_10
//  672   }
//  673 
//  674   // Discard or make more handlers
//  675   return 0;
??ZDApp_ProcessSecEvent_9:
        MOV       R2,#0x0
        MOV       R3,#0x0
??ZDApp_ProcessSecEvent_10:
          CFI EndBlock cfiBlock39
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  676 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40
//  677 
//  678 /*********************************************************************
//  679  * Application Functions
//  680  */
//  681 
//  682 /*********************************************************************
//  683  * @fn      ZDOInitDevice
//  684  *
//  685  * @brief   Start the device in the network.  This function will read
//  686  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  687  *   restore the network state of the device.
//  688  *
//  689  * @param   startDelay - timeDelay to start device (in milliseconds).
//  690  *                       There is a jitter added to this delay:
//  691  *                       ((NWK_START_DELAY + startDelay)
//  692  *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  693  *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
//  694  *                       this function will hold the network init. Application
//  695  *                       can start the device.
//  696  *
//  697  * NOTE:    If the application would like to force a "new" join, the
//  698  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  699  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  700  *          this function. "new" join means to not restore the network
//  701  *          state of the device. Use zgWriteStartupOptions() to set these
//  702  *          options.
//  703  *
//  704  * @return
//  705  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  706  *          restored.
//  707  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  708  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  709  *          it could mean that there was no network state to restore.
//  710  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  711 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function ZDOInitDevice
        CODE
//  712 {
        FUNCALL ZDOInitDevice, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_SecInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  713   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  714   uint16 extendedDelay = 0;
//  715 
//  716   if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDOInitDevice_0
//  717   {
//  718     // Initialize the RAM items table, in case an NV item has been updated.
//  719     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV       R1,#0x0
        LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
//  720   }
//  721 
//  722   ZDConfig_InitDescriptors();
??ZDOInitDevice_0:
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
//  723   //devtag.071807.todo - fix this temporary solution
//  724   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 14
        MOVX      @DPTR,A
//  725 
//  726 #if defined ( NV_RESTORE )
//  727   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  728   // while booting to skip past NV Restore.
//  729 //  if ( zdappHoldKeys == SW_BYPASS_NV )
//  730 //  {
//  731 //    zdappHoldKeys = 0;   // Only once
//  732 //    networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  733 //  }
//  734 //  else
//  735 //  {
//  736 //    // Determine if NV should be restored
//  737 //    networkStateNV = ZDApp_ReadNetworkRestoreState();
//  738 //  }
//  739   networkStateNV = ZDApp_ReadNetworkRestoreState();
//  740 
//  741   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  742   {
//  743     networkStateNV = ZDApp_RestoreNetworkState();
//  744     runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
//  745   }
//  746   else
//  747   {
//  748     // Wipe out the network state in NV
//  749     NLME_InitNV();
//  750     NLME_SetDefaultNV();
//  751     // clear NWK key values
//  752     ZDSecMgrClearNVKeyValues();
//  753   }
//  754 #endif
//  755 
//  756   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  757   {
//  758     ZDAppDetermineDeviceType();
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
//  759 
//  760     // Only delay if joining network - not restoring network state
//  761     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  762               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       A,R2
        ANL       A,#0x7f
        MOV       R0,A
        MOV       A,?V0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x64
        MOV       R6,A
        CLR       A
        ADDC      A,R1
        MOV       R7,A
//  763 
//  764     runtimeChannel = zgDefaultChannelList;
        MOV       DPTR,#zgDefaultChannelList
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#runtimeChannel
        LCALL     ?XSTORE_R0123
//  765   }
//  766 
//  767   // Initialize the security for type of device
//  768   ZDApp_SecInit( networkStateNV );
        ; Setup parameters for call to function ZDApp_SecInit
        MOV       R1,#0x1
        LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
//  769 
//  770   if( ZDO_INIT_HOLD_NWK_START != startDelay )
        MOV       A,#-0x1
        XRL       A,?V0
        JNZ       ??ZDOInitDevice_1
        MOV       A,#-0x1
        XRL       A,?V1
??ZDOInitDevice_1:
        JZ        ??ZDOInitDevice_2
//  771   {
//  772     devState = DEV_INIT;    // Remove the Hold state
        MOV       DPTR,#devState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  773 
//  774     // Initialize leave control logic
//  775     ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
//  776 
//  777     // Trigger the network start
//  778     ZDApp_NetworkInit( extendedDelay );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
//  779   }
//  780 
//  781   // set broadcast address mask to support broadcast filtering
//  782   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
??ZDOInitDevice_2:
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
//  783 
//  784   return ( networkStateNV );
        MOV       R1,#0x1
        SJMP      ??Subroutine50_0
//  785 }
          CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x4
          CFI EndBlock cfiBlock42
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 49)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock43
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock44
//  786 
//  787 /*********************************************************************
//  788  * @fn      ZDApp_ReadNetworkRestoreState
//  789  *
//  790  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  791  *          or not to restore the network state.
//  792  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  793  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  794  *
//  795  * @param   none
//  796  *
//  797  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  798  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  799  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  800  *          ZCD_NV_STARTUP_OPTION
//  801  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  802 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function ZDApp_ReadNetworkRestoreState
        CODE
//  803 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  804   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV       R6,#0x0
//  805 
//  806   // Look for the New Network State option.
//  807   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV       A,R1
        MOV       R0,A
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_ReadNetworkRestoreState_0
//  808   {
//  809     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV       R6,#0x1
//  810   }
//  811 
//  812   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV       A,R6
        MOV       R1,A
        LJMP      ??Subroutine66_0 & 0xFFFF
//  813 }
          CFI EndBlock cfiBlock45
//  814 
//  815 /*********************************************************************
//  816  * @fn      ZDAppDetermineDeviceType()
//  817  *
//  818  * @brief   Determines the type of device to start.
//  819  *
//  820  *          Looks at zgDeviceLogicalType and determines what type of
//  821  *          device to start.  The types are:
//  822  *            ZG_DEVICETYPE_COORDINATOR
//  823  *            ZG_DEVICETYPE_ROUTER
//  824  *            ZG_DEVICETYPE_ENDDEVICE
//  825  *
//  826  * @param   none
//  827  *
//  828  * @return  none
//  829  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  830 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function ZDAppDetermineDeviceType
        CODE
//  831 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  832   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JNZ       ??ZDAppDetermineDeviceType_0
//  833   {
//  834     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV       DPTR,#devStartMode
        MOV       A,#0x2
        MOVX      @DPTR,A
//  835     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        SJMP      ??ZDAppDetermineDeviceType_1
//  836   }
//  837   else
//  838   {
//  839     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        MOV       R0,A
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDAppDetermineDeviceType_2
//  840       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV       A,#0x1
        SJMP      ??ZDAppDetermineDeviceType_3
//  841     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDAppDetermineDeviceType_4
//  842       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV       A,#0x2
??ZDAppDetermineDeviceType_3:
        ORL       A,R0
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      @DPTR,A
//  843 
//  844     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  845     // The device shall do rejoin the network. Otherwise, do normal join
//  846     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#AIB_apsUseExtendedPANID & 0xff
        MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        MOV       DPTR,#devStartMode
        JNZ       ??ZDAppDetermineDeviceType_5
//  847     {
//  848       devStartMode = MODE_JOIN;     // Assume joining
        CLR       A
        SJMP      ??ZDAppDetermineDeviceType_1
//  849     }
//  850     else
//  851     {
//  852       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV       A,#0x3
        MOVX      @DPTR,A
//  853       prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV       DPTR,#prevDevState
        INC       A
??ZDAppDetermineDeviceType_1:
        MOVX      @DPTR,A
//  854     }
//  855   }
//  856 }
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock46
//  857 
//  858 /*********************************************************************
//  859  * @fn      ZDApp_NetworkStartEvt()
//  860  *
//  861  * @brief   Process the Network Start Event
//  862  *
//  863  * @param   none
//  864  *
//  865  * @return  none
//  866  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  867 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
        CODE
//  868 {
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_SetParentAnnceTimer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  869   if ( nwkStatus == ZSuccess )
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_NetworkStartEvt_0
//  870   {
//  871     // Successfully started a ZigBee network
//  872     if ( devState == DEV_COORD_STARTING )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x8
        JNZ       ??ZDApp_NetworkStartEvt_1
//  873     {
//  874       //save NIB to NV before child joins if NV_RESTORE is defined
//  875       ZDApp_NwkWriteNVRequest();
//  876       ZDApp_ChangeState( DEV_ZB_COORD );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x9
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  877 
//  878       if ( zgChildAgingEnable == TRUE )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_52
//  879       {
//  880         // Once the device has changed its state to a COORDINATOR set the timer to send
//  881         // Parent annce
//  882         ZDApp_SetParentAnnceTimer();
        ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
        LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
        SJMP      ??CrossCallReturnLabel_52
//  883       }
//  884     }
//  885     else
//  886     {
//  887       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
//  888     }
//  889 
//  890     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??CrossCallReturnLabel_52:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV       R1,#0x0
        LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
        SJMP      ??ZDApp_NetworkStartEvt_2
//  891   }
//  892   else
//  893   {
//  894     // Try again with a higher energy threshold
//  895     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV       A,R1
        MOV       R1,#0x0
        ADD       A,#0x10
        JNC       ??ZDApp_NetworkStartEvt_3
        INC       R1
??ZDApp_NetworkStartEvt_3:
        CLR       C
        SUBB      A,#-0x1
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??ZDApp_NetworkStartEvt_4
//  896     {
//  897       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV       A,R1
        MOV       R0,A
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        MOV       A,#0x10
        ADD       A,R1
        MOV       R1,A
        LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
//  898       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x1
        LCALL     ??Subroutine47_0 & 0xFFFF
//  899     }
??CrossCallReturnLabel_57:
        SJMP      ??ZDApp_NetworkStartEvt_2
//  900     else
//  901     {
//  902       // Failed to start network. Enter a dormant state (until user intervenes)
//  903       ZDApp_ChangeState( DEV_INIT );
??ZDApp_NetworkStartEvt_4:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x1
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
//  904     }
//  905   }
//  906 }
??ZDApp_NetworkStartEvt_2:
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock47
//  907 
//  908 /*********************************************************************
//  909  * @fn      ZDApp_DeviceAuthEvt()
//  910  *
//  911  * @brief   Process the Device Authentic Event
//  912  *
//  913  * @param   none
//  914  *
//  915  * @return  none
//  916  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  917 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
        CODE
//  918 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ChangeState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_StartRouterRequest
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  919   // received authentication from trust center
//  920   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x5
        JNZ       ??ZDApp_DeviceAuthEvt_0
//  921   {
//  922     // Stop the reset timer so it doesn't reset
//  923     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
//  924 
//  925     ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        LCALL     ?Subroutine26 & 0xFFFF
//  926 
//  927     // Set the Power Manager Device
//  928 #if defined ( POWER_SAVING )
//  929     osal_pwrmgr_device( PWRMGR_BATTERY );
//  930 #endif
//  931 
//  932     if ( ZSTACK_ROUTER_BUILD )
//  933     {
//  934       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??CrossCallReturnLabel_124:
        JZ        ??ZDApp_DeviceAuthEvt_1
//  935       {
//  936         // NOTE: first two parameters are not used, see NLMEDE.h for details
//  937         NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV       R3,#0x0
        MOV       R2,#0x0
        MOV       R1,#0x0
        LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
//  938       }
//  939     }
//  940 
//  941     // Notify to save info into NV
//  942     ZDApp_NVUpdate();
//  943 
//  944     // Save off the security
//  945     ZDApp_SaveNwkKey();
??ZDApp_DeviceAuthEvt_1:
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  946 
//  947     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     ?Subroutine37 & 0xFFFF
//  948 
//  949     if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
//  950         || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
//  951           && (zgChildAgingEnable == TRUE) ) )
??CrossCallReturnLabel_31:
        JNC       ??ZDApp_DeviceAuthEvt_2
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_DeviceAuthEvt_0
//  952     {
//  953       NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_DeviceAuthEvt_2:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
//  954     }
//  955   }
//  956   else
//  957   {
//  958     ZDApp_NVUpdate();
//  959   }
//  960 }
??ZDApp_DeviceAuthEvt_0:
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock48
//  961 
//  962 /*********************************************************************
//  963  * @fn      ZDApp_SaveNetworkStateEvt()
//  964  *
//  965  * @brief   Process the Save the Network State Event
//  966  *
//  967  * @param   none
//  968  *
//  969  * @return  none
//  970  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  971 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function ZDApp_SaveNetworkStateEvt
        CODE
//  972 {
        ; Saved register size: 0
        ; Auto size: 0
//  973 #if defined ( NV_RESTORE )
//  974  #if defined ( NV_TURN_OFF_RADIO )
//  975   // Turn off the radio's receiver during an NV update
//  976   uint8 RxOnIdle;
//  977   uint8 x = false;
//  978   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  979   ZMacSetReq( ZMacRxOnIdle, &x );
//  980  #endif
//  981 
//  982   // Update the Network State in NV
//  983   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  984                  NWK_NV_DEVICELIST_ENABLE |
//  985                  NWK_NV_BINDING_ENABLE    |
//  986                  NWK_NV_ADDRMGR_ENABLE );
//  987 
//  988   // Reset the NV startup option to resume from NV by
//  989   // clearing the "New" join option.
//  990   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  991 
//  992  #if defined ( NV_TURN_OFF_RADIO )
//  993   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  994  #endif
//  995 #endif // NV_RESTORE
//  996 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock49
//  997 
//  998 #if defined ( NV_RESTORE )
//  999 /*********************************************************************
// 1000  * @fn      ZDApp_RestoreNetworkState()
// 1001  *
// 1002  * @brief   This function will restore the network state of the
// 1003  *          device if the network state is stored in NV.
// 1004  *
// 1005  * @param   none
// 1006  *
// 1007  * @return
// 1008  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
// 1009  *          restored.
// 1010  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
// 1011  *          This could mean that zgStartupOption said to not restore, or
// 1012  *          it could mean that there was no network state to restore.
// 1013  *
// 1014  */
// 1015 uint8 ZDApp_RestoreNetworkState( void )
// 1016 {
// 1017   uint8 nvStat;
// 1018 
// 1019   // Initialize NWK NV items
// 1020   nvStat = NLME_InitNV();
// 1021 
// 1022   if ( nvStat != NV_OPER_FAILED )
// 1023   {
// 1024     if ( NLME_RestoreFromNV() )
// 1025     {
// 1026       // Are we a coordinator
// 1027       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
// 1028       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
// 1029         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
// 1030       devStartMode = MODE_RESUME;
// 1031       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1032     }
// 1033     else
// 1034       nvStat = NV_ITEM_UNINIT;
// 1035 
// 1036     if ( ZG_SECURE_ENABLED )
// 1037     {
// 1038       nwkFrameCounterChanges = 0;
// 1039 
// 1040       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1041       {
// 1042         ZDApp_RestoreNwkKey( TRUE );
// 1043       }
// 1044     }
// 1045 
// 1046     // The default for RxOnWhenIdle is true for Routers and false for end devices
// 1047     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
// 1048     // other than default.
// 1049   }
// 1050 
// 1051   if ( nvStat == ZSUCCESS )
// 1052     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
// 1053   else
// 1054     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
// 1055 }
// 1056 #endif // NV_RESTORE
// 1057 
// 1058 /*********************************************************************
// 1059  * @fn      ZDApp_InitUserDesc()
// 1060  *
// 1061  * @brief   Initialize the User Descriptor, the descriptor is read from NV
// 1062  *          when needed.  If you want to initialize the User descriptor to
// 1063  *          something other than all zero, do it here.
// 1064  *
// 1065  * @param   none
// 1066  *
// 1067  * @return  none
// 1068  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1069 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
        CODE
// 1070 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1071   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
// 1072 
// 1073   // Initialize the User Descriptor, the descriptor is read from NV
// 1074   // when needed.  If you want to initialize the User descriptor to something
// 1075   // other than all zero, do it here.
// 1076   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x11
        LCALL     ?Subroutine33 & 0xFFFF
// 1077   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
// 1078          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
??CrossCallReturnLabel_19:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#-0x7f
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_InitUserDesc_0
// 1079   {
// 1080     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
// 1081          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x11
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7f
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        JNZ       ??ZDApp_InitUserDesc_0
// 1082     {
// 1083       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??ZDApp_InitUserDesc_0
// 1084       {
// 1085         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.4
        MOVX      @DPTR,A
// 1086       }
// 1087     }
// 1088   }
// 1089 }
??ZDApp_InitUserDesc_0:
        MOV       A,#0x11
        LJMP      ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock50
// 1090 
// 1091 /*********************************************************************
// 1092  * @fn      ZDAppCheckForHoldKey()
// 1093  *
// 1094  * @brief   Check for key to set the device into Hold Auto Start
// 1095  *
// 1096  * @param   none
// 1097  *
// 1098  * @return  none
// 1099  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1100 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function ZDAppCheckForHoldKey
        CODE
// 1101 {
        ; Saved register size: 0
        ; Auto size: 0
// 1102 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
// 1103 
// 1104   // Get Keypad directly to see if a HOLD is needed
// 1105   zdappHoldKeys = HalKeyRead();
// 1106 
// 1107   // Hold down the SW_BYPASS_START key (see OnBoard.h)
// 1108   // while booting to avoid starting up the device.
// 1109   if ( zdappHoldKeys == SW_BYPASS_START )
// 1110   {
// 1111     // Change the device state to HOLD on start up
// 1112     devState = DEV_HOLD;
// 1113   }
// 1114 #endif // HAL_KEY
// 1115 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock51
// 1116 
// 1117 /*********************************************************************
// 1118  * @fn      ZDApp_ProcessOSALMsg()
// 1119  *
// 1120  * @brief   Process the incoming task message.
// 1121  *
// 1122  * @param   msgPtr - message to process
// 1123  *
// 1124  * @return  none
// 1125  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1126 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
        CODE
// 1127 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessSecMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1128   // Data Confirmation message fields
// 1129   uint8 sentEP;       // This should always be 0
// 1130   uint8 sentStatus;
// 1131   afDataConfirm_t *afDataConfirm;
// 1132   uint8 tmp;
// 1133 
// 1134   switch ( msgPtr->event )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        DEC       A
        JZ        ??ZDApp_ProcessOSALMsg_0
        DEC       A
        JZ        ??ZDApp_ProcessOSALMsg_0
        DEC       A
        JZ        ??ZDApp_ProcessOSALMsg_0
        ADD       A,#-0x17
        JZ        ??ZDApp_ProcessOSALMsg_1
        ADD       A,#0x47
        JZ        ??ZDApp_ProcessOSALMsg_2
        ADD       A,#-0x2a
        JZ        ??ZDApp_ProcessOSALMsg_3
        SJMP      ??ZDApp_ProcessOSALMsg_4
// 1135   {
// 1136     // Incoming ZDO Message
// 1137     case AF_INCOMING_MSG_CMD:
// 1138       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_1:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
// 1139       break;
        SJMP      ??ZDApp_ProcessOSALMsg_0
// 1140 
// 1141     case ZDO_CB_MSG:
// 1142       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_2:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
// 1143       break;
        SJMP      ??ZDApp_ProcessOSALMsg_0
// 1144 
// 1145     case AF_DATA_CONFIRM_CMD:
// 1146       // This message is received as a confirmation of a data packet sent.
// 1147       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1148       // The message fields are defined in AF.h
// 1149       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1150       sentEP = afDataConfirm->endpoint;
// 1151       sentStatus = afDataConfirm->hdr.status;
// 1152 
// 1153       // Action taken when confirmation is received.
// 1154 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1155       if ( pZDNwkMgr_ProcessDataConfirm )
??ZDApp_ProcessOSALMsg_3:
        MOV       DPTR,#pZDNwkMgr_ProcessDataConfirm
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_99:
        JZ        ??ZDApp_ProcessOSALMsg_0
// 1156         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
        ; Setup parameters for indirect call
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_136:
        LCALL     ?CALL_IND
        SJMP      ??ZDApp_ProcessOSALMsg_0
// 1157 #endif
// 1158       (void)sentEP;
// 1159       (void)sentStatus;
// 1160       break;
// 1161 
// 1162     case ZDO_NWK_DISC_CNF:
// 1163       if (devState != DEV_NWK_DISC)
// 1164         break;
// 1165 
// 1166       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1167       {
// 1168         // Process the network discovery scan results and choose a parent
// 1169         // device to join/rejoin itself
// 1170         networkDesc_t *pChosenNwk;
// 1171         if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
// 1172         {
// 1173           if ( devStartMode == MODE_JOIN )
// 1174           {
// 1175             ZDApp_ChangeState( DEV_NWK_JOINING );
// 1176 
// 1177             ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
// 1178 
// 1179             if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1180                                   pChosenNwk->logicalChannel,
// 1181                                   ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1182                                   pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
// 1183             {
// 1184               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1185                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1186             }
// 1187           } // if ( devStartMode == MODE_JOIN )
// 1188           else if ( devStartMode == MODE_REJOIN )
// 1189           {
// 1190             ZStatus_t rejoinStatus;
// 1191 
// 1192             // Transition state machine to correct rejoin state based on previous state before network discovery
// 1193             if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
// 1194             {
// 1195               if ( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
// 1196               {
// 1197                 ZDApp_ChangeState(DEV_NWK_SEC_REJOIN_ALL_CHANNEL);
// 1198               }
// 1199               else
// 1200               {
// 1201                 ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
// 1202               }
// 1203             }
// 1204             else
// 1205             {
// 1206               if( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
// 1207               {
// 1208                 ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
// 1209               }
// 1210               else
// 1211               {
// 1212                 ZDApp_ChangeState( DEV_NWK_TC_REJOIN_ALL_CHANNEL );
// 1213               }
// 1214             }
// 1215 
// 1216             // Before trying to do rejoin, check if the device has a valid short address
// 1217             // If not, generate a random short address for itself
// 1218             if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
// 1219             {
// 1220               uint16 commNwkAddr;
// 1221 
// 1222               // Verify if the Network address has been commissioned by external tool
// 1223               if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
// 1224                                  sizeof(commNwkAddr),
// 1225                                  (void*)&commNwkAddr ) == ZSUCCESS )   &&
// 1226                    ( commNwkAddr != INVALID_NODE_ADDR ) )
// 1227               {
// 1228                 _NIB.nwkDevAddress = commNwkAddr;
// 1229 
// 1230                 // clear Allocate address bit because device has a commissioned address
// 1231                 _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
// 1232               }
// 1233               else
// 1234               {
// 1235                 _NIB.nwkDevAddress = osal_rand();
// 1236               }
// 1237 
// 1238               ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
// 1239             }
// 1240 
// 1241             // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1242             if ( _NIB.nwkPanId == 0xFFFF )
// 1243             {
// 1244               _NIB.nwkPanId = pChosenNwk->panId;
// 1245               ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
// 1246             }
// 1247 
// 1248             tmp = true;
// 1249             ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
// 1250 
// 1251             // Perform Secure or Unsecure Rejoin depending on available configuration
// 1252             if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
// 1253             {
// 1254               rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
// 1255             }
// 1256             else
// 1257             {
// 1258               rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
// 1259             }
// 1260 
// 1261             if ( rejoinStatus != ZSuccess )
// 1262             {
// 1263               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1264                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1265             }
// 1266           } // else if ( devStartMode == MODE_REJOIN )
// 1267 
// 1268           // The receiver is on, turn network layer polling off.
// 1269           if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
// 1270           {
// 1271             // for an End Device with NO Child Table Management process or for a Router
// 1272             if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1273                  ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
// 1274             {
// 1275               NLME_SetPollRate( 0 );
// 1276               NLME_SetQueuedPollRate( 0 );
// 1277               NLME_SetResponseRate( 0 );
// 1278             }
// 1279           }
// 1280           else
// 1281           {
// 1282             if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
// 1283             {
// 1284               ZDApp_SavedPollRate = zgPollRate;
// 1285               NLME_SetPollRate( zgRejoinPollRate );
// 1286             }
// 1287           }
// 1288         }
// 1289         else
// 1290         {
// 1291           if ( continueJoining )
// 1292           {
// 1293 #if defined ( MANAGED_SCAN )
// 1294             ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1295 #else
// 1296             zdoDiscCounter++;
// 1297             ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1298                                         + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
// 1299 #endif
// 1300           }
// 1301         }
// 1302       }
// 1303       break;
// 1304 
// 1305     case ZDO_NWK_JOIN_IND:
// 1306       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1307       {
// 1308         ZDApp_ProcessNetworkJoin();
// 1309       }
// 1310       break;
// 1311 
// 1312     case ZDO_NWK_JOIN_REQ:
// 1313       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1314       {
// 1315         retryCnt = 0;
// 1316         devStartMode = MODE_RESUME;
// 1317         _tmpRejoinState = true;
// 1318         osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
// 1319         zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
// 1320         ZDApp_NetworkInit( 0 );
// 1321       }
// 1322       break;
// 1323 
// 1324     default:
// 1325       if ( ZG_SECURE_ENABLED )
// 1326         ZDApp_ProcessSecMsg( msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessSecMsg
        LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
// 1327       break;
// 1328   }
// 1329 
// 1330 }
??ZDApp_ProcessOSALMsg_0:
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock52
// 1331 
// 1332 /*********************************************************************
// 1333  * @fn      ZDApp_ProcessMsgCBs()
// 1334  *
// 1335  * @brief   Process response messages
// 1336  *
// 1337  * @param   none
// 1338  *
// 1339  * @return  none
// 1340  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1341 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
        CODE
// 1342 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDApp_ProcessPendingBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseEndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_MatchEndDeviceBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 44
        MOV       A,#-0x2c
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 58)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1343   switch ( inMsg->clusterID )
        MOV       A,R2
        ADD       A,#0xc
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       DPL,?V0
        MOV       DPH,A
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV       ?V2,R2
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        33
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32801
        DATA
        DATA16
        DATA
        DATA16
        DW        32802
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_4
        CODE
// 1344   {
// 1345 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1346     case NWK_addr_rsp:
// 1347     case IEEE_addr_rsp:
// 1348       {
// 1349         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1350 
// 1351         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1352         if ( pAddrRsp )
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
// 1353         {
// 1354           if ( pAddrRsp->status == ZSuccess )
        MOV       A,R2
        ADD       A,#0x3
        MOV       R6,A
        CLR       A
        ADDC      A,?V3
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessMsgCBs_5
// 1355           {
// 1356             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        INC       DPTR
        LCALL     ??Subroutine61_0 & 0xFFFF
// 1357           }
??CrossCallReturnLabel_89:
        LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
// 1358 
// 1359 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
// 1360           // look for pending bind entry for NWK_addr_rsp Only
// 1361           if ( inMsg->clusterID == NWK_addr_rsp )
??ZDApp_ProcessMsgCBs_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessMsgCBs_6
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x80
??ZDApp_ProcessMsgCBs_6:
        JNZ       ??ZDApp_ProcessMsgCBs_7
// 1362           {
// 1363 #if defined ( REFLECTOR )
// 1364             ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
// 1365 #endif
// 1366           }
// 1367 #endif
// 1368 
// 1369           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_7:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        SJMP      ??CrossCallReturnLabel_90
// 1370         }
// 1371       }
// 1372       break;
// 1373 #endif
// 1374 
// 1375 #if defined ( REFLECTOR )
// 1376     case Bind_req:
// 1377     case Unbind_req:
// 1378       {
// 1379         ZDO_BindUnbindReq_t bindReq;
// 1380         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
// 1381         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
// 1382       }
// 1383       break;
        SJMP      ??ZDApp_ProcessMsgCBs_4
// 1384 #endif
// 1385 
// 1386 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1387     case Bind_rsp:
// 1388     case Unbind_rsp:
// 1389       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
??ZDApp_ProcessMsgCBs_2:
        MOV       DPTR,#matchED
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_100:
        JZ        ??ZDApp_ProcessMsgCBs_4
// 1390       {
// 1391         ZDMatchSendState(
// 1392              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1393              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
        MOV       A,#0x21
        XRL       A,R2
        JNZ       ??ZDApp_ProcessMsgCBs_8
        MOV       A,#-0x80
        XRL       A,R3
??ZDApp_ProcessMsgCBs_8:
        JNZ       ??ZDApp_ProcessMsgCBs_9
        MOV       R1,#0x3
        SJMP      ??ZDApp_ProcessMsgCBs_10
??ZDApp_ProcessMsgCBs_9:
        MOV       R1,#0x2
??ZDApp_ProcessMsgCBs_10:
        ; Setup parameters for call to function ZDMatchSendState
        LCALL     ?Subroutine38 & 0xFFFF
// 1394       }
??CrossCallReturnLabel_33:
        MOV       R3,A
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV       R2,A
        LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
        SJMP      ??ZDApp_ProcessMsgCBs_4
// 1395       break;
// 1396 
// 1397     case End_Device_Bind_req:
// 1398       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1399       {
// 1400         ZDEndDeviceBind_t bindReq;
// 1401         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_3:
        ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
// 1402         ZDO_MatchEndDeviceBind( &bindReq );
        ; Setup parameters for call to function ZDO_MatchEndDeviceBind
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
// 1403 
// 1404         // Freeing the cluster lists - if allocated.
// 1405         if ( bindReq.numInClusters )
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??CrossCallReturnLabel_45
// 1406           osal_mem_free( bindReq.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine45_0 & 0xFFFF
// 1407         if ( bindReq.numOutClusters )
??CrossCallReturnLabel_45:
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??ZDApp_ProcessMsgCBs_4
// 1408           osal_mem_free( bindReq.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine61_0 & 0xFFFF
// 1409       }
// 1410       break;
// 1411 #endif
// 1412   }
??CrossCallReturnLabel_90:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1413 }
??ZDApp_ProcessMsgCBs_4:
        MOV       A,#0x2c
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock53
// 1414 
// 1415 /*********************************************************************
// 1416  * @fn      ZDApp_RegisterCBs()
// 1417  *
// 1418  * @brief   Process response messages
// 1419  *
// 1420  * @param   none
// 1421  *
// 1422  * @return  none
// 1423  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1424 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
        CODE
// 1425 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1426 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1427   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x1
        LCALL     ?Subroutine20 & 0xFFFF
// 1428 #endif
// 1429 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1430   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
??CrossCallReturnLabel_60:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x0
        LCALL     ?Subroutine20 & 0xFFFF
// 1431 #endif
// 1432 #if ZG_BUILD_COORDINATOR_TYPE
// 1433   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
??CrossCallReturnLabel_61:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x21
        LCALL     ?Subroutine20 & 0xFFFF
// 1434   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
??CrossCallReturnLabel_62:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x22
        LCALL     ?Subroutine20 & 0xFFFF
// 1435   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
??CrossCallReturnLabel_63:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x20
        MOV       R3,#0x0
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1436 #endif
// 1437 #if defined ( REFLECTOR )
// 1438   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
??CrossCallReturnLabel_64:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x21
        MOV       R3,#0x0
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1439   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
??CrossCallReturnLabel_65:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x22
        MOV       R3,#0x0
        LCALL     ??Subroutine51_0 & 0xFFFF
// 1440 #endif
// 1441 }
??CrossCallReturnLabel_66:
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock54

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
          CFI Conditional ??CrossCallReturnLabel_60
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function ZDApp_RegisterCBs
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond56) CFA_SP SP+-7
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function ZDApp_RegisterCBs
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond57) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond57) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond57) CFA_SP SP+-7
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function ZDApp_RegisterCBs
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond58) CFA_SP SP+-7
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV       R3,#-0x80
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
          CFI Conditional ??CrossCallReturnLabel_64
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function ZDApp_RegisterCBs
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond61) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond61) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond61) CFA_SP SP+-7
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function ZDApp_RegisterCBs
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond62) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond62) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond62) CFA_SP SP+-7
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function ZDApp_RegisterCBs
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond63) CFA_SP SP+-7
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function ZDApp_RegisterCBs
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond64) CFA_SP SP+-7
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function ZDApp_RegisterCBs
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond65) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond65) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond65) CFA_SP SP+-7
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function ZDApp_RegisterCBs
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond66) CFA_SP SP+-7
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67
// 1442 
// 1443 /*********************************************************************
// 1444  * @fn      ZDApp_ProcessSecMsg()
// 1445  *
// 1446  * @brief   Process the incoming security message.
// 1447  *
// 1448  * @param   msgPtr - message to process
// 1449  *
// 1450  * @return  none
// 1451  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1452 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
        CODE
// 1453 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrUpdateDeviceInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1454   switch ( msgPtr->event )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x5
        JNZ       ??ZDApp_ProcessSecMsg_0
// 1455   {
// 1456     case ZDO_TRANSPORT_KEY_IND:
// 1457       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1458       {
// 1459         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
// 1460       }
// 1461       break;
// 1462 
// 1463     case ZDO_UPDATE_DEVICE_IND:
// 1464       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1465       {
// 1466         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
        ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
        LCALL     `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
// 1467       }
// 1468       break;
// 1469 
// 1470     case ZDO_REMOVE_DEVICE_IND:
// 1471       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1472       {
// 1473         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1474       }
// 1475       break;
// 1476 
// 1477     case ZDO_REQUEST_KEY_IND:
// 1478       if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
// 1479       {
// 1480         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1481         {
// 1482           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1483         }
// 1484       }
// 1485       break;
// 1486 
// 1487     case ZDO_SWITCH_KEY_IND:
// 1488       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
// 1489       {
// 1490         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
// 1491       }
// 1492       break;
// 1493 
// 1494     default:
// 1495       // Unsupported messages
// 1496       break;
// 1497   }
// 1498 }
??ZDApp_ProcessSecMsg_0:
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock68
// 1499 
// 1500 /*********************************************************************
// 1501  * @fn      ZDApp_ProcessNetworkJoin()
// 1502  *
// 1503  * @brief
// 1504  *
// 1505  *   Save off the Network key information.
// 1506  *
// 1507  * @param   none
// 1508  *
// 1509  * @return  none
// 1510  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1511 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
        CODE
// 1512 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1513   if ( (devState == DEV_NWK_JOINING) ||
// 1514       ((devState == DEV_NWK_ORPHAN)  &&
// 1515        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x3
        JZ        ??ZDApp_ProcessNetworkJoin_0
        MOVX      A,@DPTR
        XRL       A,#0xa
        JZ        $+5
        LJMP      ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1516   {
// 1517     // Result of a Join attempt by this device.
// 1518     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_3
// 1519     {
// 1520       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
// 1521 
// 1522 #if defined ( POWER_SAVING )
// 1523       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1524 #endif
// 1525 
// 1526       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        JNZ       $+5
        LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
// 1527       {
// 1528         // wait for auth from trust center
// 1529         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
// 1530 
// 1531         // Start the reset timer for MAX UNAUTH time
// 1532         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
// 1533       }
// 1534       else
// 1535       {
// 1536         if ( ZSTACK_ROUTER_BUILD )
// 1537         {
// 1538           if ( devState == DEV_NWK_ORPHAN
// 1539             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??ZDApp_ProcessNetworkJoin_5
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_126:
        JZ        ??ZDApp_ProcessNetworkJoin_6
// 1540           {
// 1541             // Change NIB state to router for restore
// 1542             _NIB.nwkState = NWK_ROUTER;
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x8
        MOVX      @DPTR,A
        SJMP      ??ZDApp_ProcessNetworkJoin_6
// 1543           }
// 1544         }
// 1545 
// 1546         if ( devState == DEV_NWK_JOINING )
??ZDApp_ProcessNetworkJoin_5:
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??ZDApp_ProcessNetworkJoin_6
// 1547         {
// 1548           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1549         }
// 1550 
// 1551         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_6:
        ; Setup parameters for call to function ZDApp_ChangeState
        LCALL     ?Subroutine26 & 0xFFFF
// 1552 
// 1553         if ( ZSTACK_ROUTER_BUILD )
// 1554         {
// 1555           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1556           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??CrossCallReturnLabel_125:
        JNZ       $+5
        LJMP      ??CrossCallReturnLabel_54 & 0xFFFF
// 1557           {
// 1558             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV       R3,#0x0
        MOV       R2,#0x0
        MOV       R1,#0x0
        LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
        LJMP      ??CrossCallReturnLabel_54 & 0xFFFF
// 1559           }
// 1560         }
// 1561       }
// 1562     }
// 1563     else
// 1564     {
// 1565       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_7
        MOV       DPTR,#retryCnt
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
        CLR       C
        SUBB      A,#0x3
        JC        ??ZDApp_ProcessNetworkJoin_7
// 1566       {
// 1567         if ( _NIB.nwkPanId == 0xFFFF )
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??ZDApp_ProcessNetworkJoin_8
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_ProcessNetworkJoin_8:
        MOV       DPTR,#devStartMode
        JNZ       ??ZDApp_ProcessNetworkJoin_9
// 1568           devStartMode = MODE_JOIN;
        CLR       A
        SJMP      ??CrossCallReturnLabel_72
// 1569         else
// 1570         {
// 1571           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_9:
        LCALL     ?Subroutine13 & 0xFFFF
// 1572           _tmpRejoinState = true;
// 1573         }
// 1574       }
??CrossCallReturnLabel_72:
        MOVX      @DPTR,A
// 1575 
// 1576       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1577            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_7:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??ZDApp_ProcessNetworkJoin_10
        MOV       A,#-0x1
        XRL       A,R3
??ZDApp_ProcessNetworkJoin_10:
        JNZ       ??ZDApp_ProcessNetworkJoin_11
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDApp_ProcessNetworkJoin_12
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_ProcessNetworkJoin_12:
        JZ        ??ZDApp_ProcessNetworkJoin_13
// 1578       {
// 1579         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_11:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
// 1580         // Invalidate nwk addr so end device does not use in its data reqs.
// 1581         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 20
        DEC       A
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
// 1582         ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x53
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1583       }
// 1584 
// 1585       // Clear the neighbor Table and network discovery tables.
// 1586       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_13:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1587       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1588 
// 1589       zdoDiscCounter = 1;
        MOV       DPTR,#zdoDiscCounter
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1590 
// 1591       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1592            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function osal_rand
        LJMP      ??ZDApp_ProcessNetworkJoin_14 & 0xFFFF
// 1593     }
// 1594   }
// 1595   else if ( devState == DEV_NWK_ORPHAN ||
// 1596             devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
// 1597             devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
// 1598             devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
// 1599             devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
??ZDApp_ProcessNetworkJoin_1:
        MOVX      A,@DPTR
        XRL       A,#0x4
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xe
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xf
        JZ        ??ZDApp_ProcessNetworkJoin_2
        MOVX      A,@DPTR
        XRL       A,#0xd
        JZ        $+5
        LJMP      ??ZDApp_ProcessNetworkJoin_15 & 0xFFFF
// 1600   {
// 1601     // results of an orphaning attempt by this device
// 1602     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV       DPTR,#nwkStatus
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_16
// 1603     {
// 1604       //When the device has successfully rejoined then reset retryCnt
// 1605       retryCnt = 0;
        MOV       DPTR,#retryCnt
        CLR       A
        MOVX      @DPTR,A
// 1606 
// 1607       // Verify NWK key is available before sending Device_annce
// 1608       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        MOV       R1,#0x1
        LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV       A,R1
        JNZ       ??ZDApp_ProcessNetworkJoin_17
// 1609       {
// 1610         // wait for auth from trust center
// 1611         ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
??ZDApp_ProcessNetworkJoin_4:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x5
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1612 
// 1613         // Start the reset timer for MAX UNAUTH time
// 1614         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#0x10
        MOV       R3,#0x27
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
        LJMP      ??CrossCallReturnLabel_54 & 0xFFFF
// 1615       }
// 1616       else
// 1617       {
// 1618         ZDApp_ChangeState( DEV_END_DEVICE );
??ZDApp_ProcessNetworkJoin_17:
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 1619 
// 1620         osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x20
        LCALL     ?Subroutine25 & 0xFFFF
// 1621 
// 1622         // setup Power Manager Device
// 1623 #if defined ( POWER_SAVING )
// 1624         osal_pwrmgr_device( PWRMGR_BATTERY );
// 1625 #endif
// 1626 
// 1627         // The receiver is on, turn network layer polling off.
// 1628         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??CrossCallReturnLabel_67:
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        JNC       ??ZDApp_ProcessNetworkJoin_18
// 1629         {
// 1630           // if Child Table Management process is not enabled
// 1631           if ( zgChildAgingEnable == FALSE )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        JNZ       ??ZDApp_ProcessNetworkJoin_18
// 1632           {
// 1633             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1634             NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1635             NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 1636           }
// 1637         }
// 1638 
// 1639         if ( ZSTACK_ROUTER_BUILD )
// 1640         {
// 1641           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1642           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
??ZDApp_ProcessNetworkJoin_18:
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_127:
        JZ        ??ZDApp_ProcessNetworkJoin_19
// 1643           {
// 1644             NLME_StartRouterRequest( 0, 0, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV       R3,#0x0
        MOV       R2,#0x0
        MOV       R1,#0x0
        LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
// 1645           }
// 1646         }
// 1647 
// 1648         ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_19:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     ?Subroutine37 & 0xFFFF
// 1649 
// 1650         if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
// 1651             || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
// 1652               && (zgChildAgingEnable == TRUE) ) )
??CrossCallReturnLabel_32:
        JNC       ??ZDApp_ProcessNetworkJoin_20
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_54
// 1653         {
// 1654           NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_ProcessNetworkJoin_20:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        SJMP      ??CrossCallReturnLabel_54
// 1655         }
// 1656       }
// 1657     }
// 1658     else
// 1659     {
// 1660       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_16:
        MOV       DPTR,#devStartMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_21
// 1661       {
// 1662         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV       DPTR,#retryCnt
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
        CLR       C
        SUBB      A,#0x4
        JNC       ??ZDApp_ProcessNetworkJoin_22
// 1663         {
// 1664           if ( _NIB.nwkPanId == 0xFFFF )
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??ZDApp_ProcessNetworkJoin_23
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_ProcessNetworkJoin_23:
        JZ        ??ZDApp_ProcessNetworkJoin_24
// 1665             devStartMode = MODE_JOIN;
// 1666           else
// 1667           {
// 1668             devStartMode = MODE_REJOIN;
        MOV       DPTR,#devStartMode
        LCALL     ?Subroutine13 & 0xFFFF
// 1669             _tmpRejoinState = true;
??CrossCallReturnLabel_73:
        MOVX      @DPTR,A
// 1670             prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
        MOV       DPTR,#prevDevState
        MOV       A,#0x4
        SJMP      ??ZDApp_ProcessNetworkJoin_25
// 1671           }
// 1672         }
// 1673         // Do a normal join to the network after certain times of rejoin retries
// 1674         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_22:
        MOV       DPTR,#AIB_apsUseInsecureJoin
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ProcessNetworkJoin_21
// 1675         {
// 1676           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_24:
        MOV       DPTR,#devStartMode
        CLR       A
??ZDApp_ProcessNetworkJoin_25:
        MOVX      @DPTR,A
// 1677         }
// 1678       }
// 1679       else if(devStartMode == MODE_REJOIN)
// 1680       {
// 1681         if ( ZSTACK_END_DEVICE_BUILD )
// 1682         {
// 1683           devStartMode = MODE_REJOIN;
// 1684           _tmpRejoinState = true;
// 1685           _NIB.nwkState = NWK_INIT;
// 1686 
// 1687           if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
// 1688           {
// 1689             runtimeChannel = MAX_CHANNELS_24GHZ;
// 1690             prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
// 1691           }
// 1692           else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
// 1693           {
// 1694             // Set the flag that will ask the device to do trust center network layer rejoin.
// 1695             _NIB.nwkKeyLoaded = FALSE;
// 1696             ZDApp_ResetNwkKey(); // Clear up the old network key.
// 1697             runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
// 1698             prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
// 1699           }
// 1700           else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
// 1701           {
// 1702             runtimeChannel = MAX_CHANNELS_24GHZ;
// 1703             prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
// 1704           }
// 1705 
// 1706         }
// 1707       }
// 1708 
// 1709       // Clear the neighbor Table and network discovery tables.
// 1710       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_21:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1711       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1712 
// 1713       // setup a retry for later...
// 1714       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1715            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
        ; Setup parameters for call to function osal_rand
// 1716     }
// 1717   }
??ZDApp_ProcessNetworkJoin_14:
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_21:
        SJMP      ??CrossCallReturnLabel_54
// 1718 #if defined ( ZIGBEEPRO )
// 1719   else if ( devState != DEV_HOLD )
??ZDApp_ProcessNetworkJoin_15:
        MOVX      A,@DPTR
        JZ        ??CrossCallReturnLabel_54
// 1720   {
// 1721     // Assume from address conflict
// 1722 
// 1723     // Notify the network
// 1724     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1725 
// 1726     // Notify apps
// 1727     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
// 1728   }
// 1729 #endif
// 1730 }
??CrossCallReturnLabel_54:
          CFI EndBlock cfiBlock69
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x2
        LJMP      ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock70

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_31
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        RET
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function ZDApp_ResetTimerCancel
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond75) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond75) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond75) CFA_SP SP+-7
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV       DPTR,#ZDAppTaskID
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function ZDApp_LeaveReset
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function ZDApp_ResetTimerCancel
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond81) CFA_SP SP+-7
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOV       A,#0x3
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOVX      @DPTR,A
        MOV       DPTR,#_tmpRejoinState
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
// 1731 
// 1732 /*********************************************************************
// 1733  * @fn      ZDApp_SaveNwkKey()
// 1734  *
// 1735  * @brief   Save off the Network key information.
// 1736  *
// 1737  * @param   none
// 1738  *
// 1739  * @return  none
// 1740  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1741 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
        CODE
// 1742 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1743   nwkActiveKeyItems keyItems;
// 1744 
// 1745   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
// 1746 
// 1747   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1748                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V0,#0x15
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1749 
// 1750   nwkFrameCounterChanges = 0;
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1751 
// 1752   // Clear copy in RAM before return.
// 1753   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,A
        MOV       R1,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1754 
// 1755 }
          CFI EndBlock cfiBlock91
        REQUIRE ?Subroutine10
        ; // Fall through to label ?Subroutine10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x15
        LJMP      ??Subroutine59_0 & 0xFFFF
          CFI EndBlock cfiBlock92
// 1756 
// 1757 /*********************************************************************
// 1758  * @fn      ZDApp_ForceConcentratorChange()
// 1759  *
// 1760  * @brief   Force a network concentrator change by resetting
// 1761  *          zgConcentratorEnable and zgConcentratorDiscoveryTime
// 1762  *          from NV and set nwk event.
// 1763  *
// 1764  * @param   none
// 1765  *
// 1766  * @return  none
// 1767  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1768 void ZDApp_ForceConcentratorChange( void )
ZDApp_ForceConcentratorChange:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
        CODE
// 1769 {
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1770   osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#zgConcentratorEnable & 0xff
        MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x32
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1771   osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
        MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x33
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1772 
// 1773   if ( zgConcentratorEnable == TRUE )
        MOV       DPTR,#zgConcentratorEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDApp_ForceConcentratorChange_0
// 1774   {
// 1775     // Start next event
// 1776     osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_64
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine57_0 & 0xFFFF
// 1777   }
??CrossCallReturnLabel_86:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP      ??CrossCallReturnLabel_70
// 1778   else
// 1779   {
// 1780     // Stop the next event
// 1781     osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
??ZDApp_ForceConcentratorChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x8
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine52_0 & 0xFFFF
// 1782   }
// 1783 }
??CrossCallReturnLabel_70:
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock93
// 1784 
// 1785 /*********************************************************************
// 1786  * @fn      ZDApp_ResetNwkKey()
// 1787  *
// 1788  * @brief   Reset the Network key information in NV.
// 1789  *
// 1790  * @param   none
// 1791  *
// 1792  * @return  none
// 1793  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1794 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function ZDApp_ResetNwkKey
        CODE
// 1795 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1796   nwkActiveKeyItems keyItems;
// 1797 
// 1798   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        LCALL     ?Subroutine33 & 0xFFFF
// 1799   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1800                 (void *)&keyItems );
??CrossCallReturnLabel_20:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       ?V0,#0x15
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1801 }
        LJMP      ?Subroutine10 & 0xFFFF
          CFI EndBlock cfiBlock94

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function ZDApp_ResetNwkKey
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function ZDApp_RestoreNwkKey
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlSet
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function ZDApp_LeaveCtrlReset
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function ZDApp_SaveNwkKey
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function ZDApp_ResetNwkKey
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function ZDApp_RestoreNwkKey
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function ZDApp_ResetNwkKey
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
// 1802 
// 1803 /*********************************************************************
// 1804  * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
// 1805  *
// 1806  * @brief
// 1807  *
// 1808  *   Save off the Network key information.
// 1809  *
// 1810  * @param   incrFrmCnt - set to true if we want to increment the network
// 1811             frame counter, else set to false
// 1812  *
// 1813  * @return  true if restored from NV, false if not
// 1814  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1815 uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
ZDApp_RestoreNwkKey:
          CFI Block cfiBlock108 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkKey
        CODE
// 1816 {
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 37
        MOV       A,#-0x25
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       A,R1
        MOV       R6,A
// 1817   nwkActiveKeyItems keyItems;
// 1818   uint8 ret = FALSE;
        MOV       R7,#0x0
// 1819 
// 1820   // Restore the key information
// 1821   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1822       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       ?V0,#0x15
        MOV       ?V1,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       A,R1
        JZ        $+5
        LJMP      ??ZDApp_RestoreNwkKey_0 & 0xFFFF
// 1823   {
// 1824     uint8 nullKey[SEC_KEY_LEN];
// 1825 
// 1826     // initialize default value to compare to
// 1827     osal_memset( nullKey, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1828 
// 1829     // if stored key is different than default value, then a key has been established
// 1830     if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       ?V2,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       A,R1
        JNZ       ??ZDApp_RestoreNwkKey_0
// 1831     {
// 1832       if ( incrFrmCnt )
        MOV       A,R6
        JZ        ??ZDApp_RestoreNwkKey_1
// 1833       {
// 1834         // Increment the frame counter stored in NV
// 1835         keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
// 1836                                   NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
        MOV       DPTR,#__Constant_4e2
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
// 1837 
// 1838         nwkFrameCounter = keyItems.frameCounter;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#nwkFrameCounter
        LCALL     ?XSTORE_R0123
// 1839 
// 1840         // Save the updated Frame Counter right away
// 1841         osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1842                       (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       ?V0,#0x15
        MOV       ?V1,R7
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
// 1843 
// 1844         nwkFrameCounterChanges = 0;
        MOV       DPTR,#nwkFrameCounterChanges
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1845       }
// 1846 
// 1847       ret = TRUE;
??ZDApp_RestoreNwkKey_1:
        MOV       R7,#0x1
// 1848 
// 1849       // Clear copy in RAM before return.
// 1850       osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1851     }
// 1852   }
// 1853 
// 1854   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV       A,R7
        MOV       R1,A
        MOV       A,#0x25
        LJMP      ??Subroutine49_0 & 0xFFFF
// 1855 }
          CFI EndBlock cfiBlock108

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ZDApp_RestoreNwkKey
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ZDApp_LeaveCtrlInit
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function ZDApp_DeviceConfigured
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115
// 1856 
// 1857 /*********************************************************************
// 1858  * @fn      ZDApp_ResetTimerStart
// 1859  *
// 1860  * @brief   Start the reset timer.
// 1861  *
// 1862  * @param   delay - delay time(ms) before reset
// 1863  *
// 1864  * @return  none
// 1865  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1866 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
          CFI Block cfiBlock116 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
        CODE
// 1867 {
        FUNCALL ZDApp_ResetTimerStart, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL     ?Subroutine30 & 0xFFFF
// 1868   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
??CrossCallReturnLabel_12:
        JNZ       ??ZDApp_ResetTimerStart_0
// 1869   {
// 1870     // Start the rest timer
// 1871     osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x4
        LCALL     ??Subroutine55_0 & 0xFFFF
// 1872   }
??CrossCallReturnLabel_81:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1873 }
??ZDApp_ResetTimerStart_0:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock116

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function ZDO_JoinIndicationCB
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOV       R2,#0x40
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function ZDApp_NetworkInit
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function ZDApp_ProcessSecEvent
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function ZDO_JoinIndicationCB
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function ZDApp_ResetTimerStart
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function ZDApp_NetworkInit
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function ZDApp_ProcessSecEvent
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function ZDO_JoinIndicationCB
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        MOV       DPTR,#ZDAppTaskID
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function ZDApp_ForceConcentratorChange
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function ZDApp_event_loop
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function ZDApp_ResetTimerStart
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function ZDApp_NetworkInit
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function ZDApp_ProcessSecEvent
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function ZDO_JoinIndicationCB
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140
// 1874 
// 1875 /*********************************************************************
// 1876  * @fn      ZDApp_ResetTimerCancel
// 1877  *
// 1878  * @brief   Cancel the reset timer.
// 1879  *
// 1880  * @param   none
// 1881  *
// 1882  * @return  none
// 1883  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1884 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
          CFI Block cfiBlock141 Using cfiCommon0
          CFI Function ZDApp_ResetTimerCancel
        CODE
// 1885 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerCancel, osal_clear_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1886   (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     ?Subroutine25 & 0xFFFF
// 1887   (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
??CrossCallReturnLabel_68:
        ; Setup parameters for call to function osal_clear_event
        MOV       R2,#0x4
        MOV       R3,#0x0
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 1888 }
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock141
// 1889 
// 1890 /*********************************************************************
// 1891  * @fn      ZDApp_LeaveCtrlInit
// 1892  *
// 1893  * @brief   Initialize the leave control logic.
// 1894  *
// 1895  * @param   none
// 1896  *
// 1897  * @return  none
// 1898  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1899 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
          CFI Block cfiBlock142 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlInit
        CODE
// 1900 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1901   uint8 status;
// 1902 
// 1903 
// 1904   // Initialize control state
// 1905   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV       DPTR,#ZDApp_LeaveCtrl
        CLR       A
        MOVX      @DPTR,A
// 1906 
// 1907   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1908                               sizeof(ZDApp_LeaveCtrl),
// 1909                               &ZDApp_LeaveCtrl );
// 1910 
// 1911   if ( status == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JNZ       ??ZDApp_LeaveCtrlInit_0
// 1912   {
// 1913     // Read saved control
// 1914     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1915                   0,
// 1916                   sizeof( uint8 ),
// 1917                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        LCALL     ?Subroutine36 & 0xFFFF
// 1918   }
??CrossCallReturnLabel_29:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1919 }
??ZDApp_LeaveCtrlInit_0:
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock142
// 1920 
// 1921 /*********************************************************************
// 1922  * @fn      ZDApp_LeaveCtrlSet
// 1923  *
// 1924  * @brief   Set the leave control logic.
// 1925  *
// 1926  * @param   ra - reassociate flag
// 1927  *
// 1928  * @return  none
// 1929  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1930 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
          CFI Block cfiBlock143 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlSet
        CODE
// 1931 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 1932   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1933 
// 1934   if ( ra == TRUE )
        XRL       A,R6
        JNZ       ??ZDApp_LeaveCtrlSet_0
// 1935   {
// 1936     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV       A,#0x3
        MOVX      @DPTR,A
// 1937   }
// 1938 
// 1939   // Write the leave control
// 1940   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1941                  0,
// 1942                  sizeof( uint8 ),
// 1943                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        LJMP      ?Subroutine5 & 0xFFFF
// 1944 }
          CFI EndBlock cfiBlock143
// 1945 
// 1946 /*********************************************************************
// 1947  * @fn      ZDApp_LeaveCtrlReset
// 1948  *
// 1949  * @brief   Re-initialize the leave control logic.
// 1950  *
// 1951  * @param   none
// 1952  *
// 1953  * @return  none
// 1954  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1955 void ZDApp_LeaveCtrlReset( void )
ZDApp_LeaveCtrlReset:
          CFI Block cfiBlock144 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlReset
        CODE
// 1956 {
        FUNCALL ZDApp_LeaveCtrlReset, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1957   // Set leave control to initialized state
// 1958   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV       DPTR,#ZDApp_LeaveCtrl
        CLR       A
        MOVX      @DPTR,A
// 1959 
// 1960   // Write initialized control
// 1961   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1962                 0,
// 1963                 sizeof( uint8 ),
// 1964                 &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_write
        LJMP      ?Subroutine5 & 0xFFFF
// 1965 }
          CFI EndBlock cfiBlock144
// 1966 
// 1967 /*********************************************************************
// 1968  * @fn      ZDApp_LeaveCtrlBypass
// 1969  *
// 1970  * @brief   Check if NV restore should be skipped during a leave reset.
// 1971  *
// 1972  * @param   none
// 1973  *
// 1974  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1975  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1976 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
          CFI Block cfiBlock145 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlBypass
        CODE
// 1977 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1978   uint8 bypass;
// 1979 
// 1980   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1981   {
// 1982     bypass = TRUE;
// 1983   }
// 1984   else
// 1985   {
// 1986     bypass = FALSE;
// 1987   }
// 1988 
// 1989   return bypass;
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        CLR       A
        RLC       A
        MOV       R1,A
        SJMP      ??Subroutine58_0
// 1990 }
          CFI EndBlock cfiBlock145
// 1991 
// 1992 /*********************************************************************
// 1993  * @fn      ZDApp_LeaveCtrlStartup
// 1994  *
// 1995  * @brief   Check for startup conditions during a leave reset.
// 1996  *
// 1997  * @param   state      - devState_t determined by leave control logic
// 1998  * @param   startDelay - startup delay
// 1999  *
// 2000  * @return  none
// 2001  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2002 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
          CFI Block cfiBlock146 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlStartup
        CODE
// 2003 {
        FUNCALL ZDApp_LeaveCtrlStartup, ZDApp_LeaveCtrlReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2004   *startDelay = 0;
        MOV       DPL,R4
        MOV       DPH,R5
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2005 
// 2006   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV       DPTR,#ZDApp_LeaveCtrl
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??ZDApp_LeaveCtrlStartup_0
// 2007   {
// 2008     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_LeaveCtrlStartup_1
// 2009     {
// 2010       *startDelay = LEAVE_RESET_DELAY;
        MOV       DPL,R4
        MOV       DPH,R5
        MOV       A,#-0x78
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x13
        SJMP      ??ZDApp_LeaveCtrlStartup_2
// 2011     }
// 2012     else
// 2013     {
// 2014       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
??ZDApp_LeaveCtrlStartup_2:
        MOVX      @DPTR,A
// 2015     }
// 2016 
// 2017     // Reset leave control logic
// 2018     ZDApp_LeaveCtrlReset();
        ; Setup parameters for call to function ZDApp_LeaveCtrlReset
        LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
// 2019   }
// 2020 }
??ZDApp_LeaveCtrlStartup_0:
        SJMP      ??Subroutine58_0
          CFI EndBlock cfiBlock146

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock147 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 3)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock147
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiBlock148 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock148
// 2021 
// 2022 /*********************************************************************
// 2023  * @fn      ZDApp_LeaveReset
// 2024  *
// 2025  * @brief   Setup a device reset due to a leave indication/confirm.
// 2026  *
// 2027  * @param   ra - reassociate flag
// 2028  *
// 2029  * @return  none
// 2030  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2031 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
          CFI Block cfiBlock149 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
        CODE
// 2032 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_clear_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 2033   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
// 2034 
// 2035   APSME_HoldDataRequests( LEAVE_RESET_DELAY);
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#-0x78
        MOV       R3,#0x13
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 2036 
// 2037   if ( ZSTACK_ROUTER_BUILD )
// 2038   {
// 2039     osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x1
        MOV       DPTR,#NWK_TaskID
        LCALL     ??Subroutine52_0 & 0xFFFF
// 2040     osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
??CrossCallReturnLabel_71:
        ; Setup parameters for call to function osal_clear_event
        MOV       R2,#0x0
        MOV       R3,#0x1
        MOV       DPTR,#NWK_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 2041   }
// 2042 
// 2043   if (ZG_DEVICE_ENDDEVICE_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_LeaveReset_0
// 2044   {
// 2045     // Save polling values to be restored after rejoin
// 2046     if ( ra == TRUE )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??ZDApp_LeaveReset_1
// 2047     {
// 2048        ZDApp_SavedPollRate = zgPollRate;
        MOV       DPTR,#zgPollRate
        LCALL     ?XLOAD_R0123
        MOV       DPTR,#ZDApp_SavedPollRate
        LCALL     ?XSTORE_R0123
// 2049        savedResponseRate = zgResponsePollRate;
        MOV       DPTR,#zgResponsePollRate
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV       DPTR,#savedResponseRate
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2050        savedQueuedPollRate = zgQueuedPollRate;
        MOV       DPTR,#zgQueuedPollRate
        LCALL     ??Subroutine68_0 & 0xFFFF
// 2051     }
??CrossCallReturnLabel_130:
        MOV       DPTR,#savedQueuedPollRate
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2052 
// 2053     // Disable polling
// 2054     NLME_SetPollRate(0);
??ZDApp_LeaveReset_1:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV       DPTR,#__Constant_0
        LCALL     ?XLOAD_R2345
        LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2055     NLME_SetResponseRate(0);
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 2056     NLME_SetQueuedPollRate(0);
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 2057   }
// 2058 
// 2059   if ( ra == TRUE )
??ZDApp_LeaveReset_0:
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??ZDApp_LeaveReset_2
// 2060   {
// 2061     devState = DEV_NWK_DISC;
        MOV       DPTR,#devState
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2062     devStartMode = MODE_REJOIN;
        MOV       DPTR,#devStartMode
        INC       A
        LCALL     ??Subroutine53_0 & 0xFFFF
// 2063     _tmpRejoinState = true;
??CrossCallReturnLabel_74:
        MOVX      @DPTR,A
// 2064 
// 2065     // For rejoin, specify the extended PANID to look for
// 2066     osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,#(_NIB + 53) & 0xff
        MOV       R5,#((_NIB + 53) >> 8) & 0xff
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2067 
// 2068     _NIB.nwkState = NWK_DISC;
        MOV       DPTR,#_NIB + 35
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2069 
// 2070     zdoDiscCounter = 3;
        MOV       DPTR,#zdoDiscCounter
        INC       A
        MOVX      @DPTR,A
// 2071     NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 2072 
// 2073     ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
        ; Setup parameters for call to function osal_rand
        LCALL     ?Subroutine34 & 0xFFFF
// 2074   }
??CrossCallReturnLabel_22:
        SJMP      ??ZDApp_LeaveReset_3
// 2075   else
// 2076   {
// 2077     ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
??ZDApp_LeaveReset_2:
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV       R2,#-0x78
        MOV       R3,#0x13
        LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 2078   }
// 2079 }
??ZDApp_LeaveReset_3:
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock149

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function ZDApp_LeaveReset
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       A,R2
        ANL       A,#0x7f
        ADD       A,#0x64
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152
// 2080 
// 2081 /*********************************************************************
// 2082  * @fn      ZDApp_LeaveUpdate
// 2083  *
// 2084  * @brief   Update local device data related to leaving device.
// 2085  *
// 2086  * @param   nwkAddr        - NWK address of leaving device
// 2087  * @param   extAddr        - EXT address of leaving device
// 2088  * @param   removeChildren - remove children of leaving device
// 2089  *
// 2090  * @return  none
// 2091  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2092 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
        CODE
// 2093                         uint8 removeChildren )
// 2094 {
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, NLME_RemoveChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, nwkNeighborRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       ?V2,R1
// 2095   // Remove Apps Key for leaving device
// 2096   ZDSecMgrDeviceRemoveByExtAddr(extAddr);
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
// 2097 
// 2098   // Clear SECURITY bit from Address Manager
// 2099   ZDSecMgrAddrClear( extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 2100 
// 2101   if ( pbindRemoveDev )
        MOV       DPTR,#pbindRemoveDev
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_101:
        JZ        ??ZDApp_LeaveUpdate_0
// 2102   {
// 2103     zAddrType_t devAddr;
// 2104 
// 2105     // Remove bind entry and all related data
// 2106     devAddr.addrMode = Addr64Bit;
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        MOVX      @DPTR,A
// 2107     osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 2108 
// 2109     pbindRemoveDev(&devAddr);
        ; Setup parameters for indirect call
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        MOV       DPTR,#pbindRemoveDev
        LCALL     ?Subroutine27 & 0xFFFF
// 2110   }
??CrossCallReturnLabel_138:
        LCALL     ?CALL_IND
// 2111 
// 2112   // Remove if child
// 2113   if ( ZSTACK_ROUTER_BUILD )
// 2114   {
// 2115     // Router shall notify the Trust Center that a child End Device or
// 2116     // a neighbor Router (within radius=1) has left the network
// 2117     APSME_UpdateDeviceReq_t req;
// 2118 
// 2119     // forward authorization to the Trust Center
// 2120     req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
??ZDApp_LeaveUpdate_0:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2121     req.devAddr    = nwkAddr;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine64_0 & 0xFFFF
// 2122     req.devExtAddr = extAddr;
??CrossCallReturnLabel_118:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2123     req.status = APSME_UD_DEVICE_LEFT;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2124 
// 2125     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2126     {
// 2127       // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 2128       // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 2129       // with legacy Coordinator devices which can only handle one or the other.
// 2130       if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
// 2131       {
// 2132         req.apsSecure = FALSE;
// 2133 
// 2134         // send and APSME_UPDATE_DEVICE request to the trust center
// 2135         APSME_UpdateDeviceReq( &req );
// 2136       }
// 2137 
// 2138       // send the message APS encrypted
// 2139       req.apsSecure = TRUE;
// 2140 
// 2141       // send and APSME_UPDATE_DEVICE request to the trust center
// 2142       APSME_UpdateDeviceReq( &req );
// 2143     }
// 2144     else
// 2145     {
// 2146       req.apsSecure = FALSE;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2147 
// 2148       // send and APSME_UPDATE_DEVICE request to the trust center
// 2149       APSME_UpdateDeviceReq( &req );
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 2150     }
// 2151 
// 2152     NLME_RemoveChild( extAddr, removeChildren );
        ; Setup parameters for call to function NLME_RemoveChild
        MOV       R1,?V2
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
// 2153   }
// 2154 
// 2155   // Remove Routing table related entry
// 2156   RTG_RemoveRtgEntry( nwkAddr, 0 );
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV       R1,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
// 2157 
// 2158   // Remove entry from neighborTable
// 2159   nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
        ; Setup parameters for call to function nwkNeighborRemove
        MOV       DPTR,#_NIB + 33
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
// 2160 
// 2161   // Schedule to save data to NV
// 2162   ZDApp_NwkWriteNVRequest();
// 2163 }
        MOV       A,#0x11
          CFI EndBlock cfiBlock153
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock154 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Valid
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock154
// 2164 
// 2165 /*********************************************************************
// 2166  * @fn      ZDApp_NetworkDiscoveryReq
// 2167  *
// 2168  * @brief   Request a network discovery.
// 2169  *
// 2170  * @param  scanChannels -
// 2171  * @param  scanDuration -
// 2172  *
// 2173  * @return  ZStatus_t
// 2174  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2175 ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
ZDApp_NetworkDiscoveryReq:
          CFI Block cfiBlock155 Using cfiCommon0
          CFI Function ZDApp_NetworkDiscoveryReq
        CODE
// 2176 {
        FUNCALL ZDApp_NetworkDiscoveryReq, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 2177   // Setup optional filters - tbd
// 2178 
// 2179   // Request NLME network discovery
// 2180   return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
        LJMP      ??Subroutine50_0 & 0xFFFF
// 2181 }
          CFI EndBlock cfiBlock155
// 2182 
// 2183 /*********************************************************************
// 2184  * @fn      ZDApp_JoinReq
// 2185  *
// 2186  * @brief   Request the device to join a parent in a network.
// 2187  *
// 2188  * @param   channel -
// 2189  * @param   panID -
// 2190  *
// 2191  * @return  ZStatus_t
// 2192  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2193 ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
ZDApp_JoinReq:
          CFI Block cfiBlock156 Using cfiCommon0
          CFI Function ZDApp_JoinReq
        CODE
// 2194                          uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
// 2195 {
        FUNCALL ZDApp_JoinReq, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_JoinReq, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V2,R1
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2196   // Sync up the node with the stack profile (In the case where a pro device
// 2197   // joins a non-pro network, or verse versa)
// 2198   ZDApp_NodeProfileSync( stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 2199 
// 2200   // Request NLME Join Request
// 2201   return NLME_JoinRequest(extendedPanID, panID,channel,
// 2202                           ZDO_Config_Node_Descriptor.CapabilityFlags,
// 2203                           chosenParent, parentDepth);
        ; Setup parameters for call to function NLME_JoinRequest
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R1,?V2
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        LJMP      ?Subroutine3 & 0xFFFF
// 2204 
// 2205 }
          CFI EndBlock cfiBlock156
// 2206 
// 2207 /*********************************************************************
// 2208  * @fn      ZDApp_DeviceConfigured
// 2209  *
// 2210  * @brief   Check to see if the local device is configured (i.e., part
// 2211  *          of a network).
// 2212  *
// 2213  * @param   none
// 2214  *
// 2215  * @return  TRUE if configured. FALSE, otherwise.
// 2216  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2217 uint8 ZDApp_DeviceConfigured( void )
ZDApp_DeviceConfigured:
          CFI Block cfiBlock157 Using cfiCommon0
          CFI Function ZDApp_DeviceConfigured
        CODE
// 2218 {
        FUNCALL ZDApp_DeviceConfigured, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2219   uint16 nwkAddr = INVALID_NODE_ADDR;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
// 2220 
// 2221   osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
// 2222                 sizeof( uint16), &nwkAddr );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x21
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2223 
// 2224   // Does the NIB have anything more than default?
// 2225   return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDApp_DeviceConfigured_0
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_DeviceConfigured_0:
        JNZ       ??ZDApp_DeviceConfigured_1
        MOV       R1,#0x0
        SJMP      ??ZDApp_DeviceConfigured_2
??ZDApp_DeviceConfigured_1:
        MOV       R1,#0x1
??ZDApp_DeviceConfigured_2:
        LJMP      ?Subroutine9 & 0xFFFF
// 2226 }
          CFI EndBlock cfiBlock157

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock158 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7b
        LCALL     ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_78:
          CFI EndBlock cfiBlock158
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiBlock159 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock159
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiBlock160 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock160
// 2227 
// 2228 /*********************************************************************
// 2229  * CALLBACK FUNCTIONS
// 2230  */
// 2231 
// 2232 
// 2233 /*********************************************************************
// 2234  * @fn      ZDApp_SendEventMsg()
// 2235  *
// 2236  * @brief
// 2237  *
// 2238  *   Sends a Network Join message
// 2239  *
// 2240  * @param  cmd - command ID
// 2241  * @param  len - length (in bytes) of the buf field
// 2242  * @param  buf - buffer for the rest of the message.
// 2243  *
// 2244  * @return  none
// 2245  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2246 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
          CFI Block cfiBlock161 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
        CODE
// 2247 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
// 2248   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV       R3,A
        MOV       A,R1
        MOV       R2,A
        LCALL     ?Subroutine31 & 0xFFFF
// 2249 }
??CrossCallReturnLabel_14:
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock161
// 2250 
// 2251 /*********************************************************************
// 2252  * @fn      ZDApp_SendMsg()
// 2253  *
// 2254  * @brief   Sends a OSAL message
// 2255  *
// 2256  * @param  taskID - Where to send the message
// 2257  * @param  cmd - command ID
// 2258  * @param  len - length (in bytes) of the buf field
// 2259  * @param  buf - buffer for the rest of the message.
// 2260  *
// 2261  * @return  none
// 2262  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2263 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
          CFI Block cfiBlock162 Using cfiCommon0
          CFI Function ZDApp_SendMsg
        CODE
// 2264 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV       ?V4,R1
        MOV       ?V6,R2
        MOV       ?V5,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2265   osal_event_hdr_t *msgPtr;
// 2266 
// 2267   // Send the address to the task
// 2268   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        MOV       R6,?V5
        ; Setup parameters for call to function osal_msg_allocate
        MOV       A,R3
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2269   if ( msgPtr )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_SendMsg_0
// 2270   {
// 2271     if ( (len > 0) && (buf != NULL) )
        MOV       A,R6
        JZ        ??ZDApp_SendMsg_1
        MOV       A,?V2
        ORL       A,?V3
        JZ        ??ZDApp_SendMsg_1
// 2272       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V8,?V2
        MOV       ?V9,?V3
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R6
        MOV       R4,A
        MOV       R5,#0x0
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2273 
// 2274     msgPtr->event = cmd;
??ZDApp_SendMsg_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,?V6
        MOVX      @DPTR,A
// 2275     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V4
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2276   }
// 2277 }
??ZDApp_SendMsg_0:
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock162
// 2278 
// 2279 /*********************************************************************
// 2280  * Call Back Functions from NWK  - API
// 2281  */
// 2282 
// 2283 /*********************************************************************
// 2284  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2285  *
// 2286  * @brief       This function returns a choice of PAN to join.
// 2287  *
// 2288  * @param       status - return status of the nwk discovery confirm
// 2289  *
// 2290  * @return      ZStatus_t
// 2291  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2292 ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
ZDO_NetworkDiscoveryConfirmCB:
          CFI Block cfiBlock163 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
        CODE
// 2293 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 3)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2294   osal_event_hdr_t msg;
// 2295 
// 2296   // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
// 2297   // Send ZDO_MGMT_NWK_DISC_RSP back
// 2298 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2299   if ( zdappMgmtNwkDiscReqInProgress )
// 2300   {
// 2301     zdappMgmtNwkDiscReqInProgress = false;
// 2302     ZDO_FinishProcessingMgmtNwkDiscReq();
// 2303   }
// 2304   else
// 2305 #endif
// 2306   {
// 2307     // Pass the confirm to another task if it registers the callback
// 2308     // Otherwise, pass the confirm to ZDApp.
// 2309     if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 4
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
// 2310     {
// 2311       zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
        SJMP      ??CrossCallReturnLabel_15
// 2312     }
// 2313     else
// 2314     {
// 2315       // Otherwise, send scan confirm to ZDApp task to proceed
// 2316       msg.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2317       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
        ; Setup parameters for call to function ZDApp_SendMsg
        INC       A
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,#0x1
        LCALL     ?Subroutine31 & 0xFFFF
// 2318     }
// 2319   }
// 2320   return (ZSuccess);
??CrossCallReturnLabel_15:
        MOV       R1,#0x0
        MOV       A,#0x3
        LJMP      ?Subroutine4 & 0xFFFF
// 2321 }  // ZDO_NetworkDiscoveryConfirmCB
          CFI EndBlock cfiBlock163

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond164 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function ZDO_NetworkDiscoveryConfirmCB
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond165) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond165) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond165) CFA_SP SP+-7
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function ZDO_JoinConfirmCB
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
        RET
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167
// 2322 
// 2323 /*********************************************************************
// 2324  * @fn          ZDApp_NwkDescListProcessing
// 2325  *
// 2326  * @brief       This function process the network discovery result and select
// 2327  *              a parent device to join itself.
// 2328  *
// 2329  * @param       none
// 2330  *
// 2331  * @return      ZStatus_t
// 2332  */
// 2333 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2334 networkDesc_t* ZDApp_NwkDescListProcessing(void)
ZDApp_NwkDescListProcessing:
          CFI Block cfiBlock168 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
        CODE
// 2335 {
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_desc_list_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 2336   networkDesc_t *pNwkDesc;
// 2337   uint8 i, ResultCount = 0;
        MOV       ?V1,#0x0
// 2338   uint8 stackProfile;
// 2339   uint8 stackProfilePro;
// 2340   uint8 selected;
// 2341 
// 2342   // Count the number of nwk descriptors in the list
// 2343   pNwkDesc = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
        SJMP      ??CrossCallReturnLabel_114
// 2344   while (pNwkDesc)
// 2345   {
// 2346     ResultCount++;
??ZDApp_NwkDescListProcessing_0:
        INC       ?V1
// 2347     pNwkDesc = pNwkDesc->nextDesc;
        LCALL     ?Subroutine24 & 0xFFFF
// 2348   }
??CrossCallReturnLabel_114:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDApp_NwkDescListProcessing_0
// 2349 
// 2350   // process discovery results
// 2351   stackProfilePro = FALSE;
        MOV       ?V0,#0x0
// 2352   selected = FALSE;
// 2353 
// 2354 
// 2355   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV       ?V2,#0x0
// 2356   {
// 2357     pNwkDesc = nwk_getNwkDescList();
??ZDApp_NwkDescListProcessing_1:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
// 2358     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV       ?V3,#0x0
        SJMP      ??CrossCallReturnLabel_115
// 2359     {
// 2360        if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 2361       {
// 2362         // If the extended Pan ID is commissioned to a non zero value
// 2363         // Only join the Pan that has match EPID
// 2364         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 2365           continue;
// 2366 
// 2367       }
// 2368       else if ( zgConfigPANID != 0xFFFF )
// 2369       {
// 2370         // PAN Id is preconfigured. check if it matches
// 2371         if ( pNwkDesc->panId != zgConfigPANID )
// 2372           continue;
// 2373       }
// 2374 
// 2375       if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
// 2376       {
// 2377         // check that network is allowing joining
// 2378         if ( ZSTACK_ROUTER_BUILD )
// 2379         {
// 2380           if ( stackProfilePro == FALSE )
// 2381           {
// 2382             if ( !pNwkDesc->routerCapacity )
// 2383             {
// 2384               continue;
// 2385             }
// 2386           }
// 2387           else
// 2388           {
// 2389             if ( !pNwkDesc->deviceCapacity )
// 2390             {
// 2391               continue;
// 2392             }
// 2393           }
// 2394         }
// 2395         else if ( ZSTACK_END_DEVICE_BUILD )
// 2396         {
// 2397           if ( !pNwkDesc->deviceCapacity )
// 2398           {
// 2399             continue;
// 2400           }
// 2401         }
// 2402       }
// 2403 
// 2404       // check version of zigbee protocol
// 2405       if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 2406         continue;
// 2407 
// 2408       // check version of stack profile
// 2409       if ( pNwkDesc->stackProfile != zgStackProfile  )
// 2410       {
// 2411         if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 2412             || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDApp_NwkDescListProcessing_2:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_NwkDescListProcessing_3
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_3
// 2413         {
// 2414           stackProfilePro = TRUE;
??ZDApp_NwkDescListProcessing_4:
        MOV       ?V0,#0x1
// 2415         }
// 2416 
// 2417         if ( stackProfile == 0 )
??ZDApp_NwkDescListProcessing_3:
        MOV       A,?V2
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
??ZDApp_NwkDescListProcessing_6:
        INC       ?V3
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_115:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V1
        JC        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDApp_NwkDescListProcessing_8
        ; Setup parameters for call to function sAddrExtCmp
        MOV       A,R6
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       R2,#ZDO_UseExtendedPANID & 0xff
        MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JNZ       ??ZDApp_NwkDescListProcessing_9
        SJMP      ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_8:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??ZDApp_NwkDescListProcessing_10
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_NwkDescListProcessing_10:
        JZ        ??ZDApp_NwkDescListProcessing_9
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV       DPTR,#zgConfigPANID
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDApp_NwkDescListProcessing_11:
        JNZ       ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_9:
        MOV       DPTR,#_NIB + 23
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_12
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDApp_NwkDescListProcessing_12:
        JNZ       ??ZDApp_NwkDescListProcessing_13
        MOV       A,#-0x2
        XRL       A,R0
        JNZ       ??ZDApp_NwkDescListProcessing_14
        MOV       A,#-0x1
        XRL       A,R1
??ZDApp_NwkDescListProcessing_14:
        JNZ       ??ZDApp_NwkDescListProcessing_15
??ZDApp_NwkDescListProcessing_13:
        MOV       A,?V0
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        JNZ       ??ZDApp_NwkDescListProcessing_16
        MOVX      A,@DPTR
        JNZ       ??ZDApp_NwkDescListProcessing_15
        SJMP      ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_16:
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
??ZDApp_NwkDescListProcessing_15:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#_NIB + 17
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??ZDApp_NwkDescListProcessing_5
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
        MOV       A,#0x2
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
        LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
// 2418         {
// 2419           continue;
// 2420         }
// 2421       }
// 2422 
// 2423       break;
// 2424     }
// 2425 
// 2426     if (i < ResultCount)
// 2427     {
// 2428      selected = TRUE;
// 2429       break;
// 2430     }
// 2431 
// 2432     // break if selected or stack profile pro wasn't found
// 2433     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDApp_NwkDescListProcessing_7:
        MOV       A,?V0
        JZ        ??ZDApp_NwkDescListProcessing_17
// 2434     {
// 2435       break;
// 2436     }
// 2437   }
        INC       ?V2
        MOV       A,?V2
        CLR       C
        SUBB      A,#0x2
        JNC       $+5
        LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
// 2438 
// 2439   if ( i == ResultCount )
??ZDApp_NwkDescListProcessing_17:
        MOV       A,?V1
        XRL       A,?V3
        JNZ       ??ZDApp_NwkDescListProcessing_5
// 2440   {
// 2441     nwk_desc_list_free();
        ; Setup parameters for call to function nwk_desc_list_free
        LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
// 2442     return (NULL);   // couldn't find appropriate PAN to join !
        MOV       R2,#0x0
        MOV       R3,#0x0
        SJMP      ??ZDApp_NwkDescListProcessing_18
// 2443   }
// 2444   else
// 2445   {
// 2446     return (pNwkDesc);
??ZDApp_NwkDescListProcessing_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
// 2447   }
??ZDApp_NwkDescListProcessing_18:
        LJMP      ??Subroutine48_0 & 0xFFFF
// 2448 }// ZDApp_NwkDescListProcessing()
          CFI EndBlock cfiBlock168
// 2449 
// 2450 /*********************************************************************
// 2451  * @fn          ZDO_NetworkFormationConfirmCB
// 2452  *
// 2453  * @brief       This function reports the results of the request to
// 2454  *              initialize a coordinator in a network.
// 2455  *
// 2456  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2457  *
// 2458  * @return      none
// 2459  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2460 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
          CFI Block cfiBlock169 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
        CODE
// 2461 {
        FUNCALL ZDO_NetworkFormationConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 2462   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2463 
// 2464   if ( Status == ZSUCCESS )
        JNZ       ??ZDO_NetworkFormationConfirmCB_0
// 2465   {
// 2466     // LED on shows Coordinator started
// 2467 //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2468 
// 2469     // LED off forgets HOLD_AUTO_START
// 2470 //    HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
// 2471 
// 2472 #if defined ( ZBIT )
// 2473     SIM_SetColor(0xd0ffd0);
// 2474 #endif
// 2475 
// 2476     if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_NetworkFormationConfirmCB_0
// 2477     {
// 2478       // Began with HOLD_AUTO_START
// 2479       ZDApp_ChangeState( DEV_COORD_STARTING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x8
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2480     }
// 2481   }
// 2482 #if defined(BLINK_LEDS)
// 2483   else
// 2484   {
// 2485 //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2486   }
// 2487 #endif
// 2488 
// 2489   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x2
        LJMP      ?Subroutine0 & 0xFFFF
// 2490 }
          CFI EndBlock cfiBlock169
// 2491 
// 2492 /****************************************************************************
// 2493  * @fn          ZDApp_beaconIndProcessing
// 2494  *
// 2495  * @brief       This function processes the incoming beacon indication.
// 2496  *
// 2497  *              When another task (MT or App) is registered to process
// 2498  *              beacon indication themselves, this function will parse the
// 2499  *              beacon payload and pass the beacon descriptor to that task
// 2500  *              If no other tasks registered, this function will process
// 2501  *              the beacon payload and generate the network descriptor link
// 2502  *              list.
// 2503  *
// 2504  * @param
// 2505  *
// 2506  * @return      none
// 2507  *
// 2508  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2509 void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
ZDO_beaconNotifyIndCB:
          CFI Block cfiBlock170 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
        CODE
// 2510 {
        FUNCALL ZDO_beaconNotifyIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2511   // Pass the beacon Indication to another task if it registers the callback
// 2512   // Otherwise, process the beacon notification here.
// 2513   if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 6
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ        ??ZDO_beaconNotifyIndCB_0
// 2514   {
// 2515     zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
        ; Setup parameters for indirect call
        LCALL     ?CALL_IND
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2516   }
// 2517   else
// 2518   {
// 2519     networkDesc_t *pNwkDesc;
// 2520     networkDesc_t *pLastNwkDesc;
// 2521     uint8 found = false;
// 2522 
// 2523     // Add the network to the Network Descriptor List
// 2524     pNwkDesc = NwkDescList;
??ZDO_beaconNotifyIndCB_0:
        MOV       DPTR,#NwkDescList
        LCALL     ??Subroutine63_0 & 0xFFFF
// 2525     pLastNwkDesc = NwkDescList;
??CrossCallReturnLabel_111:
        MOV       DPTR,#NwkDescList
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R2
        ADD       A,#0x4
        MOV       ?V6,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V7,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V5,A
        SJMP      ??CrossCallReturnLabel_116
// 2526     while (pNwkDesc)
// 2527     {
// 2528       if ((pNwkDesc->panId == pBeacon->panID) &&
// 2529           (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
??ZDO_beaconNotifyIndCB_2:
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDO_beaconNotifyIndCB_3
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDO_beaconNotifyIndCB_3:
        JNZ       ??ZDO_beaconNotifyIndCB_4
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,R0
        JZ        ??ZDO_beaconNotifyIndCB_5
// 2530       {
// 2531         found = true;
// 2532         break;
// 2533       }
// 2534       pLastNwkDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_4:
        MOV       ?V2,R6
        MOV       ?V3,R7
// 2535       pNwkDesc = pNwkDesc->nextDesc;
        LCALL     ?Subroutine24 & 0xFFFF
// 2536     }
??CrossCallReturnLabel_116:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDO_beaconNotifyIndCB_2
// 2537 
// 2538     // If no existing descriptor found, make a new one and add to the list
// 2539     if (found == false)
// 2540     {
// 2541       pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x16
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       R6,?V8
        MOV       R7,?V9
// 2542       if ( !pNwkDesc )
        MOV       A,R2
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2543       {
// 2544         // Memory alloc failed, discard this beacon
// 2545         return;
// 2546       }
// 2547 
// 2548       // Clear the network descriptor
// 2549       osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x16
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2550 
// 2551       // Initialize the descriptor
// 2552       pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
// 2553       pNwkDesc->chosenRouterDepth = 0xFF;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2554 
// 2555       // Save new entry into the descriptor list
// 2556       if ( !NwkDescList )
        MOV       DPTR,#NwkDescList
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_102:
        JNZ       ??ZDO_beaconNotifyIndCB_6
// 2557       {
// 2558         NwkDescList = pNwkDesc;
        MOV       DPTR,#NwkDescList
        SJMP      ??ZDO_beaconNotifyIndCB_7
// 2559       }
// 2560       else
// 2561       {
// 2562         pLastNwkDesc->nextDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_6:
        MOV       A,?V2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
??ZDO_beaconNotifyIndCB_7:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2563       }
// 2564     }
// 2565 
// 2566     // Update the descriptor with the incoming beacon
// 2567     pNwkDesc->stackProfile   = pBeacon->stackProfile;
??ZDO_beaconNotifyIndCB_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_10:
        INC       DPTR
        MOVX      @DPTR,A
// 2568     pNwkDesc->version        = pBeacon->protocolVersion;
        MOV       A,?V0
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX      @DPTR,A
// 2569     pNwkDesc->logicalChannel = pBeacon->logicalChannel;
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 2570     pNwkDesc->panId          = pBeacon->panID;
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine71_0 & 0xFFFF
// 2571     pNwkDesc->updateId       = pBeacon->updateID;
??CrossCallReturnLabel_140:
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_36:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2572 
// 2573     // Save the extended PAN ID from the beacon payload only if 1.1 version network
// 2574     if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
        MOV       A,R6
        ADD       A,#0xb
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDO_beaconNotifyIndCB_8
// 2575     {
// 2576       osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0xd
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??ZDO_beaconNotifyIndCB_9
// 2577     }
// 2578     else
// 2579     {
// 2580       osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
??ZDO_beaconNotifyIndCB_8:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2581     }
// 2582 
// 2583     // check if this device is a better choice to join...
// 2584     // ...dont bother checking assocPermit flag is doing a rejoin
// 2585     if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
// 2586         ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
??ZDO_beaconNotifyIndCB_9:
        MOV       A,?V0
        ADD       A,#0xa
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       DPTR,#gMIN_TREE_LQI
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,?V4
        JC        $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDO_beaconNotifyIndCB_10
        MOV       DPTR,#_tmpRejoinState
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2587     {
// 2588       uint8 selected = FALSE;
??ZDO_beaconNotifyIndCB_10:
        CLR       B.0
// 2589       uint8 capacity = FALSE;
// 2590 
// 2591 #if defined ( ZIGBEEPRO )
// 2592       if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
// 2593             (pBeacon->depth < MAX_NODE_DEPTH)) ||
// 2594           ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
// 2595            (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
        MOV       A,R6
        ADD       A,#0x9
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       A,R6
        ADD       A,#0xa
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       A,?V0
        ADD       A,#0xb
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V3,A
        MOV       A,?V5
        CLR       C
        SUBB      A,?V4
        JNC       ??ZDO_beaconNotifyIndCB_11
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x14
        JC        ??ZDO_beaconNotifyIndCB_12
        SJMP      ??ZDO_beaconNotifyIndCB_13
??ZDO_beaconNotifyIndCB_11:
        MOV       A,?V5
        XRL       A,?V4
        JNZ       ??ZDO_beaconNotifyIndCB_13
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,?V4
        JNC       ??ZDO_beaconNotifyIndCB_13
// 2596       {
// 2597         selected = TRUE;
??ZDO_beaconNotifyIndCB_12:
        SETB      B.0
// 2598       }
// 2599 #else
// 2600       if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
// 2601       {
// 2602         selected = TRUE;
// 2603       }
// 2604 #endif
// 2605 
// 2606       if ( ZSTACK_ROUTER_BUILD )
// 2607       {
// 2608         capacity = pBeacon->routerCapacity;
// 2609       }
// 2610       else if ( ZSTACK_END_DEVICE_BUILD )
// 2611       {
// 2612         capacity = pBeacon->deviceCapacity;
// 2613       }
// 2614 
// 2615       if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
??ZDO_beaconNotifyIndCB_13:
        MOV       A,?V0
        ADD       A,#0x6
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V5,A
        MOV       DPL,?V4
        MOV       DPH,A
        MOVX      A,@DPTR
        JNZ       ??ZDO_beaconNotifyIndCB_14
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       DPTR,#_NIB + 23
        MOVX      A,@DPTR
        XRL       A,?V6
        JNZ       ??ZDO_beaconNotifyIndCB_15
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V7
??ZDO_beaconNotifyIndCB_15:
        JNZ       ??ZDO_beaconNotifyIndCB_16
??ZDO_beaconNotifyIndCB_14:
        MOV       C,B.0
        JNC       ??ZDO_beaconNotifyIndCB_16
// 2616       {
// 2617         // this is the new chosen router for joining...
// 2618         pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
// 2619         pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 2620         pNwkDesc->chosenRouterDepth       = pBeacon->depth;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      @DPTR,A
// 2621       }
// 2622 
// 2623       if ( pBeacon->deviceCapacity )
??ZDO_beaconNotifyIndCB_16:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??ZDO_beaconNotifyIndCB_17
// 2624         pNwkDesc->deviceCapacity = 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2625 
// 2626       if ( pBeacon->routerCapacity )
??ZDO_beaconNotifyIndCB_17:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        JZ        ??ZDO_beaconNotifyIndCB_1
// 2627         pNwkDesc->routerCapacity = 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2628     }
// 2629   }
// 2630 }
??ZDO_beaconNotifyIndCB_1:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock170

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker176 Using cfiCommon1
          CFI (cfiPicker176) NoFunction
          CFI (cfiPicker176) Picker
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiPicker176
// 2631 
// 2632 /*********************************************************************
// 2633  * @fn          ZDO_StartRouterConfirmCB
// 2634  *
// 2635  * @brief       This function reports the results of the request to
// 2636  *              start functioning as a router in a network.
// 2637  *
// 2638  * @param       Status - Result of NLME_StartRouterRequest()
// 2639  *
// 2640  * @return      none
// 2641  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2642 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
          CFI Block cfiBlock177 Using cfiCommon0
          CFI Function ZDO_StartRouterConfirmCB
        CODE
// 2643 {
        FUNCALL ZDO_StartRouterConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
// 2644   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2645 
// 2646   if ( Status == ZSUCCESS )
        JNZ       ??ZDO_StartRouterConfirmCB_0
// 2647   {
// 2648     // LED on shows Router started
// 2649 //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2650     // LED off forgets HOLD_AUTO_START
// 2651 //    HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2652     if ( devState == DEV_HOLD )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_StartRouterConfirmCB_0
// 2653     {
// 2654       // Began with HOLD_AUTO_START
// 2655       ZDApp_ChangeState( DEV_END_DEVICE );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2656     }
// 2657   }
// 2658 #if defined(BLINK_LEDS)
// 2659   else
// 2660   {
// 2661 //    HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2662   }
// 2663 #endif
// 2664 
// 2665   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x20
        LJMP      ?Subroutine0 & 0xFFFF
// 2666 }
          CFI EndBlock cfiBlock177
// 2667 
// 2668 /*********************************************************************
// 2669  * @fn          ZDO_JoinConfirmCB
// 2670  *
// 2671  * @brief       This function allows the next higher layer to be notified
// 2672  *              of the results of its request to join itself or another
// 2673  *              device to a network.
// 2674  *
// 2675  * @param       Status - Result of NLME_JoinRequest()
// 2676  *
// 2677  * @return      none
// 2678  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2679 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
          CFI Block cfiBlock178 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
        CODE
// 2680 {
        FUNCALL ZDO_JoinConfirmCB, ZDApp_ChangeState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        MOV       R6,A
// 2681   (void)PanId;  // remove if this parameter is used.
// 2682 
// 2683   nwkStatus = (byte)Status;
        MOV       DPTR,#nwkStatus
        MOVX      @DPTR,A
// 2684 
// 2685   if ( Status == ZSUCCESS )
        JNZ       ??ZDO_JoinConfirmCB_0
// 2686   {
// 2687     if ( ZSTACK_END_DEVICE_BUILD
// 2688       || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 2689     {
// 2690       neighborEntry_t *pItem;
// 2691 
// 2692       // We don't need the neighbor table entries.
// 2693       // Clear the neighbor Table to remove beacon information
// 2694       nwkNeighborInitTable();
// 2695 
// 2696       // Force a neighbor table entry for the parent
// 2697       pItem = nwkNeighborFindEmptySlot();
// 2698       if ( pItem != NULL )
// 2699       {
// 2700         osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
// 2701         pItem->neighborAddress = _NIB.nwkCoordAddress;
// 2702         osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
// 2703         pItem->panId = _NIB. nwkPanId;
// 2704         pItem->linkInfo.rxLqi = DEF_LQI;
// 2705         pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
// 2706         pItem->linkInfo.txCost = DEF_LINK_COST;
// 2707       }
// 2708     }
// 2709 
// 2710     // LED on shows device joined
// 2711 //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
// 2712     // LED off forgets HOLD_AUTO_START
// 2713 //    HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
// 2714     if ( (devState == DEV_HOLD) )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        JNZ       ??ZDO_JoinConfirmCB_0
// 2715     {
// 2716       // Began with HOLD_AUTO_START
// 2717       ZDApp_ChangeState( DEV_NWK_JOINING );
        ; Setup parameters for call to function ZDApp_ChangeState
        MOV       R1,#0x3
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
// 2718     }
// 2719 
// 2720     if ( !ZG_SECURE_ENABLED )
// 2721     {
// 2722       // Notify to save info into NV
// 2723       ZDApp_NVUpdate();
// 2724     }
// 2725   }
// 2726   else
// 2727   {
// 2728 #if defined(BLINK_LEDS)
// 2729 //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
// 2730 #endif
// 2731   }
// 2732 
// 2733   // Pass the join confirm to higher layer if callback registered
// 2734   if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
??ZDO_JoinConfirmCB_0:
        MOV       DPTR,#zdoCBFunc + 8
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_103:
        JZ        ??ZDO_JoinConfirmCB_1
// 2735   {
// 2736     zdoJoinCnf_t joinCnf;
// 2737 
// 2738     joinCnf.status = Status;
        MOV       A,R6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2739     joinCnf.deviceAddr = _NIB.nwkDevAddress;
        MOV       DPTR,#_NIB + 20
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine71_0 & 0xFFFF
// 2740     joinCnf.parentAddr = _NIB.nwkCoordAddress;
??CrossCallReturnLabel_141:
        MOV       DPTR,#_NIB + 23
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine71_0 & 0xFFFF
// 2741 
// 2742     zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
??CrossCallReturnLabel_142:
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?CALL_IND
// 2743   }
// 2744 
// 2745   // Notify ZDApp
// 2746   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R3,#0x2
        MOV       R2,#0x2
        LCALL     ?Subroutine31 & 0xFFFF
// 2747 
// 2748 }
??CrossCallReturnLabel_16:
        LJMP      ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock178

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function ZDO_LeaveInd
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond182 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function ZDO_JoinConfirmCB
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function ZDO_JoinConfirmCB
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function ZDO_LeaveCnf
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function ZDO_LeaveInd
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker192 Using cfiCommon1
          CFI (cfiPicker192) NoFunction
          CFI (cfiPicker192) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond193 Using cfiCommon0
          CFI Function ZDApp_InitPendingBind
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function ZDApp_GetEmptyPendingBindReq
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond194) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond194) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond194) CFA_SP SP+-7
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOV       DPTR,#ZDAppPendingBindReq
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function ZDApp_ProcessSecEvent
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond200) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond200) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond200) CFA_SP SP+-7
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function ZDApp_LeaveUpdate
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function ZDO_JoinConfirmCB
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function ZDO_JoinIndicationCB
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDO_JoinIndicationCB
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function ZDO_SrcRtgIndCB
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function ZDApp_InitPendingBind
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function ZDApp_GetEmptyPendingBindReq
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond209) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond209) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond209) CFA_SP SP+-7
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212
// 2749 
// 2750 /*********************************************************************
// 2751  * @fn          ZDO_PermitJoinCB
// 2752  *
// 2753  * @brief      This function is called when there is a change in the
// 2754  *             device's permit join status.
// 2755  *
// 2756  * @param       duration - the new duration
// 2757  *
// 2758  * @return      none
// 2759  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2760 void ZDO_PermitJoinCB( uint8 duration )
ZDO_PermitJoinCB:
          CFI Block cfiBlock213 Using cfiCommon0
          CFI Function ZDO_PermitJoinCB
        CODE
// 2761 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2762   // Pass the Permit Join status to higher layer if callback registered
// 2763   if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 14
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ        ??ZDO_PermitJoinCB_0
// 2764   {
// 2765     zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
// 2766   }
// 2767 }
??ZDO_PermitJoinCB_0:
        MOV       A,#0x1
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock213
// 2768 
// 2769 /*********************************************************************
// 2770  * @fn          ZDO_AddrChangeIndicationCB
// 2771  *
// 2772  * @brief       This function notifies the application that this
// 2773  *              device's address has changed.  Could happen in
// 2774  *              a network with stochastic addressing (PRO).
// 2775  *
// 2776  * @param       newAddr - the new address
// 2777  *
// 2778  * @return      none
// 2779  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2780 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
          CFI Block cfiBlock214 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
        CODE
// 2781 {
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2782   ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
// 2783   epList_t *pItem = epList;
        MOV       DPTR,#epList
        LCALL     ??Subroutine63_0 & 0xFFFF
// 2784 
// 2785   // Notify to save info into NV
// 2786   ZDApp_NVUpdate();
// 2787 
// 2788   // Notify the applications
// 2789   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_112:
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_55:
        SJMP      ??CrossCallReturnLabel_113
// 2790 
// 2791   while (pItem != NULL)
// 2792   {
// 2793     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_AddrChangeIndicationCB_0:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V2,R0
        MOV       ?V3,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_47:
        JZ        ??ZDO_AddrChangeIndicationCB_1
// 2794     {
// 2795       pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
// 2796       if (pZDOAddrChangeMsg != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDO_AddrChangeIndicationCB_1
// 2797       {
// 2798         pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x2a
        MOVX      @DPTR,A
// 2799         pZDOAddrChangeMsg->shortAddr = newAddr;
        LCALL     ?Subroutine11 & 0xFFFF
// 2800         osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
??CrossCallReturnLabel_119:
        ; Setup parameters for call to function osal_msg_send
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine27 & 0xFFFF
// 2801       }
// 2802     }
??CrossCallReturnLabel_139:
        INC       DPTR
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV       R1,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2803     pItem = pItem->nextDesc;
??ZDO_AddrChangeIndicationCB_1:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine63_0 & 0xFFFF
// 2804   }
??CrossCallReturnLabel_113:
        MOV       A,R6
        ORL       A,R7
        JNZ       ??ZDO_AddrChangeIndicationCB_0
// 2805 
// 2806   // Send out a device announce
// 2807   ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 2808 }
        LJMP      ??Subroutine48_0 & 0xFFFF
          CFI EndBlock cfiBlock214

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_114
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker218 Using cfiCommon1
          CFI (cfiPicker218) NoFunction
          CFI (cfiPicker218) Picker
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiPicker218
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiCond219 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker225 Using cfiCommon1
          CFI (cfiPicker225) NoFunction
          CFI (cfiPicker225) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiPicker225

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond226 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
          CFI Conditional ??CrossCallReturnLabel_119
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function ZDO_JoinIndicationCB
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker228 Using cfiCommon1
          CFI (cfiPicker228) NoFunction
          CFI (cfiPicker228) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiPicker228
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function ZDApp_LeaveUpdate
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function ZDO_JoinIndicationCB
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker233 Using cfiCommon1
          CFI (cfiPicker233) NoFunction
          CFI (cfiPicker233) Picker
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiPicker233
// 2809 
// 2810 /*********************************************************************
// 2811  * @fn          ZDO_JoinIndicationCB
// 2812  *
// 2813  * @brief       This function allows the next higher layer of a
// 2814  *              coordinator to be notified of a remote join request.
// 2815  *
// 2816  * @param       ShortAddress - 16-bit address
// 2817  * @param       ExtendedAddress - IEEE (64-bit) address
// 2818  * @param       CapabilityFlags - Association Capability Flags
// 2819  * @param       type - of joining -
// 2820  *                          NWK_ASSOC_JOIN
// 2821  *                          NWK_ASSOC_REJOIN_UNSECURE
// 2822  *                          NWK_ASSOC_REJOIN_SECURE
// 2823  *
// 2824  * @return      ZStatus_t
// 2825  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2826 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
          CFI Block cfiBlock234 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
        CODE
// 2827                                 uint8 CapabilityFlags, uint8 type)
// 2828 {
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        LCALL     ?Subroutine30 & 0xFFFF
// 2829   (void)ExtendedAddress;
// 2830   //check if the device is leaving before responding to rejoin request
// 2831   if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
??CrossCallReturnLabel_13:
        JZ        ??ZDO_JoinIndicationCB_0
// 2832   {
// 2833     return ZFailure; // device leaving , hence do not allow rejoin
        MOV       R1,#0x1
        LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 2834   }
??ZDO_JoinIndicationCB_0:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
// 2835 
// 2836 #if ZDO_NV_SAVE_RFDs
// 2837     (void)CapabilityFlags;
// 2838 
// 2839 #else  // if !ZDO_NV_SAVE_RFDs
// 2840     if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 2841 #endif
// 2842     {
// 2843       ZDApp_NVUpdate();  // Notify to save info into NV.
// 2844     }
// 2845 
// 2846     if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 2847     {
// 2848       if ( type == NWK_ASSOC_JOIN ||
// 2849           type == NWK_ASSOC_REJOIN_UNSECURE ||
// 2850             type == NWK_ASSOC_REJOIN_SECURE )
        JZ        ??ZDO_JoinIndicationCB_2
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??ZDO_JoinIndicationCB_2
        MOV       A,#0x2
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
// 2851       {
// 2852         uint16 timeToFire;
// 2853         ZDAppNewDevice_t *pNewDevice, *pDeviceList;
// 2854 
// 2855         pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
??ZDO_JoinIndicationCB_2:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
// 2856 
// 2857         if ( pNewDevice == NULL )
        MOV       A,R2
        ORL       A,R7
        JNZ       ??ZDO_JoinIndicationCB_4
// 2858         {
// 2859           // Memory alloc failed
// 2860           return ZMemError;
        MOV       R1,#0x10
        SJMP      ??ZDO_JoinIndicationCB_1
// 2861         }
// 2862 
// 2863         // Add the new device to the New Device List
// 2864         if ( ZDApp_NewDeviceList == NULL )
??ZDO_JoinIndicationCB_4:
        MOV       DPTR,#ZDApp_NewDeviceList
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV       DPTR,#ZDApp_NewDeviceList
        JNZ       ??ZDO_JoinIndicationCB_5
// 2865         {
// 2866           // The list is empty, add the first element
// 2867           ZDApp_NewDeviceList = pNewDevice;
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??ZDO_JoinIndicationCB_6
// 2868         }
// 2869         else
// 2870         {
// 2871           pDeviceList = ZDApp_NewDeviceList;
??ZDO_JoinIndicationCB_5:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??ZDO_JoinIndicationCB_7
// 2872 
// 2873           // Walk the list to last element
// 2874           while ( pDeviceList->next )
// 2875           {
// 2876             pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
??ZDO_JoinIndicationCB_8:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
??ZDO_JoinIndicationCB_7:
        MOV       R3,A
// 2877           }
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_105:
        JNZ       ??ZDO_JoinIndicationCB_8
// 2878 
// 2879           // Add new device at the end
// 2880           pDeviceList->next = pNewDevice;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
??ZDO_JoinIndicationCB_6:
        MOVX      @DPTR,A
// 2881         }
// 2882 
// 2883         // get the remaining time of the timer
// 2884         timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x40
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_121:
        MOV       ?V4,R2
        MOV       ?V5,R3
// 2885 
// 2886         pNewDevice->next = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2887         pNewDevice->shortAddr = ShortAddress;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine11 & 0xFFFF
// 2888         pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
??CrossCallReturnLabel_120:
        MOV       A,#0x58
        CLR       C
        SUBB      A,?V4
        MOV       R0,A
        MOV       A,#0x2
        SUBB      A,?V5
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 2889 
// 2890         // Start the timer only if there is no pending timer
// 2891         if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
        MOV       A,#0x58
        XRL       A,R0
        JNZ       ??ZDO_JoinIndicationCB_9
        MOV       A,#0x2
        XRL       A,R1
??ZDO_JoinIndicationCB_9:
        JNZ       ??ZDO_JoinIndicationCB_3
// 2892         {
// 2893           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_258
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine16 & 0xFFFF
// 2894         }
// 2895       }
// 2896     }
??CrossCallReturnLabel_80:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2897 
// 2898     return ZSuccess;
??ZDO_JoinIndicationCB_3:
        MOV       R1,#0x0
??ZDO_JoinIndicationCB_1:
        LJMP      ?Subroutine2 & 0xFFFF
// 2899 
// 2900 }
          CFI EndBlock cfiBlock234

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond235 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
          CFI Conditional ??CrossCallReturnLabel_121
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function ZDApp_ResetTimerStart
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_12
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-4
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function ZDO_JoinIndicationCB
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_13
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-4
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        MOV       R3,#0x0
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function ZDApp_NwkStateUpdateCB
          CFI Conditional ??CrossCallReturnLabel_123
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function ZDO_JoinIndicationCB
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function ZDApp_ResetTimerStart
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_12
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-4
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function ZDO_JoinIndicationCB
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_13
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-4
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker243 Using cfiCommon1
          CFI (cfiPicker243) NoFunction
          CFI (cfiPicker243) Picker
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        RET
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiPicker243

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond244 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function ZDO_JoinIndicationCB
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker246 Using cfiCommon1
          CFI (cfiPicker246) NoFunction
          CFI (cfiPicker246) Picker
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_get_timeoutEx
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x4
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_122:
        MOV       A,R2
        ORL       A,R3
        ORL       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiPicker246
// 2901 
// 2902 /*********************************************************************
// 2903  * @fn          ZDO_ConcentratorIndicationCB
// 2904  *
// 2905  * @brief       This function allows the next higher layer of a
// 2906  *              device to be notified of existence of the concentrator.
// 2907  *
// 2908  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 2909  * @param       extAddr - pointer to extended Address
// 2910  *                        NULL if not available
// 2911  * @param       pktCost - PktCost from RREQ
// 2912  *
// 2913  * @return      void
// 2914  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2915 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
          CFI Block cfiBlock247 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
        CODE
// 2916 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2917   zdoConcentratorInd_t conInd;
// 2918 
// 2919   conInd.nwkAddr = nwkAddr;
        LCALL     ?Subroutine12 & 0xFFFF
// 2920   conInd.extAddr = extAddr;
??CrossCallReturnLabel_145:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2921   conInd.pktCost = pktCost;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2922 
// 2923   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc + 2
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ        ??ZDO_ConcentratorIndicationCB_0
// 2924   {
// 2925     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ?CALL_IND
// 2926   }
// 2927 }
??ZDO_ConcentratorIndicationCB_0:
        LJMP      ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock247

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond248 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-2
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function ZDO_PermitJoinCB
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond250) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond250) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond250) CFA_SP SP+-7
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function ZDO_LeaveCnf
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function ZDO_LeaveInd
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker254 Using cfiCommon1
          CFI (cfiPicker254) NoFunction
          CFI (cfiPicker254) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,A
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiPicker254

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock255 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_58:
          CFI EndBlock cfiBlock255
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiBlock256 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock256
// 2928 
// 2929 /*********************************************************************
// 2930  * @fn          ZDO_LeaveCnf
// 2931  *
// 2932  * @brief       This function allows the next higher layer to be
// 2933  *              notified of the results of its request for this or
// 2934  *              a child device to leave the network.
// 2935  *
// 2936  * @param       cnf - NLME_LeaveCnf_t
// 2937  *
// 2938  * @return      none
// 2939  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2940 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
        CODE
// 2941 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2942   // Check for this device
// 2943   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2944                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        ; Setup parameters for call to function sAddrExtCmp
        MOV       R2,?V0
        MOV       R3,A
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDO_LeaveCnf_0
// 2945   {
// 2946     // Pass the leave confirm to higher layer if callback registered
// 2947     if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
// 2948          ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
        MOV       DPTR,#zdoCBFunc + 10
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ        ??ZDO_LeaveCnf_1
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
        MOV       A,R2
        ORL       A,R3
        JNZ       ??ZDO_LeaveCnf_2
// 2949     {
// 2950       // Prepare to leave with reset
// 2951       ZDApp_LeaveReset( cnf->rejoin );
??ZDO_LeaveCnf_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV       A,R6
        LCALL     ?Subroutine42 & 0xFFFF
// 2952     }
// 2953   }
??CrossCallReturnLabel_39:
        MOV       R1,A
        LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        SJMP      ??ZDO_LeaveCnf_2
// 2954   else if ( ZSTACK_ROUTER_BUILD )
// 2955   {
// 2956     // Remove device address(optionally descendents) from data
// 2957     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2958                        cnf->extAddr,
// 2959                        cnf->removeChildren );
??ZDO_LeaveCnf_0:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        LCALL     ?Subroutine22 & 0xFFFF
// 2960   }
??CrossCallReturnLabel_95:
        LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
// 2961 }
??ZDO_LeaveCnf_2:
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock257
// 2962 
// 2963 /*********************************************************************
// 2964  * @fn          ZDO_LeaveInd
// 2965  *
// 2966  * @brief       This function allows the next higher layer of a
// 2967  *              device to be notified of a remote leave request or
// 2968  *              indication.
// 2969  *
// 2970  * @param       ind - NLME_LeaveInd_t
// 2971  *
// 2972  * @return      none
// 2973  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2974 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function ZDO_LeaveInd
        CODE
// 2975 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2976   uint8 leave;
// 2977 
// 2978 
// 2979   // Parent is requesting the leave - NWK layer filters out illegal
// 2980   // requests
// 2981   if ( ind->request == TRUE )
        MOV       A,R2
        ADD       A,#0xb
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V0,R0
        MOV       ?V1,A
        MOV       A,R2
        ADD       A,#0xc
        INC       R0
        CLR       A
        ADDC      A,R7
        MOV       ?V2,R0
        MOV       ?V3,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDO_LeaveInd_0
// 2982   {
// 2983     // Only respond if we are not rejoining the network
// 2984     if ( ind->rejoin == FALSE )
        MOV       DPL,R0
        MOV       DPH,?V3
        MOVX      A,@DPTR
        JNZ       ??ZDO_LeaveInd_1
// 2985     {
// 2986       // Notify network of leave
// 2987       NLME_LeaveRsp_t rsp;
// 2988       rsp.rejoin = ind->rejoin;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2989 
// 2990       if ( ZSTACK_ROUTER_BUILD )
// 2991       {
// 2992         rsp.removeChildren = ind->removeChildren;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2993       }
// 2994       else if ( ZSTACK_END_DEVICE_BUILD )
// 2995       {
// 2996         NLME_SetResponseRate(0);
// 2997         NLME_SetQueuedPollRate(0);
// 2998         rsp.removeChildren = 0;
// 2999       }
// 3000 
// 3001       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
        SJMP      ??ZDO_LeaveInd_1
// 3002     }
// 3003 
// 3004     if ( ZSTACK_END_DEVICE_BUILD )
// 3005     {
// 3006       // Stop polling and get ready to reset
// 3007       NLME_SetPollRate( 0 );
// 3008     }
// 3009 
// 3010     // Prepare to leave with reset
// 3011     ZDApp_LeaveReset( ind->rejoin );
// 3012   }
// 3013   else
// 3014   {
// 3015     leave = FALSE;
// 3016 
// 3017     // Check if this device needs to leave as a child or descendent
// 3018     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV       A,?V4
        XRL       A,R2
        JNZ       ??ZDO_LeaveInd_2
        MOV       A,?V5
        XRL       A,R3
??ZDO_LeaveInd_2:
        JNZ       ??ZDO_LeaveInd_3
// 3019     {
// 3020       if ( ( ind->removeChildren == TRUE )   )
        MOV       A,#0x1
        XRL       A,R1
        JZ        ??ZDO_LeaveInd_1
// 3021       {
// 3022         leave = TRUE;
// 3023       }
// 3024       else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_128:
        JNZ       ??ZDO_LeaveInd_3
// 3025       {
// 3026         // old parents is leaving the network, child needs to search for a new parent
// 3027         ind->rejoin = TRUE;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3028         leave = TRUE;
// 3029       }
// 3030 
// 3031     }
// 3032     else if ( ind->removeChildren == TRUE )
// 3033     {
// 3034       // Check NWK address allocation algorithm
// 3035       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 3036     }
// 3037 
// 3038     if ( leave == TRUE )
// 3039     {
// 3040       // Prepare to leave with reset
// 3041       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        SJMP      ??ZDO_LeaveInd_4
// 3042     }
// 3043     else
// 3044     {
// 3045       // Remove device address(optionally descendents) from data
// 3046       ZDApp_LeaveUpdate( ind->srcAddr,
// 3047                          ind->extAddr,
// 3048                          ind->removeChildren );
??ZDO_LeaveInd_3:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        MOV       A,R6
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
// 3049     }
// 3050   }
// 3051 
// 3052   // Pass the leave indication to higher layer if callback registered.
// 3053   if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
??ZDO_LeaveInd_4:
        MOV       DPTR,#zdoCBFunc + 12
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ        ??ZDO_LeaveInd_5
// 3054   {
// 3055     (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
        ; Setup parameters for indirect call
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     ?CALL_IND
// 3056   }
// 3057 }
??ZDO_LeaveInd_5:
        MOV       A,#0x2
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock258

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond259 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_124
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-2
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker261 Using cfiCommon1
          CFI (cfiPicker261) NoFunction
          CFI (cfiPicker261) Picker
        MOV       R1,#0x6
        LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiPicker261
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond262 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-2
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function ZDO_LeaveInd
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function ZDApp_DeviceAuthEvt
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond265) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond265) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond265) CFA_SP SP+-7
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker267 Using cfiCommon1
          CFI (cfiPicker267) NoFunction
          CFI (cfiPicker267) Picker
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x2
        RET
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiPicker267
// 3058 
// 3059 /*********************************************************************
// 3060  * @fn          ZDO_SyncIndicationCB
// 3061  *
// 3062  * @brief       This function allows the next higher layer of a
// 3063  *              coordinator to be notified of a loss of synchronization
// 3064  *                          with the parent/child device.
// 3065  *
// 3066  * @param       type: 0 - child; 1 - parent
// 3067  *
// 3068  *
// 3069  * @return      none
// 3070  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3071 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
          CFI Block cfiBlock268 Using cfiCommon0
          CFI Function ZDO_SyncIndicationCB
        CODE
// 3072 {
        ; Saved register size: 0
        ; Auto size: 0
// 3073   (void)shortAddr;  // Remove this line if this parameter is used.
// 3074 
// 3075   if ( ZSTACK_END_DEVICE_BUILD
// 3076     || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 3077   {
// 3078     if ( type == 1 && retryCnt == 0 )
// 3079     {
// 3080       // We lost contact with our parent.  Clear the neighbor Table.
// 3081       nwkNeighborInitTable();
// 3082 
// 3083       runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
// 3084 
// 3085       // Start the rejoin process.
// 3086       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
// 3087     }
// 3088   }
// 3089 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock268
// 3090 
// 3091 /*********************************************************************
// 3092  * @fn          ZDO_ManytoOneFailureIndicationCB
// 3093  *
// 3094  * @brief       This function allows the next higher layer of a
// 3095  *              concentrator to be notified of a many-to-one route
// 3096  *              failure.
// 3097  *
// 3098  * @param       none
// 3099  *
// 3100  *
// 3101  * @return      none
// 3102  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3103 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
          CFI Block cfiBlock269 Using cfiCommon0
          CFI Function ZDO_ManytoOneFailureIndicationCB
        CODE
// 3104 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3105   // By default, the concentrator automatically redo many-to-one route
// 3106   // discovery to update all many-to-one routes in the network
// 3107   // If you want anything processing other than the default,
// 3108   // please replace the following code.
// 3109 
// 3110   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
// 3111 }
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock269
// 3112 
// 3113 /*********************************************************************
// 3114  * @fn          ZDO_PollConfirmCB
// 3115  *
// 3116  * @brief       This function allows the next higher layer to be
// 3117  *              notified of a Poll Confirm.
// 3118  *
// 3119  * @param       none
// 3120  *
// 3121  * @return      none
// 3122  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3123 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
          CFI Block cfiBlock270 Using cfiCommon0
          CFI Function ZDO_PollConfirmCB
        CODE
// 3124 {
        ; Saved register size: 0
        ; Auto size: 0
// 3125   (void)status;  // Remove this line if this parameter is used.
// 3126   return;
        LJMP      ?BRET
// 3127 }
          CFI EndBlock cfiBlock270
// 3128 
// 3129 /*********************************************************************
// 3130  * @fn          ZDO_NetworkStatusCB
// 3131  *
// 3132  * @brief       Network Status Callback function
// 3133  *
// 3134  * @param       nwkDstAddr - message's destination address- used to determine
// 3135  *                           if the message was intended for this device or
// 3136  *                           a sleeping end device.
// 3137  * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
// 3138  * @param       dstAddr - the destination address related to the status code
// 3139  *
// 3140  * @return      none
// 3141  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3142 void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
ZDO_NetworkStatusCB:
          CFI Block cfiBlock271 Using cfiCommon0
          CFI Function ZDO_NetworkStatusCB
        CODE
// 3143 {
        FUNCALL ZDO_NetworkStatusCB, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3144   (void)dstAddr;     // Remove this line if this parameter is used.
// 3145 
// 3146   if ( (nwkDstAddr == NLME_GetShortAddr())
// 3147       && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
// 3148   {
// 3149     // Routing error for dstAddr, this is informational and a Route
// 3150     // Request should happen automatically.
// 3151   }
// 3152 }
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock271
// 3153 
// 3154 /******************************************************************************
// 3155  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 3156  *
// 3157  * @brief       Stub routine implemented by NHLE. NHLE should call
// 3158  *              <AddrMgrWriteNV> when appropriate.
// 3159  *
// 3160  * @param       none
// 3161  *
// 3162  * @return      none
// 3163  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3164 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
          CFI Block cfiBlock272 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
        CODE
// 3165 {
        ; Saved register size: 0
        ; Auto size: 0
// 3166 #if defined ( NV_RESTORE )
// 3167   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
// 3168   {
// 3169     // Trigger to save info into NV
// 3170     ZDApp_NVUpdate();
// 3171   }
// 3172 #endif
// 3173 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock272
// 3174 
// 3175 /*********************************************************************
// 3176  * Call Back Functions from Security  - API
// 3177  */
// 3178 
// 3179  /*********************************************************************
// 3180  * @fn          ZDO_UpdateDeviceIndication
// 3181  *
// 3182  * @brief       This function notifies the "Trust Center" of a
// 3183  *              network when a device joins or leaves the network.
// 3184  *
// 3185  * @param       extAddr - pointer to 64 bit address of new device
// 3186  * @param       status  - 0 if a new device joined securely
// 3187  *                      - 1 if a new device joined un-securely
// 3188  *                      - 2 if a device left the network
// 3189  *
// 3190  * @return      true if newly joined device should be allowed to
// 3191  *                                              remain on network
// 3192  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3193 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
          CFI Block cfiBlock273 Using cfiCommon0
          CFI Function ZDO_UpdateDeviceIndication
        CODE
// 3194 {
        ; Saved register size: 0
        ; Auto size: 0
// 3195   // can implement a network access policy based on the
// 3196   // IEEE address of newly joining devices...
// 3197   (void)extAddr;
// 3198   (void)status;
// 3199 
// 3200   return ZSuccess;
        MOV       R1,#0x0
        LJMP      ?BRET
// 3201 }
          CFI EndBlock cfiBlock273
// 3202 
// 3203 /*********************************************************************
// 3204  * @fn          ZDApp_InMsgCB
// 3205  *
// 3206  * @brief       This function is called to pass up any message that is
// 3207  *              not yet supported.  This allows for the developer to
// 3208  *              support features themselves..
// 3209  *
// 3210  * @return      none
// 3211  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3212 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
          CFI Block cfiBlock274 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
        CODE
// 3213 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3214   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_132:
        ANL       A,#0x80
        JNZ       ??ZDApp_InMsgCB_0
// 3215   {
// 3216     // Handle the response message
// 3217   }
// 3218   else
// 3219   {
// 3220     // Handle the request message by sending a generic "not supported".
// 3221     // Device Announce doesn't have a response.
// 3222     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        MOV       A,R2
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_40:
        JNZ       ??ZDApp_InMsgCB_0
        MOV       A,#0x13
        XRL       A,R0
        JNZ       ??ZDApp_InMsgCB_1
        MOV       A,R1
??ZDApp_InMsgCB_1:
        JZ        ??ZDApp_InMsgCB_0
// 3223     {
// 3224       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 3225                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV       A,R0
        MOV       ?V0,A
        MOV       A,R1
        ORL       A,#0x80
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R4,#-0x7c
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ?Subroutine38 & 0xFFFF
// 3226     }
// 3227   }
??CrossCallReturnLabel_34:
        MOV       R1,A
        LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3228 }
??ZDApp_InMsgCB_0:
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock274

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond275 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function ZDApp_InMsgCB
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-2
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker277 Using cfiCommon1
          CFI (cfiPicker277) NoFunction
          CFI (cfiPicker277) Picker
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiPicker277

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond278 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function ZDApp_InMsgCB
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker280 Using cfiCommon1
          CFI (cfiPicker280) NoFunction
          CFI (cfiPicker280) Picker
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiPicker280

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond281 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_133
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiCond284 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
          CFI Conditional ??CrossCallReturnLabel_129
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function ZDApp_LeaveReset
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-2
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-2
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function ZDApp_InMsgCB
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-2
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-2
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker290 Using cfiCommon1
          CFI (cfiPicker290) NoFunction
          CFI (cfiPicker290) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiPicker290
// 3229 
// 3230 
// 3231 /*********************************************************************
// 3232  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3233  *
// 3234  * @brief   Changes the Match Descriptor Response permission.
// 3235  *
// 3236  * @param   endpoint - endpoint to allow responses
// 3237  * @param   action - true to allow responses, false to not
// 3238  *
// 3239  * @return  none
// 3240  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3241 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
          CFI Block cfiBlock291 Using cfiCommon0
          CFI Function ZDApp_ChangeMatchDescRespPermission
        CODE
// 3242 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3243   // Store the action
// 3244   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
// 3245 }
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock291
// 3246 
// 3247 /*********************************************************************
// 3248  * @fn      ZDApp_NetworkInit()
// 3249  *
// 3250  * @brief   Used to start the network joining process
// 3251  *
// 3252  * @param   delay - mSec delay to wait before starting
// 3253  *
// 3254  * @return  none
// 3255  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3256 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
          CFI Block cfiBlock292 Using cfiCommon0
          CFI Function ZDApp_NetworkInit
        CODE
// 3257 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3258   if ( delay )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_NetworkInit_0
// 3259   {
// 3260     // Wait awhile before starting the device
// 3261     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       ?V0,R2
        MOV       ?V1,R3
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x1
        LCALL     ??Subroutine55_0 & 0xFFFF
// 3262   }
??CrossCallReturnLabel_82:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP      ??CrossCallReturnLabel_59
// 3263   else
// 3264   {
// 3265     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_0:
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x1
        LCALL     ??Subroutine47_0 & 0xFFFF
// 3266   }
// 3267 }
??CrossCallReturnLabel_59:
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock292
// 3268 
// 3269 /*********************************************************************
// 3270  * @fn      ZDApp_NwkStateUpdateCB()
// 3271  *
// 3272  * @brief   This function notifies that this device's network
// 3273  *          state info has been changed.
// 3274  *
// 3275  * @param   none
// 3276  *
// 3277  * @return  none
// 3278  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3279 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
          CFI Block cfiBlock293 Using cfiCommon0
          CFI Function ZDApp_NwkStateUpdateCB
        CODE
// 3280 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3281   // Notify to save info into NV
// 3282   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV       R2,#0x0
        MOV       R3,#0x1
        LCALL     ??Subroutine65_0 & 0xFFFF
// 3283   {
// 3284     // Trigger to save info into NV
// 3285     ZDApp_NVUpdate();
// 3286   }
// 3287 }
??CrossCallReturnLabel_123:
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock293
// 3288 
// 3289 /*********************************************************************
// 3290  * @fn      ZDApp_NodeProfileSync()
// 3291  *
// 3292  * @brief   Sync node with stack profile.
// 3293  *
// 3294  * @param   stackProfile - stack profile of the network to join
// 3295  *
// 3296  * @return  none
// 3297  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3298 void ZDApp_NodeProfileSync( uint8 stackProfile )
ZDApp_NodeProfileSync:
          CFI Block cfiBlock294 Using cfiCommon0
          CFI Function ZDApp_NodeProfileSync
        CODE
// 3299 {
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3300   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??ZDApp_NodeProfileSync_0
// 3301   {
// 3302     if ( stackProfile != zgStackProfile )
        MOV       DPTR,#zgStackProfile
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??ZDApp_NodeProfileSync_0
// 3303     {
// 3304       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor
        MOVX      A,@DPTR
        ANL       A,#0xf8
        ORL       A,#0x2
        MOVX      @DPTR,A
// 3305       ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOV       A,#0xc
        MOVX      @DPTR,A
// 3306       NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV       R1,A
        LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
// 3307     }
// 3308   }
// 3309 }
??ZDApp_NodeProfileSync_0:
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock294
// 3310 
// 3311 /*********************************************************************
// 3312  * @fn      ZDApp_StartJoiningCycle()
// 3313  *
// 3314  * @brief   Starts the joining cycle of a device.  This will only
// 3315  *          continue an already started (or stopped) joining cycle.
// 3316  *
// 3317  * @param   none
// 3318  *
// 3319  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3320  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3321 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
          CFI Block cfiBlock295 Using cfiCommon0
          CFI Function ZDApp_StartJoiningCycle
        CODE
// 3322 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3323   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_StartJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDApp_StartJoiningCycle_1
// 3324   {
// 3325     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV       DPTR,#continueJoining
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3326     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
// 3327 
// 3328     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??ZDApp_StartJoiningCycle_2
// 3329   }
// 3330   else
// 3331     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV       R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP      ??Subroutine58_0 & 0xFFFF
// 3332 }
          CFI EndBlock cfiBlock295
// 3333 
// 3334 /*********************************************************************
// 3335  * @fn      ZDApp_StopJoiningCycle()
// 3336  *
// 3337  * @brief   Stops the joining or rejoining process of a device.
// 3338  *
// 3339  * @param   none
// 3340  *
// 3341  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3342  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3343 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
          CFI Block cfiBlock296 Using cfiCommon0
          CFI Function ZDApp_StopJoiningCycle
        CODE
// 3344 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3345   if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??ZDApp_StopJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??ZDApp_StopJoiningCycle_0
        MOVX      A,@DPTR
        XRL       A,#0xc
        JNZ       ??ZDApp_StopJoiningCycle_1
// 3346   {
// 3347     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        MOV       DPTR,#continueJoining
        CLR       A
        MOVX      @DPTR,A
// 3348     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??ZDApp_StopJoiningCycle_2
// 3349   }
// 3350   else
// 3351     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV       R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP      ??Subroutine58_0 & 0xFFFF
// 3352 }
          CFI EndBlock cfiBlock296
// 3353 
// 3354 /*********************************************************************
// 3355  * @fn      ZDApp_AnnounceNewAddress()
// 3356  *
// 3357  * @brief   Send Device Announce and hold all transmissions for
// 3358  *          new address timeout.
// 3359  *
// 3360  * @param   none
// 3361  *
// 3362  * @return  none
// 3363  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3364 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
          CFI Block cfiBlock297 Using cfiCommon0
          CFI Function ZDApp_AnnounceNewAddress
        CODE
// 3365 {
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3366 #if defined ( ZIGBEEPRO )
// 3367   // Turn off data request hold
// 3368   APSME_HoldDataRequests( 0 );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3369 #endif
// 3370 
// 3371   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 3372                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R4,A
        MOV       R5,?V1
        LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3373 
// 3374 #if defined ( ZIGBEEPRO )
// 3375   // Setup the timeout
// 3376   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3377 #endif
// 3378 
// 3379   if ( ZSTACK_END_DEVICE_BUILD )
// 3380   {
// 3381     if ( zgChildAgingEnable == TRUE )
// 3382     {
// 3383       uint8 coordExtAddr[Z_EXTADDR_LEN];
// 3384 
// 3385       // Send the message to parent
// 3386       NLME_GetCoordExtAddr( coordExtAddr );
// 3387       NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
// 3388                                  zgEndDeviceTimeoutValue,
// 3389                                  zgEndDeviceConfiguration );
// 3390     }
// 3391   }
// 3392 }
        LJMP      ??Subroutine60_0 & 0xFFFF
          CFI EndBlock cfiBlock297
// 3393 
// 3394 /*********************************************************************
// 3395  * @fn      ZDApp_SendParentAnnce()
// 3396  *
// 3397  * @brief   Send Parent Announce message.
// 3398  *
// 3399  * @param   none
// 3400  *
// 3401  * @return  none
// 3402  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3403 void ZDApp_SendParentAnnce( void )
ZDApp_SendParentAnnce:
          CFI Block cfiBlock298 Using cfiCommon0
          CFI Function ZDApp_SendParentAnnce
        CODE
// 3404 {
        FUNCALL ZDApp_SendParentAnnce, AssocMakeListOfRfdChild
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, ZDP_ParentAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendParentAnnce, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3405   uint8 count;
// 3406   uint8 *childInfo;
// 3407 
// 3408   childInfo = AssocMakeListOfRfdChild( &count );
        ; Setup parameters for call to function AssocMakeListOfRfdChild
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3409 
// 3410   if ( childInfo != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDApp_SendParentAnnce_0
// 3411   {
// 3412     if ( count > 0 )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??ZDApp_SendParentAnnce_1
// 3413     {
// 3414       zAddrType_t dstAddr;
// 3415 
// 3416       dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
// 3417       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3418 
// 3419       ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
        ; Setup parameters for call to function ZDP_ParentAnnce
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V2,#0x1f
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3420     }
// 3421 
// 3422     // Free the list after the message has been sent
// 3423     osal_mem_free( childInfo );
??ZDApp_SendParentAnnce_1:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3424   }
// 3425 }
??ZDApp_SendParentAnnce_0:
        MOV       A,#0xa
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock298
// 3426 
// 3427 /*********************************************************************
// 3428  * @fn          ZDApp_NVUpdate
// 3429  *
// 3430  * @brief       Set the NV Update Timer.
// 3431  *
// 3432  * @param       none
// 3433  *
// 3434  * @return      none
// 3435  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3436 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
          CFI Block cfiBlock299 Using cfiCommon0
          CFI Function ZDApp_NVUpdate
        CODE
// 3437 {
        ; Saved register size: 0
        ; Auto size: 0
// 3438 #if defined ( NV_RESTORE )
// 3439   if ( (ZSTACK_END_DEVICE_BUILD)
// 3440        || (ZSTACK_ROUTER_BUILD
// 3441            && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
// 3442   {
// 3443     // No need to wait, set the event to save the state
// 3444     osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
// 3445   }
// 3446   else
// 3447   {
// 3448     // To allow for more changes to the network state before saving
// 3449     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 3450   }
// 3451 #endif
// 3452 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock299
// 3453 
// 3454 /*********************************************************************
// 3455  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 3456  *
// 3457  * @brief   Returns a PAN ID for the network layer to use during
// 3458  *          a coordinator start and there is another network with
// 3459  *          the intended PANID.
// 3460  *
// 3461  * @param   panid - the intended PAN ID
// 3462  *
// 3463  * @return  PANID to try
// 3464  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3465 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
          CFI Block cfiBlock300 Using cfiCommon0
          CFI Function ZDApp_CoordStartPANIDConflictCB
        CODE
// 3466 {
        ; Saved register size: 0
        ; Auto size: 0
// 3467   return ( panid + 1 );
        MOV       A,R2
        ADD       A,#0x1
        INC       R2
        JNC       ??ZDApp_CoordStartPANIDConflictCB_0
        INC       R3
??ZDApp_CoordStartPANIDConflictCB_0:
        LJMP      ?BRET
// 3468 }
          CFI EndBlock cfiBlock300
// 3469 
// 3470 /*********************************************************************
// 3471  * @fn          ZDO_SrcRtgIndCB
// 3472  *
// 3473  * @brief       This function notifies the ZDO available src route record received.
// 3474  *
// 3475  * @param       srcAddr - source address of the source route
// 3476  * @param       relayCnt - number of devices in the relay list
// 3477  * @param       relayList - relay list of the source route
// 3478  *
// 3479  * @return      none
// 3480  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3481 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
          CFI Block cfiBlock301 Using cfiCommon0
          CFI Function ZDO_SrcRtgIndCB
        CODE
// 3482 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3483   zdoSrcRtg_t srcRtg;
// 3484 
// 3485   srcRtg.srcAddr = srcAddr;
        LCALL     ?Subroutine12 & 0xFFFF
// 3486   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_146:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 3487   srcRtg.pRelayList = pRelayList;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 3488 
// 3489   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV       DPTR,#zdoCBFunc
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_106:
        JZ        ??ZDO_SrcRtgIndCB_0
// 3490   {
// 3491     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     ??Subroutine70_0 & 0xFFFF
// 3492   }
??CrossCallReturnLabel_137:
        LCALL     ?CALL_IND
// 3493 }
??ZDO_SrcRtgIndCB_0:
          CFI EndBlock cfiBlock301
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock302 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x5
          CFI EndBlock cfiBlock302
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiBlock303 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Valid
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock303

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond304 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_138
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-2
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker306 Using cfiCommon1
          CFI (cfiPicker306) NoFunction
          CFI (cfiPicker306) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiPicker306
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiCond307 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond308) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond308) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond308) CFA_SP SP+-7
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function ZDO_SrcRtgIndCB
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-2
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function ZDApp_LeaveUpdate
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-2
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-2
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker312 Using cfiCommon1
          CFI (cfiPicker312) NoFunction
          CFI (cfiPicker312) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiPicker312
// 3494 
// 3495 /*********************************************************************
// 3496  * @fn          ZDApp_InitZdoCBFunc
// 3497  *
// 3498  * @brief       Call this function to initialize zdoCBFunc[]
// 3499  *
// 3500  * @param       none
// 3501  *
// 3502  * @return      none
// 3503  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3504 void ZDApp_InitZdoCBFunc( void )
ZDApp_InitZdoCBFunc:
          CFI Block cfiBlock313 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
        CODE
// 3505 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3506   uint8 i;
// 3507 
// 3508   for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
        MOV       R2,#0x0
// 3509   {
// 3510     zdoCBFunc[i] = NULL;
??ZDApp_InitZdoCBFunc_0:
        MOV       A,R2
        ADD       A,0xE0 /* A   */
        LCALL     ?Subroutine35 & 0xFFFF
// 3511   }
??CrossCallReturnLabel_23:
        INC       R2
        MOV       A,R2
        CLR       C
        SUBB      A,#0x9
        JC        ??ZDApp_InitZdoCBFunc_0
// 3512 }
        LJMP      ??Subroutine58_0 & 0xFFFF
          CFI EndBlock cfiBlock313
// 3513 
// 3514 /*********************************************************************
// 3515  * @fn          ZDO_RegisterForZdoCB
// 3516  *
// 3517  * @brief       Call this function to register the higher layer (for
// 3518  *              example, the Application layer or MT layer) with ZDO
// 3519  *              callbacks to get notified of some ZDO indication like
// 3520  *              existence of a concentrator or receipt of a source
// 3521  *              route record.
// 3522  *
// 3523  * @param       indID - ZDO Indication ID
// 3524  * @param       pFn   - Callback function pointer
// 3525  *
// 3526  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3527  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3528 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
          CFI Block cfiBlock314 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
        CODE
// 3529 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
// 3530   // Check the range of the indication ID
// 3531   if ( indID < MAX_ZDO_CB_FUNC )
        CLR       C
        SUBB      A,#0x9
        JNC       ??ZDO_RegisterForZdoCB_0
// 3532   {
// 3533     zdoCBFunc[indID] = pFn;
        MOV       A,R1
        ADD       A,R1
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ??Subroutine71_0 & 0xFFFF
// 3534     return ZSuccess;
??CrossCallReturnLabel_143:
        MOV       R1,#0x0
        SJMP      ??ZDO_RegisterForZdoCB_1
// 3535   }
// 3536 
// 3537   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV       R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP      ??Subroutine58_0 & 0xFFFF
// 3538 }
          CFI EndBlock cfiBlock314
// 3539 
// 3540 /*********************************************************************
// 3541  * @fn          ZDO_DeregisterForZdoCB
// 3542  *
// 3543  * @brief       Call this function to de-register the higher layer (for
// 3544  *              example, the Application layer or MT layer) with ZDO
// 3545  *              callbacks to get notified of some ZDO indication like
// 3546  *              existence of a concentrator or receipt of a source
// 3547  *              route record.
// 3548  *
// 3549  * @param       indID - ZDO Indication ID
// 3550  *
// 3551  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3552  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3553 ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
ZDO_DeregisterForZdoCB:
          CFI Block cfiBlock315 Using cfiCommon0
          CFI Function ZDO_DeregisterForZdoCB
        CODE
// 3554 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
// 3555   // Check the range of the indication ID
// 3556   if ( indID < MAX_ZDO_CB_FUNC )
        CLR       C
        SUBB      A,#0x9
        JNC       ??ZDO_DeregisterForZdoCB_0
// 3557   {
// 3558     zdoCBFunc[indID] = NULL;
        MOV       A,R1
        ADD       A,R1
        LCALL     ?Subroutine35 & 0xFFFF
// 3559     return ZSuccess;
??CrossCallReturnLabel_24:
        MOV       R1,A
        SJMP      ??ZDO_DeregisterForZdoCB_1
// 3560   }
// 3561 
// 3562   return ZInvalidParameter;
??ZDO_DeregisterForZdoCB_0:
        MOV       R1,#0x2
??ZDO_DeregisterForZdoCB_1:
        LJMP      ??Subroutine58_0 & 0xFFFF
// 3563 }
          CFI EndBlock cfiBlock315

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond316 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
          CFI Conditional ??CrossCallReturnLabel_23
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond317) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond317) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond317) CFA_SP SP+-7
          CFI Block cfiPicker318 Using cfiCommon1
          CFI (cfiPicker318) NoFunction
          CFI (cfiPicker318) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_42:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiPicker318

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond319 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
          CFI Conditional ??CrossCallReturnLabel_41
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function ZDApp_InitZdoCBFunc
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_23
          CFI (cfiCond320) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond320) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond320) CFA_SP SP+-9
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_24
          CFI (cfiCond321) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond321) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond321) CFA_SP SP+-9
          CFI Block cfiPicker322 Using cfiCommon1
          CFI (cfiPicker322) NoFunction
          CFI (cfiPicker322) Picker
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,#zdoCBFunc & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(zdoCBFunc >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiPicker322
// 3564 
// 3565 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
// 3566 #if defined ( REFLECTOR )
// 3567 /*********************************************************************
// 3568  * @fn          ZDApp_SetPendingBindDefault
// 3569  *
// 3570  * @brief       This function initializes a specific entry of pending
// 3571  *              Bind Request.
// 3572  *
// 3573  * @param       pendBindReq - pointer to the entry in the table
// 3574  *
// 3575  * @return      none
// 3576  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3577 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
ZDApp_SetPendingBindDefault:
          CFI Block cfiBlock323 Using cfiCommon0
          CFI Function ZDApp_SetPendingBindDefault
        CODE
// 3578 {
        FUNCALL ZDApp_SetPendingBindDefault, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 3579   // Set it to an initial value
// 3580   osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x21
        MOV       R5,#0x0
        MOV       R1,#-0x1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3581 
// 3582   // We are checking for age 0 for aged-out records
// 3583   pendBindReq->age = 0;
        MOV       A,R6
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
// 3584 }
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock323
// 3585 
// 3586 /*********************************************************************
// 3587  * @fn          ZDApp_InitPendingBind
// 3588  *
// 3589  * @brief       This function initializes the buffer that holds
// 3590  *              pending Bind Request messages if no valid NWK address
// 3591  *              exists in Address Manager and a Network Address Req
// 3592  *              has been sent out.
// 3593  *
// 3594  * @param       none
// 3595  *
// 3596  * @return      none
// 3597  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3598 void ZDApp_InitPendingBind( void )
ZDApp_InitPendingBind:
          CFI Block cfiBlock324 Using cfiCommon0
          CFI Function ZDApp_InitPendingBind
        CODE
// 3599 {
        FUNCALL ZDApp_InitPendingBind, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitPendingBind, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3600   if ( ZDAppPendingBindReq == NULL )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_107:
        JNZ       ??ZDApp_InitPendingBind_0
// 3601   {
// 3602     if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x63
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#ZDAppPendingBindReq
        LCALL     ??Subroutine71_0 & 0xFFFF
??CrossCallReturnLabel_144:
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        JZ        ??ZDApp_InitPendingBind_0
// 3603     {
// 3604       uint8 i;
// 3605 
// 3606       for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV       R6,#0x0
// 3607       {
// 3608         // Set to default values
// 3609         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
??ZDApp_InitPendingBind_1:
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        MOV       A,R6
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#ZDAppPendingBindReq
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
// 3610       }
        INC       R6
        MOV       A,R6
        CLR       C
        SUBB      A,#0x3
        JC        ??ZDApp_InitPendingBind_1
// 3611     }
// 3612   }
// 3613 }
??ZDApp_InitPendingBind_0:
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock324

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond325 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
          CFI Conditional ??CrossCallReturnLabel_145
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function ZDO_SrcRtgIndCB
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker327 Using cfiCommon1
          CFI (cfiPicker327) NoFunction
          CFI (cfiPicker327) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiPicker327
        REQUIRE ??Subroutine71_0
        ; // Fall through to label ??Subroutine71_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine71_0:
          CFI Block cfiCond328 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function ZDO_JoinConfirmCB
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-2
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function ZDO_JoinConfirmCB
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-2
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function ZDO_RegisterForZdoCB
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond331) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond331) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond331) CFA_SP SP+-7
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function ZDApp_InitPendingBind
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-2
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-2
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function ZDO_SrcRtgIndCB
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+-2
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker335 Using cfiCommon1
          CFI (cfiPicker335) NoFunction
          CFI (cfiPicker335) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiPicker335
// 3614 
// 3615 /*********************************************************************
// 3616  * @fn          ZDApp_GetEmptyPendingBindReq
// 3617  *
// 3618  * @brief       This function looks for an empty entry.
// 3619  *
// 3620  * @param       none
// 3621  *
// 3622  * @return      Pointer to entry
// 3623  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3624 ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
ZDApp_GetEmptyPendingBindReq:
          CFI Block cfiBlock336 Using cfiCommon0
          CFI Function ZDApp_GetEmptyPendingBindReq
        CODE
// 3625 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3626   uint8 i;
// 3627 
// 3628   if ( ZDAppPendingBindReq != NULL )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_108:
        JZ        ??ZDApp_GetEmptyPendingBindReq_0
// 3629   {
// 3630     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV       R4,#0x0
// 3631     {
// 3632       if ( ZDAppPendingBindReq[i].age == 0 )
??ZDApp_GetEmptyPendingBindReq_1:
        MOV       A,R4
        MOV       B,#0x21
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#ZDAppPendingBindReq
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        ??ZDApp_GetEmptyPendingBindReq_2
// 3633       {
// 3634         return ( &ZDAppPendingBindReq[i] );
// 3635       }
// 3636     }
        INC       R4
        MOV       A,R4
        CLR       C
        SUBB      A,#0x3
        JC        ??ZDApp_GetEmptyPendingBindReq_1
// 3637   }
// 3638 
// 3639   // No empty entry was found
// 3640   return NULL;
??ZDApp_GetEmptyPendingBindReq_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??ZDApp_GetEmptyPendingBindReq_2:
        LJMP      ??Subroutine58_0 & 0xFFFF
// 3641 }
          CFI EndBlock cfiBlock336
// 3642 
// 3643 /*********************************************************************
// 3644  * @fn          ZDApp_ProcessPendingBindReq
// 3645  *
// 3646  * @brief       Process pending entry based on EXT address.
// 3647  *
// 3648  * @param       extAddr - of device to look up
// 3649  *
// 3650  * @return      none
// 3651  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3652 void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
ZDApp_ProcessPendingBindReq:
          CFI Block cfiBlock337 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
        CODE
// 3653 {
        FUNCALL ZDApp_ProcessPendingBindReq, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, APSME_BindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,R2
        MOV       ?V3,R3
// 3654   uint8 i;
// 3655 
// 3656   // Loop through all the pending entries for that Ext Address
// 3657   // to create Bind Entries and send Bind Rsp
// 3658   if ( ZDAppPendingBindReq != NULL )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_109:
        JNZ       $+5
        LJMP      ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
// 3659   {
// 3660     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV       ?V0,#0x0
// 3661     {
// 3662       if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
// 3663                         extAddr, Z_EXTADDR_LEN ) == TRUE )
??ZDApp_ProcessPendingBindReq_1:
        MOV       A,?V0
        MOV       B,#0x21
        MUL       AB
        MOV       R6,A
        MOV       R7,B
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V4,?V2
        MOV       ?V5,?V3
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x8
        MOV       R5,#0x0
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_17:
        ADD       A,#0xb
        MOV       ?V4,A
        CLR       A
        ADDC      A,R1
        MOV       R1,?V4
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
// 3664       {
// 3665         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x74
        MOVX      @DPTR,A
// 3666 
// 3667         // Add Bind entry
// 3668         if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
// 3669                                 ZDAppPendingBindReq[i].bindReq.clusterID,
// 3670                                 &(ZDAppPendingBindReq[i].bindReq.dstAddress),
// 3671                                 ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
        MOV       DPTR,#ZDAppPendingBindReq
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       ?V5,A
        ; Setup parameters for call to function APSME_BindRequest
        MOV       A,?V4
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,?V4
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,?V5
        MOV       R5,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        JNZ       ??ZDApp_ProcessPendingBindReq_2
// 3672         {
// 3673           // valid entry
// 3674           bindStat = ZDP_SUCCESS;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 3675 
// 3676           // Notify to save info into NV
// 3677           ZDApp_NVUpdate();
// 3678         }
// 3679 
// 3680         // Send back a response message
// 3681         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
// 3682                      bindStat, ZDAppPendingBindReq[i].securityUse );
??ZDApp_ProcessPendingBindReq_2:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V4,#0x21
        MOV       ?V5,#-0x80
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_37:
        JNC       ??ZDApp_ProcessPendingBindReq_3
        INC       R3
??ZDApp_ProcessPendingBindReq_3:
        LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3683 
// 3684         // Set the pending request entry to default values
// 3685         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        LCALL     ?Subroutine28 & 0xFFFF
// 3686       }
// 3687     }
??CrossCallReturnLabel_8:
        INC       ?V0
        MOV       A,?V0
        CLR       C
        SUBB      A,#0x3
        JNC       $+5
        LJMP      ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
// 3688   }
// 3689 }
??ZDApp_ProcessPendingBindReq_0:
        MOV       A,#0x1
        LJMP      ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock337
// 3690 
// 3691 /*********************************************************************
// 3692  * @fn          ZDApp_AgeOutPendingBindEntry
// 3693  *
// 3694  * @brief       Age out pending Bind Req entries.
// 3695  *
// 3696  * @param       none
// 3697  *
// 3698  * @return      none
// 3699  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3700 void ZDApp_AgeOutPendingBindEntry( void )
ZDApp_AgeOutPendingBindEntry:
          CFI Block cfiBlock338 Using cfiCommon0
          CFI Function ZDApp_AgeOutPendingBindEntry
        CODE
// 3701 {
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 14
        MOV       A,#-0xe
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3702   uint8 i;
// 3703   bool entryFound = FALSE;
        MOV       ?V0,#0x0
// 3704 
// 3705   if ( ZDAppPendingBindReq != NULL )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_110:
        JNZ       $+5
        LJMP      ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
// 3706   {
// 3707     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV       ?V1,#0x0
// 3708     {
// 3709       if ( ZDAppPendingBindReq[i].age > 1 )
??ZDApp_AgeOutPendingBindEntry_1:
        MOV       A,?V1
        MOV       B,#0x21
        MUL       AB
        MOV       R6,A
        MOV       R7,B
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_18:
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        CLR       C
        SUBB      A,#0x2
        JC        ??ZDApp_AgeOutPendingBindEntry_2
// 3710       {
// 3711         ZDAppPendingBindReq[i].age--;
        MOVX      A,@DPTR
        DEC       A
        MOVX      @DPTR,A
// 3712 
// 3713         entryFound = TRUE;
        MOV       ?V0,#0x1
        LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
// 3714       }
// 3715       else if ( ZDAppPendingBindReq[i].age == 1 )
??ZDApp_AgeOutPendingBindEntry_2:
        MOV       A,#0x1
        XRL       A,R2
        JNZ       ??CrossCallReturnLabel_9
// 3716       {
// 3717         // The record has aged out and has valid data
// 3718         AddrMgrEntry_t entry;
// 3719         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x74
        MOVX      @DPTR,A
// 3720 
// 3721         entry.user = ADDRMGR_USER_BINDING;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 3722 
// 3723         // Remove the entry in address manager so we do not keep entries
// 3724         // with invalid addresses
// 3725         AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,R0
        ADD       A,#0xb
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 3726 
// 3727         if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDApp_AgeOutPendingBindEntry_3
// 3728         {
// 3729           if ( entry.nwkAddr == INVALID_NODE_ADDR )
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDApp_AgeOutPendingBindEntry_4
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDApp_AgeOutPendingBindEntry_4:
        JNZ       ??ZDApp_AgeOutPendingBindEntry_3
// 3730           {
// 3731             // Release the entry that contains an invalid NWK address
// 3732             AddrMgrEntryRelease( &entry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
// 3733           }
// 3734         }
// 3735 
// 3736         // Send the Bind Response with failure status
// 3737         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
// 3738                      &(ZDAppPendingBindReq[i].srcAddr),
// 3739                      bindStat, ZDAppPendingBindReq[i].securityUse );
??ZDApp_AgeOutPendingBindEntry_3:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V2,#0x21
        MOV       ?V3,#-0x80
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_38:
        JNC       ??ZDApp_AgeOutPendingBindEntry_5
        INC       R3
??ZDApp_AgeOutPendingBindEntry_5:
        LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3740 
// 3741         // Clear the record and set to default values
// 3742         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        LCALL     ?Subroutine28 & 0xFFFF
// 3743       }
// 3744     }
??CrossCallReturnLabel_9:
        INC       ?V1
        MOV       A,?V1
        CLR       C
        SUBB      A,#0x3
        JNC       $+5
        LJMP      ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
// 3745   }
// 3746 
// 3747   if ( entryFound == FALSE )
        MOV       A,?V0
        MOV       C,0xE0 /* A   */.0
        JC        ??ZDApp_AgeOutPendingBindEntry_6
// 3748   {
// 3749     osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
??ZDApp_AgeOutPendingBindEntry_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x0
        MOV       R3,#0x10
        LCALL     ?Subroutine25 & 0xFFFF
// 3750   }
??CrossCallReturnLabel_69:
        SJMP      ??ZDApp_AgeOutPendingBindEntry_7
// 3751   else
// 3752   {
// 3753     osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
// 3754                         AGE_OUT_PEND_BIND_REQ_DELAY );
??ZDApp_AgeOutPendingBindEntry_6:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R2,#0x0
        MOV       R3,#0x10
        LCALL     ??Subroutine56_0 & 0xFFFF
// 3755   }
??CrossCallReturnLabel_84:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3756 }
??ZDApp_AgeOutPendingBindEntry_7:
        MOV       A,#0xe
        LJMP      ??Subroutine49_0 & 0xFFFF
          CFI EndBlock cfiBlock338

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond339 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond340 Using cfiCommon0
          CFI (cfiCond340) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond340) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond340) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond340) CFA_SP SP+-2
          CFI (cfiCond340) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker341 Using cfiCommon1
          CFI (cfiPicker341) NoFunction
          CFI (cfiPicker341) Picker
        MOV       R1,#0x1
        MOV       A,R2
        ADD       A,#0x15
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,R2
        ADD       A,#0x1f
        MOV       R2,A
        RET
          CFI EndBlock cfiCond339
          CFI EndBlock cfiCond340
          CFI EndBlock cfiPicker341

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond342 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-2
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker344 Using cfiCommon1
          CFI (cfiPicker344) NoFunction
          CFI (cfiPicker344) Picker
        MOV       DPTR,#ZDAppPendingBindReq
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R1,A
        MOV       A,R0
        RET
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiPicker344

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond345 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-2
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker347 Using cfiCommon1
          CFI (cfiPicker347) NoFunction
          CFI (cfiPicker347) Picker
        MOV       DPTR,#ZDAppPendingBindReq
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
        RET
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiPicker347

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond348 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-2
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker350 Using cfiCommon1
          CFI (cfiPicker350) NoFunction
          CFI (cfiPicker350) Picker
        MOV       DPTR,#ZDAppPendingBindReq
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R3,A
        ; Setup parameters for call to function ZDP_SendData
        ; Setup parameters for call to function ZDP_SendData
        MOV       A,R2
        ADD       A,#0x1e
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiPicker350
// 3757 #endif
// 3758 #endif
// 3759 
// 3760 /*********************************************************************
// 3761  * @fn          ZDO_ChangeState
// 3762  *
// 3763  * @brief       Chance the device state
// 3764  *
// 3765  * @param       state - new state
// 3766  *
// 3767  * @return      none
// 3768  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3769 void ZDApp_ChangeState( devStates_t state )
ZDApp_ChangeState:
          CFI Block cfiBlock351 Using cfiCommon0
          CFI Function ZDApp_ChangeState
        CODE
// 3770 {
        FUNCALL ZDApp_ChangeState, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3771   if ( devState != state )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,R6
        JZ        ??CrossCallReturnLabel_56
// 3772   {
// 3773     devState = state;
        MOV       A,R1
        MOVX      @DPTR,A
// 3774     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine18 & 0xFFFF
// 3775   }
// 3776 }
??CrossCallReturnLabel_56:
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock351
// 3777 
// 3778 /*********************************************************************
// 3779  * @fn      ZDApp_SetRejoinScanDuration()
// 3780  *
// 3781  * @brief   Sets scan duration for rejoin for an end device
// 3782  *
// 3783  * @param   rejoinScanDuration - milliseconds
// 3784  *
// 3785  * @return  none
// 3786  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3787 void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
ZDApp_SetRejoinScanDuration:
          CFI Block cfiBlock352 Using cfiCommon0
          CFI Function ZDApp_SetRejoinScanDuration
        CODE
// 3788 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 3789   zgDefaultRejoinScan = rejoinScanDuration;
        MOV       DPTR,#zgDefaultRejoinScan
          CFI EndBlock cfiBlock352
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 3790 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock353 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?L_MOV_TO_X
        LJMP      ??Subroutine50_0 & 0xFFFF
          CFI EndBlock cfiBlock353
// 3791 
// 3792 /*********************************************************************
// 3793  * @fn      ZDApp_SetRejoinBackoffDuration()
// 3794  *
// 3795  * @brief   Sets rejoin backoff duration for rejoin for an end device
// 3796  *
// 3797  * @param   rejoinBackoffDuration - milliseconds
// 3798  *
// 3799  * @return  none
// 3800  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3801 void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
ZDApp_SetRejoinBackoffDuration:
          CFI Block cfiBlock354 Using cfiCommon0
          CFI Function ZDApp_SetRejoinBackoffDuration
        CODE
// 3802 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 3803   zgDefaultRejoinBackoff = rejoinBackoffDuration;
        MOV       DPTR,#zgDefaultRejoinBackoff
        SJMP      ?Subroutine8
// 3804 }
          CFI EndBlock cfiBlock354
// 3805 
// 3806 /*********************************************************************
// 3807  * @fn          ZDApp_SetParentAnnceTimer
// 3808  *
// 3809  * @brief       This function sets up the link status timer.
// 3810  *
// 3811  * @param       none
// 3812  *
// 3813  * @return      none
// 3814  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3815 void ZDApp_SetParentAnnceTimer( void )
ZDApp_SetParentAnnceTimer:
          CFI Block cfiBlock355 Using cfiCommon0
          CFI Function ZDApp_SetParentAnnceTimer
        CODE
// 3816 {
        FUNCALL ZDApp_SetParentAnnceTimer, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SetParentAnnceTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3817   // Parent Announce shall be sent no earlier than 10 seconds
// 3818   uint32 timeout = 10000;
// 3819 
// 3820   // Add with jitter of up to 10 seconds
// 3821   timeout += (osal_rand() & 0x2710);
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
// 3822 
// 3823   // Set timer to send the message
// 3824   osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       A,R2
        ANL       A,#0x10
        MOV       ?V0,A
        MOV       A,R3
        ANL       A,#0x27
        MOV       ?V1,A
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       DPTR,#__Constant_2710
        MOV       R0,#?V0
        LCALL     ?L_ADD_X
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R2,#0x0
        MOV       R3,#0x40
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        LJMP      ?Subroutine3 & 0xFFFF
// 3825 }
          CFI EndBlock cfiBlock355

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zdoDiscCounter>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for prevDevState>`:
        DATA8
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for devStartMode>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DATA8
        DB 0
        DATA16
        DW ZDAppTaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_SavedPollRate>`:
        DATA32
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4e2:
        DD 1250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_258:
        DD 600

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SecInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDOInitDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDOInitDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ReadNetworkRestoreState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppDetermineDeviceType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkStartEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceAuthEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNetworkStateEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitUserDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppCheckForHoldKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RegisterCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessNetworkJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ForceConcentratorChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ForceConcentratorChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerCancel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlBypass::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlStartup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkDiscoveryReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_JoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_JoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceConfigured::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceConfigured

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendEventMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkDiscoveryConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkDescListProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkDescListProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkFormationConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_beaconNotifyIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_beaconNotifyIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_StartRouterConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PermitJoinCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PermitJoinCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_AddrChangeIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ConcentratorIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SyncIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ManytoOneFailureIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PollConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AddrMgrWriteNVRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateDeviceIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeMatchDescRespPermission::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkStateUpdateCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NodeProfileSync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StartJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StopJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AnnounceNewAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendParentAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendParentAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NVUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_CoordStartPANIDConflictCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SrcRtgIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitZdoCBFunc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitZdoCBFunc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_DeregisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_DeregisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetPendingBindDefault::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetPendingBindDefault

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitPendingBind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitPendingBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_GetEmptyPendingBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_GetEmptyPendingBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessPendingBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessPendingBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AgeOutPendingBindEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AgeOutPendingBindEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinScanDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinScanDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetRejoinBackoffDuration::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetRejoinBackoffDuration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetParentAnnceTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetParentAnnceTimer

        END
// 3826 
// 3827 /*********************************************************************
// 3828 *********************************************************************/
// 
// 6 948 bytes in segment BANKED_CODE
//   462 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_I
//    15 bytes in segment XDATA_ID
//    24 bytes in segment XDATA_ROM_C
//    64 bytes in segment XDATA_Z
// 
//   477 bytes of CODE     memory
//     0 bytes of CONST    memory (+ 24 bytes shared)
// 6 948 bytes of HUGECODE memory
//    79 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
