///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              06/Nov/2019  12:21:35
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\Source\iic.c
//    Command line       =  
//        -f C:\Users\hhhho\AppData\Local\Temp\EW6969.tmp
//        (C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\Source\iic.c
//        -D ZTOOL_P1 -D SECURE=1 -D xNV_INIT -D xNV_RESTORE -D
//        LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D
//        FEATURE_SYSTEM_STATS -lC
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List
//        -lA
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\Source\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\Source\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List\iic.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME iic

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_SHL

        PUBLIC `??ALLInit::?relay`
        FUNCTION `??ALLInit::?relay`,0203H
        PUBLIC `??GetData::?relay`
        FUNCTION `??GetData::?relay`,0203H
        PUBLIC `??InitMPU6050::?relay`
        FUNCTION `??InitMPU6050::?relay`,0203H
        PUBLIC `??MPU6050_RecvACK::?relay`
        FUNCTION `??MPU6050_RecvACK::?relay`,0203H
        PUBLIC `??MPU6050_RecvByte::?relay`
        FUNCTION `??MPU6050_RecvByte::?relay`,0203H
        PUBLIC `??MPU6050_SendACK::?relay`
        FUNCTION `??MPU6050_SendACK::?relay`,0203H
        PUBLIC `??MPU6050_SendByte::?relay`
        FUNCTION `??MPU6050_SendByte::?relay`,0203H
        PUBLIC `??MPU6050_Start::?relay`
        FUNCTION `??MPU6050_Start::?relay`,0203H
        PUBLIC `??MPU6050_Stop::?relay`
        FUNCTION `??MPU6050_Stop::?relay`,0203H
        PUBLIC `??ReadSDA::?relay`
        FUNCTION `??ReadSDA::?relay`,0203H
        PUBLIC `??SDA_OUT::?relay`
        FUNCTION `??SDA_OUT::?relay`,0203H
        PUBLIC `??Single_ReadI2C::?relay`
        FUNCTION `??Single_ReadI2C::?relay`,0203H
        PUBLIC `??Single_WriteI2C::?relay`
        FUNCTION `??Single_WriteI2C::?relay`,0203H
        PUBLIC `??WriteSCL_0::?relay`
        FUNCTION `??WriteSCL_0::?relay`,0203H
        PUBLIC `??WriteSCL_1::?relay`
        FUNCTION `??WriteSCL_1::?relay`,0203H
        PUBLIC `??WriteSDA_0::?relay`
        FUNCTION `??WriteSDA_0::?relay`,0203H
        PUBLIC `??WriteSDA_1::?relay`
        FUNCTION `??WriteSDA_1::?relay`,0203H
        PUBLIC `??absi::?relay`
        FUNCTION `??absi::?relay`,0203H
        PUBLIC `??delay_us::?relay`
        FUNCTION `??delay_us::?relay`,0203H
        PUBLIC ALLInit
        FUNCTION ALLInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC GetData
        FUNCTION GetData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC InitMPU6050
        FUNCTION InitMPU6050,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MPU6050_RecvACK
        FUNCTION MPU6050_RecvACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MPU6050_RecvByte
        FUNCTION MPU6050_RecvByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MPU6050_SendACK
        FUNCTION MPU6050_SendACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MPU6050_SendByte
        FUNCTION MPU6050_SendByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MPU6050_Start
        FUNCTION MPU6050_Start,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MPU6050_Stop
        FUNCTION MPU6050_Stop,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC ReadSDA
        FUNCTION ReadSDA,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC SDA_OUT
        FUNCTION SDA_OUT,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Single_ReadI2C
        FUNCTION Single_ReadI2C,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Single_WriteI2C
        FUNCTION Single_WriteI2C,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC WriteSCL_0
        FUNCTION WriteSCL_0,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSCL_1
        FUNCTION WriteSCL_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSDA_0
        FUNCTION WriteSDA_0,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC WriteSDA_1
        FUNCTION WriteSDA_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK _A_P0
        PUBWEAK _A_PSW
        PUBLIC absi
        FUNCTION absi,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC delay_us
        FUNCTION delay_us,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
`??Onboard_wait::?relay` SYMBOL "?relay", Onboard_wait
ALLInit             SYMBOL "ALLInit"
`??ALLInit::?relay` SYMBOL "?relay", ALLInit
GetData             SYMBOL "GetData"
`??GetData::?relay` SYMBOL "?relay", GetData
InitMPU6050         SYMBOL "InitMPU6050"
`??InitMPU6050::?relay` SYMBOL "?relay", InitMPU6050
MPU6050_RecvACK     SYMBOL "MPU6050_RecvACK"
`??MPU6050_RecvACK::?relay` SYMBOL "?relay", MPU6050_RecvACK
MPU6050_RecvByte    SYMBOL "MPU6050_RecvByte"
`??MPU6050_RecvByte::?relay` SYMBOL "?relay", MPU6050_RecvByte
MPU6050_SendACK     SYMBOL "MPU6050_SendACK"
`??MPU6050_SendACK::?relay` SYMBOL "?relay", MPU6050_SendACK
MPU6050_SendByte    SYMBOL "MPU6050_SendByte"
`??MPU6050_SendByte::?relay` SYMBOL "?relay", MPU6050_SendByte
MPU6050_Start       SYMBOL "MPU6050_Start"
`??MPU6050_Start::?relay` SYMBOL "?relay", MPU6050_Start
MPU6050_Stop        SYMBOL "MPU6050_Stop"
`??MPU6050_Stop::?relay` SYMBOL "?relay", MPU6050_Stop
ReadSDA             SYMBOL "ReadSDA"
`??ReadSDA::?relay` SYMBOL "?relay", ReadSDA
SDA_OUT             SYMBOL "SDA_OUT"
`??SDA_OUT::?relay` SYMBOL "?relay", SDA_OUT
Single_ReadI2C      SYMBOL "Single_ReadI2C"
`??Single_ReadI2C::?relay` SYMBOL "?relay", Single_ReadI2C
Single_WriteI2C     SYMBOL "Single_WriteI2C"
`??Single_WriteI2C::?relay` SYMBOL "?relay", Single_WriteI2C
WriteSCL_0          SYMBOL "WriteSCL_0"
`??WriteSCL_0::?relay` SYMBOL "?relay", WriteSCL_0
WriteSCL_1          SYMBOL "WriteSCL_1"
`??WriteSCL_1::?relay` SYMBOL "?relay", WriteSCL_1
WriteSDA_0          SYMBOL "WriteSDA_0"
`??WriteSDA_0::?relay` SYMBOL "?relay", WriteSDA_0
WriteSDA_1          SYMBOL "WriteSDA_1"
`??WriteSDA_1::?relay` SYMBOL "?relay", WriteSDA_1
absi                SYMBOL "absi"
`??absi::?relay`    SYMBOL "?relay", absi
delay_us            SYMBOL "delay_us"
`??delay_us::?relay` SYMBOL "?relay", delay_us

        EXTERN `??Onboard_wait::?relay`
        FUNCTION `??Onboard_wait::?relay`,00H
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\hhhho\Desktop\毕设\Z-Stack1.2.2a-spp-v001\Z-Stack1.2.2a-spp-v001\Projects\zstack\Prj\Source\iic.c
//    1 
//    2 /*描述：显示加速度计和陀螺仪的6位原始数据
//    3 ****************************************/
//    4 #include "ioCC2530.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d0H
// union <unnamed> volatile __sfr _A_PSW
_A_PSW:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    5 #include "iic.h"
//    6 #include "OnBoard.h"
//    7 #include "hal_types.h"
//    8  
//    9 
//   10 /*
//   11   引脚定义
//   12 */
//   13 #define SDA P0_4
//   14 #define SCL P0_5
//   15 
//   16 
//   17 
//   18 
//   19  
//   20 
//   21  
//   22  
//   23  
//   24  

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   25 void ALLInit(void)
ALLInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ALLInit
        CODE
//   26 {
        FUNCALL ALLInit, InitMPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   27 //   Init_IO();
//   28    InitMPU6050();
        ; Setup parameters for call to function InitMPU6050
        LCALL     `??InitMPU6050::?relay`; Banked call to: InitMPU6050
//   29 }
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock0
//   30  
//   31  
//   32 /****************us延时函数 32M晶振 单周期MCU********************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   33 void delay_us(unsigned int u)
delay_us:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function delay_us
        CODE
//   34 {
        FUNCALL delay_us, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   35    u=4*u;
//   36    MicroWait(u);
        ; Setup parameters for call to function Onboard_wait
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   37 }
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   38  
//   39  
//   40 /*****************************MPU6050*******************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   41 void WriteSDA_0(void) 
WriteSDA_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function WriteSDA_0
        CODE
//   42 {
        ; Saved register size: 0
        ; Auto size: 0
//   43     P0SEL&=~0x10;
        LCALL     ?Subroutine5 & 0xFFFF
//   44     P0DIR|=0x10;
//   45     SDA=0;
??CrossCallReturnLabel_5:
        CLR       0x80.4
//   46 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock2
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
//   47  
//   48  

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   49 void WriteSDA_1(void) 
WriteSDA_1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function WriteSDA_1
        CODE
//   50 {
        ; Saved register size: 0
        ; Auto size: 0
//   51     P0SEL&=~0x10;
        LCALL     ?Subroutine5 & 0xFFFF
//   52     P0DIR|=0x10;
//   53     SDA=1;
??CrossCallReturnLabel_6:
        SETB      0x80.4
//   54 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock3
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function WriteSDA_0
          CFI Conditional ??CrossCallReturnLabel_5
          CFI CFA_SP SP+-5
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function WriteSDA_1
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond5) CFA_SP SP+-5
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function SDA_OUT
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond6) CFA_SP SP+-5
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        ANL       0xf3,#0xef
        ORL       0xfd,#0x10
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//   55     

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   56 void WriteSCL_0(void)  
WriteSCL_0:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function WriteSCL_0
        CODE
//   57 {
        ; Saved register size: 0
        ; Auto size: 0
//   58     P0SEL&=~0x20;
        ANL       0xf3,#0xdf
//   59     P0DIR|=0x20;
        ORL       0xfd,#0x20
//   60     SCL=0;
        CLR       0x80.5
//   61 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock8
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
//   62  
//   63  

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   64 void WriteSCL_1(void)  
WriteSCL_1:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function WriteSCL_1
        CODE
//   65 {
        ; Saved register size: 0
        ; Auto size: 0
//   66     P0SEL&=~0x20;
        ANL       0xf3,#0xdf
//   67     P0DIR|=0x20;
        ORL       0xfd,#0x20
//   68     SCL=1;
        SETB      0x80.5
//   69 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock9
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
//   70 
//   71  

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   72 void ReadSDA(void)//sda输入,=0
ReadSDA:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ReadSDA
        CODE
//   73 {
        ; Saved register size: 0
        ; Auto size: 0
//   74     P0SEL&=~0x10;P0DIR&=~0x10;
        ANL       0xf3,#0xef
        ANL       0xfd,#0xef
//   75 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
        REQUIRE P0SEL
        REQUIRE P0DIR
//   76 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   77 void SDA_OUT(void)//sda输出,=1
SDA_OUT:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function SDA_OUT
        CODE
//   78 {
        ; Saved register size: 0
        ; Auto size: 0
//   79     P0SEL&=~0x10;
        LCALL     ?Subroutine5 & 0xFFFF
//   80     P0DIR|=0x10;
//   81 }
??CrossCallReturnLabel_7:
        LJMP      ?BRET
          CFI EndBlock cfiBlock11
        REQUIRE P0SEL
        REQUIRE P0DIR
//   82  
//   83 //void Init_IO(void)
//   84 //{
//   85 //  P0DIR|=0xc0;
//   86 //  P0SEL&=0x3f;
//   87 //}
//   88 // 
//   89 /**************************************
//   90 起始信号
//   91 **************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   92 void MPU6050_Start(void)  
MPU6050_Start:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function MPU6050_Start
        CODE
//   93 {
        FUNCALL MPU6050_Start, WriteSDA_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, WriteSDA_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, WriteSCL_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Start, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   94     WriteSDA_1();
        ; Setup parameters for call to function WriteSDA_1
        LCALL     `??WriteSDA_1::?relay`; Banked call to: WriteSDA_1
//   95     WriteSCL_1();
        ; Setup parameters for call to function WriteSCL_1
        LCALL     ?Subroutine3 & 0xFFFF
//   96     delay_us(5);
//   97     WriteSDA_0();
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function WriteSDA_0
        LCALL     `??WriteSDA_0::?relay`; Banked call to: WriteSDA_0
//   98     delay_us(5);
        ; Setup parameters for call to function delay_us
        LCALL     ??Subroutine6_0 & 0xFFFF
//   99     WriteSCL_0();
//  100     delay_us(5);
//  101 }
??CrossCallReturnLabel_10:
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock12
//  102  
//  103  
//  104 /**************************************
//  105 停止信号
//  106 **************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  107 void MPU6050_Stop()  
MPU6050_Stop:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function MPU6050_Stop
        CODE
//  108 {    
        FUNCALL MPU6050_Stop, WriteSDA_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Stop, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Stop, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_Stop, WriteSDA_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  109    WriteSDA_0();
        ; Setup parameters for call to function WriteSDA_0
        LCALL     `??WriteSDA_0::?relay`; Banked call to: WriteSDA_0
//  110    WriteSCL_1();
        ; Setup parameters for call to function WriteSCL_1
        LCALL     ?Subroutine3 & 0xFFFF
//  111    delay_us(5);
//  112    WriteSDA_1();
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function WriteSDA_1
        LCALL     `??WriteSDA_1::?relay`; Banked call to: WriteSDA_1
//  113 }
          CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function MPU6050_Start
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function MPU6050_Stop
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond16) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond16) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond16) CFA_SP SP+-7
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MPU6050_RecvACK
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond17) CFA_SP SP+-7
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        LCALL     `??WriteSCL_1::?relay`; Banked call to: WriteSCL_1
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??delay_us::?relay`; Banked call to: delay_us
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  114  
//  115  
//  116 //I2C发送应答信号
//  117 //入口参数:ack (0:ACK 1:NAK)

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  118 void MPU6050_SendACK(unsigned char ack)
MPU6050_SendACK:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function MPU6050_SendACK
        CODE
//  119 {
        FUNCALL MPU6050_SendACK, WriteSCL_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendACK, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendACK, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendACK, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  120     
//  121     SDA=ack;                     //写应答信号
        MOV       C,0xE0 /* A   */.0
        MOV       0x80.4,C
//  122     WriteSCL_1();                   //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL     ?Subroutine2 & 0xFFFF
//  123     delay_us(5);//Delay5us();    //延时
//  124     WriteSCL_0();                   //拉低时钟线
//  125     delay_us(5);//Delay5us();    //延时
//  126 }
??CrossCallReturnLabel_8:
        SJMP      ??Subroutine8_0
          CFI EndBlock cfiBlock19
        REQUIRE _A_P0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function MPU6050_SendACK
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MPU6050_SendByte
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        LCALL     `??WriteSCL_1::?relay`; Banked call to: WriteSCL_1
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine6_0:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function MPU6050_Start
          CFI Conditional ??CrossCallReturnLabel_10
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MPU6050_SendACK
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function MPU6050_SendByte
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??delay_us::?relay`; Banked call to: delay_us
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
        ; Setup parameters for call to function WriteSCL_0
        ; Setup parameters for call to function WriteSCL_0
        ; Setup parameters for call to function WriteSCL_0
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine7_0:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function MPU6050_RecvACK
          CFI Conditional ??CrossCallReturnLabel_11
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MPU6050_Start
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond28) CFA_SP SP+-7
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function MPU6050_SendACK
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MPU6050_SendByte
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        LCALL     `??WriteSCL_0::?relay`; Banked call to: WriteSCL_0
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        ; Setup parameters for call to function delay_us
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??delay_us::?relay`; Banked call to: delay_us
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
//  127  
//  128  
//  129 /**************************************
//  130 发送应答信号
//  131 **************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  132 unsigned char MPU6050_RecvACK()
MPU6050_RecvACK:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function MPU6050_RecvACK
        CODE
//  133 {
        FUNCALL MPU6050_RecvACK, ReadSDA
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvACK, WriteSCL_1
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvACK, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvACK, WriteSCL_0
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvACK, delay_us
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  134     ReadSDA();
        ; Setup parameters for call to function ReadSDA
        LCALL     `??ReadSDA::?relay`; Banked call to: ReadSDA
//  135     WriteSCL_1();                       //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL     ?Subroutine3 & 0xFFFF
//  136     delay_us(5);//Delay5us();    //延时
//  137     CY=SDA;                      //读应答信号
??CrossCallReturnLabel_2:
        MOV       C,0x80.4
        MOV       0xd0.7,C
//  138     WriteSCL_0();                       //拉低时钟线
        ; Setup parameters for call to function WriteSCL_0
        LCALL     ??Subroutine7_0 & 0xFFFF
//  139     delay_us(5);//Delay5us();    //延时
//  140     P0DIR|=0x00;
??CrossCallReturnLabel_11:
        MOV       0xfd,0xfd
//  141     return CY;
        MOV       C,0xd0.7
        CLR       A
        RLC       A
        MOV       R1,A
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock32
        REQUIRE _A_PSW
        REQUIRE _A_P0
        REQUIRE P0DIR
//  142 }
//  143  
//  144  
//  145 /**************************************
//  146 向IIC总线发送一个字节数据
//  147 **************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  148 void MPU6050_SendByte(unsigned char data)
MPU6050_SendByte:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function MPU6050_SendByte
        CODE
//  149 {
        FUNCALL MPU6050_SendByte, SDA_OUT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, WriteSDA_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, WriteSDA_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, WriteSCL_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, WriteSCL_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_SendByte, MPU6050_RecvACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
//  150     unsigned char i;
//  151     SDA_OUT();
        ; Setup parameters for call to function SDA_OUT
        LCALL     `??SDA_OUT::?relay`; Banked call to: SDA_OUT
//  152     
//  153     for(i=0;i<8;i++)         //8位计数器
        MOV       R6,#0x8
//  154     {       
//  155         if(data&0x80)
??MPU6050_SendByte_0:
        MOV       A,R7
        MOV       C,0xE0 /* A   */.7
        JNC       ??MPU6050_SendByte_1
//  156         {WriteSDA_1();}
        ; Setup parameters for call to function WriteSDA_1
        LCALL     `??WriteSDA_1::?relay`; Banked call to: WriteSDA_1
        SJMP      ??MPU6050_SendByte_2
//  157         else 
//  158         {WriteSDA_0();}
??MPU6050_SendByte_1:
        ; Setup parameters for call to function WriteSDA_0
        LCALL     `??WriteSDA_0::?relay`; Banked call to: WriteSDA_0
//  159         
//  160         data<<=1;
??MPU6050_SendByte_2:
        MOV       A,R7
        CLR       C
        RLC       A
        MOV       R7,A
//  161         WriteSCL_1();            //拉高时钟线
        ; Setup parameters for call to function WriteSCL_1
        LCALL     ?Subroutine2 & 0xFFFF
//  162         delay_us(5);          //延时
//  163         WriteSCL_0();            //拉低时钟线
//  164         delay_us(5);          //延时
//  165     }
??CrossCallReturnLabel_9:
        DEC       R6
        MOV       A,R6
        JNZ       ??MPU6050_SendByte_0
//  166     MPU6050_RecvACK();
        ; Setup parameters for call to function MPU6050_RecvACK
        LCALL     `??MPU6050_RecvACK::?relay`; Banked call to: MPU6050_RecvACK
//  167 }
        SJMP      ??Subroutine8_0
          CFI EndBlock cfiBlock33
//  168  
//  169  
//  170 /**************************************
//  171 从IIC总线接收一个字节数据
//  172 **************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,R6
        MOV       R1,A
          CFI EndBlock cfiBlock34
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine8_0:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock35

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  173 unsigned char MPU6050_RecvByte()
MPU6050_RecvByte:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function MPU6050_RecvByte
        CODE
//  174 {
        FUNCALL MPU6050_RecvByte, WriteSDA_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MPU6050_RecvByte, delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  175     unsigned char i;
//  176     unsigned char dat = 0;
        MOV       R6,#0x0
//  177     WriteSDA_1();                  //使能内部上拉,准备读取数据,
        ; Setup parameters for call to function WriteSDA_1
        LCALL     `??WriteSDA_1::?relay`; Banked call to: WriteSDA_1
//  178     for (i=0; i<8; i++)         //8位计数器
        MOV       R7,#0x8
//  179     {
//  180         dat <<= 1;
//  181         SCL = 1;                //拉高时钟线
??MPU6050_RecvByte_0:
        SETB      0x80.5
//  182         delay_us(5);                 //延时
        ; Setup parameters for call to function delay_us
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??delay_us::?relay`; Banked call to: delay_us
//  183         dat |= SDA;             //读数据               
        MOV       C,0x80.4
        CLR       A
        RLC       A
        MOV       R0,A
        MOV       A,R6
        RLC       A
        ORL       A,R0
        MOV       R6,A
//  184         SCL = 0;                //拉低时钟线
        CLR       0x80.5
//  185          delay_us(5);                 //延时
        ; Setup parameters for call to function delay_us
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??delay_us::?relay`; Banked call to: delay_us
//  186     }
        DJNZ      R7,??MPU6050_RecvByte_0
//  187     return dat;
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock36
        REQUIRE _A_P0
//  188  
//  189 }
//  190  
//  191  
//  192 //******单字节写入*******************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  193 void Single_WriteI2C(unsigned char REG_Address,unsigned char REG_data)
Single_WriteI2C:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function Single_WriteI2C
        CODE
//  194 {
        FUNCALL Single_WriteI2C, MPU6050_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_WriteI2C, MPU6050_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
        MOV       A,R2
        MOV       R6,A
//  195     MPU6050_Start();                  //起始信号
        ; Setup parameters for call to function MPU6050_Start
        LCALL     ?Subroutine4 & 0xFFFF
//  196     MPU6050_SendByte(0xD0);   //发送设备地址+写信号
//  197     MPU6050_SendByte(REG_Address);    //内部寄存器地址，
//  198     MPU6050_SendByte(REG_data);       //内部寄存器数据，
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function MPU6050_SendByte
        MOV       A,R6
        MOV       R1,A
        LCALL     `??MPU6050_SendByte::?relay`; Banked call to: MPU6050_SendByte
//  199     MPU6050_Stop();                   //发送停止信号
        ; Setup parameters for call to function MPU6050_Stop
        LCALL     `??MPU6050_Stop::?relay`; Banked call to: MPU6050_Stop
//  200 }
        SJMP      ??Subroutine8_0
          CFI EndBlock cfiBlock37
//  201  
//  202  
//  203 //********单字节读取*****************************************

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  204 unsigned char Single_ReadI2C(unsigned char REG_Address)
Single_ReadI2C:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function Single_ReadI2C
        CODE
//  205 {
        FUNCALL Single_ReadI2C, MPU6050_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, MPU6050_Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, MPU6050_SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, MPU6050_RecvByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, MPU6050_SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_ReadI2C, MPU6050_Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
//  206 unsigned char REG_data;
//  207 MPU6050_Start();                   //起始信号
        ; Setup parameters for call to function MPU6050_Start
        LCALL     ?Subroutine4 & 0xFFFF
//  208 MPU6050_SendByte(0xD0);    //发送设备地址+写信号
//  209 MPU6050_SendByte(REG_Address);     //发送存储单元地址，从0开始	
//  210 MPU6050_Start();                   //起始信号
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function MPU6050_Start
        LCALL     `??MPU6050_Start::?relay`; Banked call to: MPU6050_Start
//  211 MPU6050_SendByte(0xD0+1);  //发送设备地址+读信号
        ; Setup parameters for call to function MPU6050_SendByte
        MOV       R1,#-0x2f
        LCALL     `??MPU6050_SendByte::?relay`; Banked call to: MPU6050_SendByte
//  212 REG_data=MPU6050_RecvByte();       //读出寄存器数据
        ; Setup parameters for call to function MPU6050_RecvByte
        LCALL     `??MPU6050_RecvByte::?relay`; Banked call to: MPU6050_RecvByte
        MOV       A,R1
        MOV       R6,A
//  213 MPU6050_SendACK(1);                //接收应答信号
        ; Setup parameters for call to function MPU6050_SendACK
        MOV       R1,#0x1
        LCALL     `??MPU6050_SendACK::?relay`; Banked call to: MPU6050_SendACK
//  214 MPU6050_Stop();                    //停止信号
        ; Setup parameters for call to function MPU6050_Stop
        LCALL     `??MPU6050_Stop::?relay`; Banked call to: MPU6050_Stop
//  215 return REG_data;
        SJMP      ?Subroutine1
//  216 }
          CFI EndBlock cfiBlock38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function Single_WriteI2C
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function Single_ReadI2C
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        LCALL     `??MPU6050_Start::?relay`; Banked call to: MPU6050_Start
        ; Setup parameters for call to function MPU6050_SendByte
        ; Setup parameters for call to function MPU6050_SendByte
        MOV       R1,#-0x30
        LCALL     `??MPU6050_SendByte::?relay`; Banked call to: MPU6050_SendByte
        ; Setup parameters for call to function MPU6050_SendByte
        ; Setup parameters for call to function MPU6050_SendByte
        MOV       A,R7
        MOV       R1,A
        LCALL     `??MPU6050_SendByte::?relay`; Banked call to: MPU6050_SendByte
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
//  217 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  218 void InitMPU6050()
InitMPU6050:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function InitMPU6050
        CODE
//  219 {
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_WriteI2C
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  220 	Single_WriteI2C(PWR_MGMT_1, 0x00);	//解除休眠状态
        ; Setup parameters for call to function Single_WriteI2C
        MOV       R2,#0x0
        MOV       R1,#0x6b
        LCALL     `??Single_WriteI2C::?relay`; Banked call to: Single_WriteI2C
//  221 	Single_WriteI2C(SMPLRT_DIV, 0x07);
        ; Setup parameters for call to function Single_WriteI2C
        MOV       R2,#0x7
        MOV       R1,#0x19
        LCALL     `??Single_WriteI2C::?relay`; Banked call to: Single_WriteI2C
//  222 	Single_WriteI2C(CONFIG, 0x06);
        ; Setup parameters for call to function Single_WriteI2C
        MOV       R2,#0x6
        MOV       R1,#0x1a
        LCALL     `??Single_WriteI2C::?relay`; Banked call to: Single_WriteI2C
//  223 	Single_WriteI2C(GYRO_CONFIG, 0x18);
        ; Setup parameters for call to function Single_WriteI2C
        MOV       R2,#0x18
        MOV       R1,#0x1b
        LCALL     `??Single_WriteI2C::?relay`; Banked call to: Single_WriteI2C
//  224 	Single_WriteI2C(ACCEL_CONFIG, 0x01);
        ; Setup parameters for call to function Single_WriteI2C
        MOV       R2,#0x1
        MOV       R1,#0x1c
        LCALL     `??Single_WriteI2C::?relay`; Banked call to: Single_WriteI2C
//  225 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock42
//  226 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  227 int GetData(unsigned char REG_Address)
GetData:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function GetData
        CODE
//  228 {
        FUNCALL GetData, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetData, Single_ReadI2C
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       ?V0,R1
//  229 	unsigned char H,L;
//  230 	H=Single_ReadI2C(REG_Address);
        ; Setup parameters for call to function Single_ReadI2C
        LCALL     `??Single_ReadI2C::?relay`; Banked call to: Single_ReadI2C
        MOV       A,R1
//  231 	L=Single_ReadI2C(REG_Address+1);
//  232 	return (H<<8)+L;   //合成数据
        MOV       R7,A
        ; Setup parameters for call to function Single_ReadI2C
        MOV       A,#0x1
        ADD       A,?V0
        MOV       R1,A
        LCALL     `??Single_ReadI2C::?relay`; Banked call to: Single_ReadI2C
        MOV       A,R1
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LJMP      ??Subroutine8_0 & 0xFFFF
//  233 }
          CFI EndBlock cfiBlock43
//  234 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  235 unsigned int absi( int val) 
absi:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function absi
        CODE
//  236 {
        ; Saved register size: 0
        ; Auto size: 0
//  237   if (val<0) return -1*val;
        CLR       C
        MOV       A,R3
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       ??absi_0
        CLR       C
        CLR       A
        SUBB      A,R2
        MOV       R0,A
        CLR       A
        SUBB      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
//  238   else return val;
??absi_0:
        LJMP      ?BRET
//  239   
//  240 }
          CFI EndBlock cfiBlock44

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ALLInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ALLInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??delay_us::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??WriteSDA_0::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    WriteSDA_0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??WriteSDA_1::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    WriteSDA_1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??WriteSCL_0::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    WriteSCL_0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??WriteSCL_1::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    WriteSCL_1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ReadSDA::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ReadSDA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SDA_OUT::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SDA_OUT

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MPU6050_Start::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MPU6050_Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MPU6050_Stop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MPU6050_Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MPU6050_SendACK::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MPU6050_SendACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MPU6050_RecvACK::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MPU6050_RecvACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MPU6050_SendByte::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MPU6050_SendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MPU6050_RecvByte::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MPU6050_RecvByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Single_WriteI2C::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Single_WriteI2C

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Single_ReadI2C::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Single_ReadI2C

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??InitMPU6050::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    InitMPU6050

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GetData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??absi::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    absi

        END
//  241 
//  242 
// 
// 463 bytes in segment BANKED_CODE
// 114 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
// 
// 114 bytes of CODE     memory
//   0 bytes of DATA     memory (+ 4 bytes shared)
// 463 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
