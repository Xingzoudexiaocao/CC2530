###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Oct/2019  14:59:36
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f C:\Users\hhhho\AppData\Local\Temp\EW47F2.tmp
#        (C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\zmac\f8w\zmac_cb.c
#        -D ZTOOL_P1 -D SECURE=1 -D xNV_INIT -D xNV_RESTORE -D
#        LCD_SUPPORTED=FALSE -D MULTICAST_ENABLED=FALSE -D FEATURE_SYSTEM_STATS
#        -lC
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\List\zmac_cb.lst
#    Object file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\CoordinatorEB\Obj\zmac_cb.r51
#
###############################################################################

C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2014-12-03 16:04:46 -0800 (Wed, 03 Dec 2014) $
      4            Revision:       $Revision: 41329 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_security.h"
     61          
     62          #include "mac_main.h"
     63          #ifdef FEATURE_DUAL_MAC
     64          #include "dmmgr.h"
     65          #endif /* FEATURE_DUAL_MAC */
     66          extern void *ZMac_ScanBuf;
     67          
     68          /********************************************************************************************************
     69           *                                               CONSTANTS
     70           ********************************************************************************************************/
     71          
     72          #if !defined NONWK
     73          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     74          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   33           DB 51
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   0E           DB 14
     75            0,
     76            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     77            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     78            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     79            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     80            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     81            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     82            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     83            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     84            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     85            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     86            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     87            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     88            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     89            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     90            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     91            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     92          };
     93          #endif /* !defined NONWK */
     94          
     95          /********************************************************************************************************
     96           *                                               LOCALS
     97           ********************************************************************************************************/
     98          
     99          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    101          
    102          #if !defined NONWK
    103          /* LQI Adjustment Function */
    104          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    105          #endif
    106          
    107          /*********************************************************************
    108           * ZMAC Function Pointers
    109           */
    110          
    111          /*
    112           * ZMac Application callback function. This function will be called
    113           * for every MAC message that is received over-the-air or generated
    114           * locally by MAC for the application.
    115           *
    116           * The callback function should return TRUE if it has handled the
    117           * MAC message and no further action should be taken with it. It
    118           * should return FALSE if it has not handled the MAC message and
    119           * normal processing should take place.
    120           *
    121           * NOTE: The processing in this function should be kept to the
    122           *       minimum.
    123           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    125          
    126          
    127          /*********************************************************************
    128           * ZMAC Functions
    129           */
    130          
    131          /**************************************************************************************************
    132           * @fn       MAC_CbackEvent()
    133           *
    134           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    135           *
    136           * @param    pData - pointer to macCbackEvent_t
    137           *
    138           * @return   none
    139           *************************************************************************************************/
    140          #ifdef FEATURE_DUAL_MAC
    141          void ZMacCbackEventHdlr(macCbackEvent_t *pData)
    142          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    143          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    144          #endif /* FEATURE_DUAL_MAC */
    145          #ifndef MT_MAC_CB_FUNC
    146          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
    147          #if !defined NONWK
    148            uint8 event = pData->hdr.event;
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F5..         MOV       ?V2,A
    149            uint16 tmp = zmacCBSizeTable[event];
   \   00001B   F8           MOV       R0,A
   \   00001C   74..         MOV       A,#zmacCBSizeTable & 0xff
   \   00001E   28           ADD       A,R0
   \   00001F   F582         MOV       DPL,A
   \   000021   E4           CLR       A
   \   000022   34..         ADDC      A,#(zmacCBSizeTable >> 8) & 0xff
   \   000024   F583         MOV       DPH,A
   \   000026   E4           CLR       A
   \   000027   93           MOVC      A,@A+DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   E5..         MOV       A,?V0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
    150            macCbackEvent_t *msgPtr;
    151          
    152            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    153             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    154             */
    155            if (tmp == 0)
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    156            {
    157              return;
    158            }
    159          
    160            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    161            if ( event == MAC_MCPS_DATA_IND )
   \   000040   740D         MOV       A,#0xd
   \   000042   68           XRL       A,R0
   \   000043   7046         JNZ       ??MAC_CbackEvent_1
    162            {
    163          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    164              // This feature limits the number of unprocessed MAC Data Indications that can be queued
    165              // into the Network Task's OSAL message queue. To enable ZMAC_MAX_DATA_IND filtering, the
    166              // command-line option specifies the threshold setting where MAC_MCPS_DATD_IND callback
    167              // messages will be dropped. For example, adding ZMAC_MAX_DATA_IND=5 to the commnad-line
    168              // options allows up to five messages to be passed up and queued in the NWK layer buffer.
    169              uint8 diCount = osal_msg_count( NWK_TaskID, MAC_MCPS_DATA_IND );
    170          #endif // ZMAC_MAX_DATA_IND
    171              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   000045                ; Setup parameters for call to function MAC_MlmeGetReq
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   7953         MOV       R1,#0x53
   \   00004C   12....       LCALL     `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    172              if ( (tmp == INVALID_NODE_ADDR) ||
    173                   (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    174          #if defined ( ZMAC_MAX_DATA_IND ) && ( ZMAC_MAX_DATA_IND >= 1 )
    175                   (diCount > ZMAC_MAX_DATA_IND) ||
    176          #endif // ZMAC_MAX_DATA_IND
    177                   (pData->dataInd.msdu.len == 0) )
   \   00004F   7402         MOV       A,#0x2
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   64FE         XRL       A,#0xfe
   \   000057   7003         JNZ       ??MAC_CbackEvent_2
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F4           CPL       A
   \                     ??MAC_CbackEvent_2:
   \   00005C   7003         JNZ       $+5
   \   00005E   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000061   7402         MOV       A,#0x2
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F4           CPL       A
   \   000068   7003         JNZ       ??MAC_CbackEvent_4
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F4           CPL       A
   \                     ??MAC_CbackEvent_4:
   \   00006D   7003         JNZ       $+5
   \   00006F   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
   \   000072   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   7003         JNZ       $+5
   \   00007A   02....       LJMP      ??MAC_CbackEvent_3 & 0xFFFF
    178              {
    179                mac_msg_deallocate( (uint8 **)&pData );
    180                return;
    181              }
    182              msgPtr = pData;
   \   00007D   85..82       MOV       DPL,?XSP + 0
   \   000080   85..83       MOV       DPH,?XSP + 1
   \   000083   E0           MOVX      A,@DPTR
   \   000084   FE           MOV       R6,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   FF           MOV       R7,A
   \   000088   02....       LJMP      ??MAC_CbackEvent_5 & 0xFFFF
    183            }
    184            else
    185            {
    186              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   00008B   7405         MOV       A,#0x5
   \   00008D   68           XRL       A,R0
   \   00008E   7015         JNZ       ??MAC_CbackEvent_6
    187              {
    188                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F8           MOV       R0,A
   \   000098   12....       LCALL     ?Subroutine5 & 0xFFFF
    189              }
   \                     ??CrossCallReturnLabel_9:
   \   00009B   7900         MOV       R1,#0x0
   \   00009D   2421         ADD       A,#0x21
   \   00009F   F8           MOV       R0,A
   \   0000A0   502D         JNC       ??MAC_CbackEvent_7
   \   0000A2   09           INC       R1
   \   0000A3   802A         SJMP      ??MAC_CbackEvent_7
    190              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   0000A5   7407         MOV       A,#0x7
   \   0000A7   68           XRL       A,R0
   \   0000A8   7031         JNZ       ??MAC_CbackEvent_8
    191              {
    192                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000AA   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   700F         JNZ       ??MAC_CbackEvent_9
    193                {
    194                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000B0   7402         MOV       A,#0x2
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   241B         ADD       A,#0x1b
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   3400         ADDC      A,#0x0
   \   0000BD   801B         SJMP      ??MAC_CbackEvent_10
    195                }
    196                else
    197                {
    198                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000BF   85..82       MOV       DPL,?XSP + 0
   \   0000C2   85..83       MOV       DPH,?XSP + 1
   \   0000C5   12....       LCALL     ?Subroutine5 & 0xFFFF
    199                }
    200              }
   \                     ??CrossCallReturnLabel_10:
   \   0000C8   75F021       MOV       B,#0x21
   \   0000CB   A4           MUL       AB
   \   0000CC   F8           MOV       R0,A
   \   0000CD   A9F0         MOV       R1,B
   \                     ??MAC_CbackEvent_7:
   \   0000CF   7402         MOV       A,#0x2
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   28           ADD       A,R0
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   39           ADDC      A,R1
   \                     ??MAC_CbackEvent_10:
   \   0000DA   F0           MOVX      @DPTR,A
    201          
    202              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   0000DB                ; Setup parameters for call to function osal_msg_allocate
   \   0000DB   7402         MOV       A,#0x2
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000E3   7035         JNZ       ??MAC_CbackEvent_11
    203              {
    204                // Not enough memory. If data confirm - try again
    205                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   0000E5   740C         MOV       A,#0xc
   \   0000E7   65..         XRL       A,?V2
   \   0000E9   6003         JZ        $+5
   \   0000EB   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
   \   0000EE   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F1   7003         JNZ       $+5
   \   0000F3   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    206                {
    207                  halIntState_t intState;
    208          
    209                  // This is not normally deallocated here because the pZMac_AppCallback()
    210                  // application may need it.
    211                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000F6   A2AF         MOV       C,0xa8.7
   \   0000F8   E4           CLR       A
   \   0000F9   33           RLC       A
   \   0000FA   F5..         MOV       ?V3,A
   \   0000FC   C2AF         CLR       0xa8.7
    212          
    213                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   0000FE                ; Setup parameters for call to function mac_msg_deallocate
   \   0000FE   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    214                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   000101                ; Setup parameters for call to function osal_msg_allocate
   \   000101   7402         MOV       A,#0x2
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000109   7009         JNZ       ??MAC_CbackEvent_12
    215                  {
    216                    // Still no allocation, something is wrong
    217                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00010B   E5..         MOV       A,?V3
   \   00010D   A2E0         MOV       C,0xE0 /* A   */.0
   \   00010F   92AF         MOV       0xa8.7,C
    218                    return;
   \   000111   02....       LJMP      ??MAC_CbackEvent_0 & 0xFFFF
    219                  }
    220                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   000114   E5..         MOV       A,?V3
   \   000116   A2E0         MOV       C,0xE0 /* A   */.0
   \   000118   92AF         MOV       0xa8.7,C
    221                }
    222                else
    223                {
    224                  // This message is dropped
    225                  return;
    226                }
    227              }
    228              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   00011A                ; Setup parameters for call to function osal_memcpy
   \   00011A   85..82       MOV       DPL,?XSP + 0
   \   00011D   85..83       MOV       DPH,?XSP + 1
   \   000120   E0           MOVX      A,@DPTR
   \   000121   F5..         MOV       ?V4,A
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F5..         MOV       ?V5,A
   \   000127   75..00       MOV       ?V6,#0x0
   \   00012A   78..         MOV       R0,#?V4
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012F   AC..         MOV       R4,?V0
   \   000131   7D00         MOV       R5,#0x0
   \   000133   EE           MOV       A,R6
   \   000134   FA           MOV       R2,A
   \   000135   EF           MOV       A,R7
   \   000136   FB           MOV       R3,A
   \   000137   12....       LCALL     ??Subroutine13_0 & 0xFFFF
    229            }
   \                     ??CrossCallReturnLabel_23:
   \   00013A   12....       LCALL     ?DEALLOC_XSTACK8
    230          
    231            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   00013D   EE           MOV       A,R6
   \   00013E   2409         ADD       A,#0x9
   \   000140   F5..         MOV       ?V8,A
   \   000142   E4           CLR       A
   \   000143   3F           ADDC      A,R7
   \   000144   F5..         MOV       ?V9,A
   \   000146   EE           MOV       A,R6
   \   000147   2408         ADD       A,#0x8
   \   000149   F5..         MOV       ?V12,A
   \   00014B   E4           CLR       A
   \   00014C   3F           ADDC      A,R7
   \   00014D   F5..         MOV       ?V13,A
   \   00014F   7405         MOV       A,#0x5
   \   000151   65..         XRL       A,?V2
   \   000153   706F         JNZ       ??MAC_CbackEvent_13
    232            {
    233              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    234          
    235              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000155   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000158   EE           MOV       A,R6
   \   000159   2403         ADD       A,#0x3
   \   00015B   F5..         MOV       ?V10,A
   \   00015D   E4           CLR       A
   \   00015E   3F           ADDC      A,R7
   \   00015F   F5..         MOV       ?V11,A
   \   000161                ; Setup parameters for call to function osal_memcpy
   \   000161   85..82       MOV       DPL,?V10
   \   000164   F583         MOV       DPH,A
   \   000166   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000169   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016C   7C21         MOV       R4,#0x21
   \   00016E   7D00         MOV       R5,#0x0
   \   000170   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000173   12....       LCALL     ?DEALLOC_XSTACK8
    236              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   000176   85..82       MOV       DPL,?V10
   \   000179   85..83       MOV       DPH,?V11
   \   00017C   E5..         MOV       A,?V0
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   E5..         MOV       A,?V1
   \   000182   F0           MOVX      @DPTR,A
    237              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000183                ; Setup parameters for call to function osal_memcpy
   \   000183   85..82       MOV       DPL,?V8
   \   000186   85..83       MOV       DPH,?V9
   \   000189   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00018C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018F   85..82       MOV       DPL,?V12
   \   000192   85..83       MOV       DPH,?V13
   \   000195   E0           MOVX      A,@DPTR
   \   000196   FC           MOV       R4,A
   \   000197   7D00         MOV       R5,#0x0
   \   000199   E5..         MOV       A,?V0
   \   00019B   2421         ADD       A,#0x21
   \   00019D   FA           MOV       R2,A
   \   00019E   E4           CLR       A
   \   00019F   35..         ADDC      A,?V1
   \   0001A1   FB           MOV       R3,A
   \   0001A2   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001A5   12....       LCALL     ?DEALLOC_XSTACK8
    238              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001A8   85..82       MOV       DPL,?V10
   \   0001AB   85..83       MOV       DPH,?V11
   \   0001AE   E0           MOVX      A,@DPTR
   \   0001AF   2421         ADD       A,#0x21
   \   0001B1   F8           MOV       R0,A
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   3400         ADDC      A,#0x0
   \   0001B6   F9           MOV       R1,A
   \   0001B7   85..82       MOV       DPL,?V8
   \   0001BA   85..83       MOV       DPH,?V9
   \   0001BD   E8           MOV       A,R0
   \   0001BE   F0           MOVX      @DPTR,A
   \   0001BF   A3           INC       DPTR
   \   0001C0   E9           MOV       A,R1
   \   0001C1   F0           MOVX      @DPTR,A
   \   0001C2   806E         SJMP      ??MAC_CbackEvent_5
    239            }
    240            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   0001C4   7407         MOV       A,#0x7
   \   0001C6   65..         XRL       A,?V2
   \   0001C8   7068         JNZ       ??MAC_CbackEvent_5
    241            {
    242              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    243          
    244              if (ZMac_ScanBuf != NULL)
   \   0001CA   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001CD   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001D0   6060         JZ        ??MAC_CbackEvent_5
    245              {
    246                void *pTmp = ZMac_ScanBuf;
   \   0001D2   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001D5   E0           MOVX      A,@DPTR
   \   0001D6   F5..         MOV       ?V10,A
   \   0001D8   A3           INC       DPTR
   \   0001D9   E0           MOVX      A,@DPTR
   \   0001DA   F5..         MOV       ?V11,A
    247                ZMac_ScanBuf = NULL;
   \   0001DC   90....       MOV       DPTR,#ZMac_ScanBuf
   \   0001DF   E4           CLR       A
   \   0001E0   F0           MOVX      @DPTR,A
   \   0001E1   A3           INC       DPTR
   \   0001E2   F0           MOVX      @DPTR,A
    248          
    249                if (pScan->scanType == ZMAC_ED_SCAN)
   \   0001E3   88..         MOV       ?V4,R0
   \   0001E5   89..         MOV       ?V5,R1
   \   0001E7   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001EA   8E82         MOV       DPL,R6
   \   0001EC   8F83         MOV       DPH,R7
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   85..82       MOV       DPL,?V8
   \   0001F4   85..83       MOV       DPH,?V9
   \   0001F7   7012         JNZ       ??MAC_CbackEvent_14
    250                {
    251                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   0001F9   E5..         MOV       A,?V0
   \   0001FB   F0           MOVX      @DPTR,A
   \   0001FC   A3           INC       DPTR
   \   0001FD   E5..         MOV       A,?V1
   \   0001FF   F0           MOVX      @DPTR,A
    252                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000200                ; Setup parameters for call to function osal_memcpy
   \   000200   78..         MOV       R0,#?V4
   \   000202   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000205   7C1B         MOV       R4,#0x1b
   \   000207   7D00         MOV       R5,#0x0
   \   000209   801A         SJMP      ??MAC_CbackEvent_15
    253                }
    254                else
    255                {
    256                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_14:
   \   00020B   E5..         MOV       A,?V0
   \   00020D   F0           MOVX      @DPTR,A
   \   00020E   A3           INC       DPTR
   \   00020F   E5..         MOV       A,?V1
   \   000211   F0           MOVX      @DPTR,A
    257                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000212                ; Setup parameters for call to function osal_memcpy
   \   000212   78..         MOV       R0,#?V4
   \   000214   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000217   85..82       MOV       DPL,?V12
   \   00021A   85..83       MOV       DPH,?V13
   \   00021D   E0           MOVX      A,@DPTR
   \   00021E   75F021       MOV       B,#0x21
   \   000221   A4           MUL       AB
   \   000222   FC           MOV       R4,A
   \   000223   ADF0         MOV       R5,B
    258                }
   \                     ??MAC_CbackEvent_15:
   \   000225   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000228   12....       LCALL     ?DEALLOC_XSTACK8
    259          
    260                osal_mem_free(pTmp);
   \   00022B                ; Setup parameters for call to function osal_mem_free
   \   00022B   AA..         MOV       R2,?V10
   \   00022D   AB..         MOV       R3,?V11
   \   00022F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    261              }
    262            }
    263          
    264            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_5:
   \   000232   90....       MOV       DPTR,#pZMac_AppCallback
   \   000235   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000238   6012         JZ        ??MAC_CbackEvent_16
   \   00023A                ; Setup parameters for indirect call
   \   00023A   EE           MOV       A,R6
   \   00023B   FA           MOV       R2,A
   \   00023C   EF           MOV       A,R7
   \   00023D   FB           MOV       R3,A
   \   00023E   E0           MOVX      A,@DPTR
   \   00023F   F583         MOV       DPH,A
   \   000241   8882         MOV       DPL,R0
   \   000243   12....       LCALL     ?CALL_IND
   \   000246   E9           MOV       A,R1
   \   000247   6003         JZ        $+5
   \   000249   02....       LJMP      ??MAC_CbackEvent_17 & 0xFFFF
    265            {
    266              // Filter out non-zigbee packets
    267              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_16:
   \   00024C   740D         MOV       A,#0xd
   \   00024E   65..         XRL       A,?V2
   \   000250   6003         JZ        $+5
   \   000252   02....       LJMP      ??MAC_CbackEvent_18 & 0xFFFF
    268              {
    269                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    270                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    271                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xC0);
   \   000255   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000258   F9           MOV       R1,A
   \   000259   8882         MOV       DPL,R0
   \   00025B   F583         MOV       DPH,A
   \   00025D   A3           INC       DPTR
   \   00025E   E0           MOVX      A,@DPTR
   \   00025F   FA           MOV       R2,A
    272                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    273                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000260   8882         MOV       DPL,R0
   \   000262   8983         MOV       DPH,R1
   \   000264   E0           MOVX      A,@DPTR
   \   000265   F8           MOV       R0,A
   \   000266   7403         MOV       A,#0x3
   \   000268   58           ANL       A,R0
   \   000269   C3           CLR       C
   \   00026A   9402         SUBB      A,#0x2
   \   00026C   5025         JNC       ??MAC_CbackEvent_3
   \   00026E   E8           MOV       A,R0
   \   00026F   13           RRC       A
   \   000270   13           RRC       A
   \   000271   543F         ANL       A,#0x3f
   \   000273   540F         ANL       A,#0xf
   \   000275   F8           MOV       R0,A
   \   000276   90....       MOV       DPTR,#_NIB + 17
   \   000279   E0           MOVX      A,@DPTR
   \   00027A   68           XRL       A,R0
   \   00027B   7016         JNZ       ??MAC_CbackEvent_3
   \   00027D   74C0         MOV       A,#-0x40
   \   00027F   5A           ANL       A,R2
   \   000280   7011         JNZ       ??MAC_CbackEvent_3
   \   000282   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000285   C8           XCH       A,R0
   \   000286   241B         ADD       A,#0x1b
   \   000288   F582         MOV       DPL,A
   \   00028A   E4           CLR       A
   \   00028B   38           ADDC      A,R0
   \   00028C   F583         MOV       DPH,A
   \   00028E   E0           MOVX      A,@DPTR
   \   00028F   6402         XRL       A,#0x2
   \   000291   6007         JZ        ??MAC_CbackEvent_19
    274                {
    275                  // Drop the message
    276                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   000293                ; Setup parameters for call to function mac_msg_deallocate
   \   000293   AA..         MOV       R2,?XSP + 0
   \   000295   AB..         MOV       R3,?XSP + 1
   \   000297   02....       LJMP      ??MAC_CbackEvent_20 & 0xFFFF
    277                  return;
    278                }
    279                else
    280                {
    281                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_19:
   \   00029A   EE           MOV       A,R6
   \   00029B   2413         ADD       A,#0x13
   \   00029D   F8           MOV       R0,A
   \   00029E   E4           CLR       A
   \   00029F   3F           ADDC      A,R7
   \   0002A0   F9           MOV       R1,A
    282                  // See if LQI needs adjustment due to frame correlation
    283                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0002A1                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002A1   E8           MOV       A,R0
   \   0002A2   241C         ADD       A,#0x1c
   \   0002A4   FA           MOV       R2,A
   \   0002A5   E4           CLR       A
   \   0002A6   39           ADDC      A,R1
   \   0002A7   FB           MOV       R3,A
   \   0002A8   E8           MOV       A,R0
   \   0002A9   241D         ADD       A,#0x1d
   \   0002AB   F582         MOV       DPL,A
   \   0002AD   E4           CLR       A
   \   0002AE   39           ADDC      A,R1
   \   0002AF   F583         MOV       DPH,A
   \   0002B1   E0           MOVX      A,@DPTR
   \   0002B2   F9           MOV       R1,A
   \   0002B3   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    284          
    285                  // Look for broadcast message that has a radius of greater 1
    286                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    287                         && (pData->dataInd.msdu.p[6] > 1) )
   \   0002B6   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0002B9   C8           XCH       A,R0
   \   0002BA   241C         ADD       A,#0x1c
   \   0002BC   F582         MOV       DPL,A
   \   0002BE   E4           CLR       A
   \   0002BF   38           ADDC      A,R0
   \   0002C0   F583         MOV       DPH,A
   \   0002C2   E0           MOVX      A,@DPTR
   \   0002C3   F4           CPL       A
   \   0002C4   7003         JNZ       ??MAC_CbackEvent_21
   \   0002C6   A3           INC       DPTR
   \   0002C7   E0           MOVX      A,@DPTR
   \   0002C8   F4           CPL       A
   \                     ??MAC_CbackEvent_21:
   \   0002C9   7063         JNZ       ??MAC_CbackEvent_22
   \   0002CB   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0002CE   C8           XCH       A,R0
   \   0002CF   2406         ADD       A,#0x6
   \   0002D1   F582         MOV       DPL,A
   \   0002D3   E4           CLR       A
   \   0002D4   38           ADDC      A,R0
   \   0002D5   F583         MOV       DPH,A
   \   0002D7   E0           MOVX      A,@DPTR
   \   0002D8   C3           CLR       C
   \   0002D9   9402         SUBB      A,#0x2
   \   0002DB   4051         JC        ??MAC_CbackEvent_22
    288                  {
    289                    // Send the messsage to a special broadcast queue
    290                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   0002DD                ; Setup parameters for call to function nwk_broadcastSend
   \   0002DD   EE           MOV       A,R6
   \   0002DE   FA           MOV       R2,A
   \   0002DF   EF           MOV       A,R7
   \   0002E0   FB           MOV       R3,A
   \   0002E1   12....       LCALL     `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0002E4   E9           MOV       A,R1
   \   0002E5   6061         JZ        ??MAC_CbackEvent_0
    291                    {
    292                      // Drop the message, too many broadcast messages to process
    293                      mac_msg_deallocate( (uint8 **)&pData );
   \   0002E7                ; Setup parameters for call to function mac_msg_deallocate
   \   0002E7   AA..         MOV       R2,?XSP + 0
   \   0002E9   AB..         MOV       R3,?XSP + 1
   \   0002EB   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    294                    }
    295                    return;
   \                     ??MAC_CbackEvent_23:
   \   0002EE   8058         SJMP      ??MAC_CbackEvent_0
    296                  }
    297                }
    298              }
    299              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_18:
   \   0002F0   740C         MOV       A,#0xc
   \   0002F2   65..         XRL       A,?V2
   \   0002F4   7038         JNZ       ??MAC_CbackEvent_22
   \   0002F6   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002F9   A3           INC       DPTR
   \   0002FA   E0           MOVX      A,@DPTR
   \   0002FB   641A         XRL       A,#0x1a
   \   0002FD   602F         JZ        ??MAC_CbackEvent_22
    300              {
    301                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    302          
    303                if ( pCnf->pDataReq && (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK) )
   \   0002FF   8E82         MOV       DPL,R6
   \   000301   8F83         MOV       DPH,R7
   \   000303   A3           INC       DPTR
   \   000304   A3           INC       DPTR
   \   000305   A3           INC       DPTR
   \   000306   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000309   6023         JZ        ??MAC_CbackEvent_22
   \   00030B   E8           MOV       A,R0
   \   00030C   240E         ADD       A,#0xe
   \   00030E   F582         MOV       DPL,A
   \   000310   E4           CLR       A
   \   000311   39           ADDC      A,R1
   \   000312   F583         MOV       DPH,A
   \   000314   E0           MOVX      A,@DPTR
   \   000315   A2E0         MOV       C,0xE0 /* A   */.0
   \   000317   5015         JNC       ??MAC_CbackEvent_22
    304                {
    305                  // See if LQI needs adjustment due to frame correlation
    306                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000319                ; Setup parameters for call to function ZMacLqiAdjust
   \   000319   EE           MOV       A,R6
   \   00031A   240C         ADD       A,#0xc
   \   00031C   FA           MOV       R2,A
   \   00031D   E4           CLR       A
   \   00031E   3F           ADDC      A,R7
   \   00031F   FB           MOV       R3,A
   \   000320   EE           MOV       A,R6
   \   000321   240D         ADD       A,#0xd
   \   000323   F582         MOV       DPL,A
   \   000325   E4           CLR       A
   \   000326   3F           ADDC      A,R7
   \   000327   F583         MOV       DPH,A
   \   000329   E0           MOVX      A,@DPTR
   \   00032A   F9           MOV       R1,A
   \   00032B   12....       LCALL     `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    307                }
    308              }
    309          
    310              // Application hasn't already processed this message. Send it to NWK task.
    311              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_22:
   \   00032E                ; Setup parameters for call to function osal_msg_send
   \   00032E   EE           MOV       A,R6
   \   00032F   FA           MOV       R2,A
   \   000330   EF           MOV       A,R7
   \   000331   FB           MOV       R3,A
   \   000332   90....       MOV       DPTR,#NWK_TaskID
   \   000335   E0           MOVX      A,@DPTR
   \   000336   F9           MOV       R1,A
   \   000337   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    312            }
    313          
    314            if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \                     ??MAC_CbackEvent_17:
   \   00033A   740C         MOV       A,#0xc
   \   00033C   65..         XRL       A,?V2
   \   00033E   7008         JNZ       ??MAC_CbackEvent_0
   \   000340   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000343   6003         JZ        ??MAC_CbackEvent_0
    315            {
    316              // If the application needs 'pDataReq' then we cannot free it here.
    317              // The application must free it after using it. Note that 'pDataReq'
    318              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    319          
    320              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000345                ; Setup parameters for call to function mac_msg_deallocate
   \                     ??MAC_CbackEvent_20:
   \   000345   12....       LCALL     `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    321            }
    322          #endif
    323          }
   \                     ??MAC_CbackEvent_0:
   \   000348   7404         MOV       A,#0x4
   \   00034A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00034D   7F0E         MOV       R7,#0xe
   \   00034F   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000352                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   2408         ADD       A,#0x8
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000008   8A..         MOV       ?V4,R2
   \   00000A   8B..         MOV       ?V5,R3
   \   00000C   AE..         MOV       R6,?V4
   \   00000E   AF..         MOV       R7,?V5
   \   000010   EA           MOV       A,R2
   \   000011   4F           ORL       A,R7
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2403         ADD       A,#0x3
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   FB           MOV       R3,A
   \   00000F   8A82         MOV       DPL,R2
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000016   F9           MOV       R1,A
   \   000017   E8           MOV       A,R0
   \   000018   49           ORL       A,R1
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine14_0
   \   000006                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    324          #else  // ifdef MT_MAC_CB_FUNC
    325          {
    326            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    327            switch (pData->hdr.event)
    328            {
    329              case MAC_MLME_ASSOCIATE_IND:
    330                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    331                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    332                break;
    333          
    334              case MAC_MLME_ASSOCIATE_CNF:
    335                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    336                {
    337                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    338          #ifdef FEATURE_DUAL_MAC
    339                  DMMGR_ResetActivityFlag( ASSOC_ACTIVITY );
    340          #endif /* FEATURE_DUAL_MAC */
    341                }
    342                break;
    343          
    344              case MAC_MLME_DISASSOCIATE_IND:
    345                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    346                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    347                break;
    348          
    349              case MAC_MLME_DISASSOCIATE_CNF:
    350                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    351                {
    352                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    353          #ifdef FEATURE_DUAL_MAC
    354                  DMMGR_ResetActivityFlag( DISASSOC_ACTIVITY );
    355          #endif /* FEATURE_DUAL_MAC */
    356                }
    357                break;
    358          
    359              case MAC_MLME_BEACON_NOTIFY_IND:
    360                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    361                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    362                break;
    363          
    364              case MAC_MLME_ORPHAN_IND:
    365                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    366                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    367                break;
    368          
    369              case MAC_MLME_SCAN_CNF:
    370                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    371                {
    372                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    373                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    374          #ifdef FEATURE_DUAL_MAC
    375                  DMMGR_ResetActivityFlag( SCAN_ACTIVITY );
    376          #endif /* FEATURE_DUAL_MAC */
    377                }
    378          
    379                if (ZMac_ScanBuf != NULL)
    380                {
    381                  void *pTmp = ZMac_ScanBuf;
    382                  ZMac_ScanBuf = NULL;
    383                  osal_mem_free(pTmp);
    384                }
    385                break;
    386          
    387              case MAC_MLME_START_CNF:
    388                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    389                {
    390                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    391          #ifdef FEATURE_DUAL_MAC
    392                  DMMGR_ResetActivityFlag( START_ACTIVITY );
    393          #endif /* FEATURE_DUAL_MAC */
    394                }
    395                break;
    396          
    397              case MAC_MLME_SYNC_LOSS_IND:
    398                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    399                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    400                break;
    401          
    402              case MAC_MLME_POLL_CNF:
    403                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    404                {
    405                  nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    406          #ifdef FEATURE_DUAL_MAC
    407                  DMMGR_ResetActivityFlag( DATA_POLL_ACTIVITY );
    408          #endif /* FEATURE_DUAL_MAC */
    409                }
    410                break;
    411          
    412              case MAC_MLME_COMM_STATUS_IND:
    413                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    414                {
    415                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    416          #ifdef FEATURE_DUAL_MAC
    417                  /**
    418                   * Reset the activity flags if we receive the comm status 
    419                   * indication. The association response and orphan response msg 
    420                   * receives the comm-status indication message as a response. 
    421                   */
    422                  switch ( ((ZMacCommStatusInd_t *) pData)->hdr.Status )
    423                  {
    424                    case ZMAC_SUCCESS:
    425                    case ZMAC_TRANSACTION_OVERFLOW:
    426                    case ZMAC_TRANSACTION_EXPIRED:
    427                    case ZMAC_CHANNEL_ACCESS_FAILURE:
    428                    case ZMAC_NO_RESOURCES:          
    429                    case ZMAC_NO_ACK:
    430                    case ZMAC_COUNTER_ERROR:    
    431                    case ZMAC_INVALID_PARAMETER:
    432                      DMMGR_ResetActivityFlag( ALL_ACTIVITY );
    433                      break;
    434                    default:
    435                      /**
    436                       * If the activity flag is not reset, we need to re-evaluate the
    437                       * and add more case statement above. Note, MAC security is not
    438                       * used by zstack and not supported by dual mac.
    439                       */
    440                      break;
    441                  }
    442          #endif /* FEATURE_DUAL_MAC */
    443                }
    444                break;
    445          
    446              case MAC_MCPS_DATA_CNF:
    447              {
    448          #ifdef FEATURE_DUAL_MAC
    449                if ( pData->dataCnf.pDataReq != NULL )
    450                {
    451                  if ( DMMGR_IsDefaultMac() )
    452                  {
    453                    DMMGR_ProcessMacDataCnf((macMcpsDataCnf_t *)pData);
    454                  }
    455                  
    456                  mac_msg_deallocate((uint8 **)&pData->dataCnf.pDataReq); 
    457                }
    458                
    459                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    460                {
    461                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    462                }
    463          
    464                DMMGR_ResetActivityFlag( DATA_ACTIVITY );
    465          #else
    466                if (pData->dataCnf.pDataReq != NULL)
    467                {
    468                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    469                }
    470          
    471                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    472                {
    473                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    474                }
    475          
    476          #endif /* FEATURE_DUAL_MAC */
    477              }
    478              break;
    479          
    480              case MAC_MCPS_DATA_IND:
    481                {
    482                  /*
    483                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    484                     buffer and re-organize the contents into ZMAC format.
    485                  */
    486                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    487                  uint8 event, status, len, *msdu;
    488          
    489                  /* Store parameters */
    490                  event = pData->hdr.event;
    491                  status = pData->hdr.status;
    492                  len = pData->dataInd.msdu.len;
    493                  msdu = pData->dataInd.msdu.p;
    494          
    495                  /* Copy security fields */
    496                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    497          
    498                  /* Copy mac fields one by one since the two buffers overlap. */
    499                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    500                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    501                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    502                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    503                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    504                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    505                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    506                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    507                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    508                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    509          
    510                  /* Restore parameters */
    511                  pDataInd->hdr.Status = status;
    512                  pDataInd->hdr.Event = event;
    513                  pDataInd->msduLength = len;
    514          
    515                  if (len)
    516                    pDataInd->msdu = msdu;
    517                  else
    518                    pDataInd->msdu = NULL;
    519          
    520                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    521                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    522                }
    523          
    524                /* free buffer */
    525                mac_msg_deallocate( (uint8 **)&pData );
    526                break;
    527          
    528              case MAC_MCPS_PURGE_CNF:
    529                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    530                {
    531                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    532          #ifdef FEATURE_DUAL_MAC
    533                  DMMGR_ResetActivityFlag( DATA_PURGE_ACTIVITY );
    534          #endif /* FEATURE_DUAL_MAC */
    535          
    536                }
    537                break;
    538          
    539              case MAC_MLME_POLL_IND:
    540                  if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    541                  {
    542                    nwk_MTCallbackSubNwkPollInd( (ZMacPollInd_t *)pData );
    543                  }
    544                break;
    545          
    546              default:
    547                break;
    548            }
    549          }
    550          #endif
    551          
    552          /********************************************************************************************************
    553           * @fn      MAC_CbackCheckPending
    554           *
    555           * @brief   Return number of pending indirect msg
    556           *
    557           * @param   None
    558           *
    559           * @return  Number of indirect msg holding
    560           ********************************************************************************************************/
    561          #ifdef FEATURE_DUAL_MAC
    562          uint8 ZMacCbackCheckPending(void)
    563          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    565          #endif 
    566          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    567          #if !defined (NONWK)
    568            if ( ZSTACK_ROUTER_BUILD )
    569            {
    570              return (nwkDB_ReturnIndirectHoldingCnt());
   \   000004                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000004   12....       LCALL     `??nwkDB_ReturnIndirectHoldingCnt::?relay`; Banked call to: nwkDB_ReturnIndirectHoldingCnt
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0
    571            }
    572            else
    573            {
    574              return (0);
    575            }
    576          #else
    577            return (0);
    578          #endif
    579          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    580          
    581          /**************************************************************************************************
    582           * @fn          MAC_CbackQueryRetransmit
    583           *
    584           * @brief       This function callback function returns whether or not to continue MAC
    585           *              retransmission.
    586           *              A return value '0x00' will indicate no continuation of retry and a return value
    587           *              '0x01' will indicate to continue retransmission. This callback function shall be
    588           *              used to stop continuing retransmission for RF4CE.
    589           *              MAC shall call this callback function whenever it finishes transmitting a packet
    590           *              for macMaxFrameRetries times.
    591           *
    592           * input parameters
    593           *
    594           * None.
    595           *
    596           * output parameters
    597           *
    598           * None.
    599           *
    600           * @return      0x00 to stop retransmission, 0x01 to continue retransmission.
    601           **************************************************************************************************
    602          */
    603          #ifdef FEATURE_DUAL_MAC
    604          uint8 ZMacCbackQueryRetransmit(void)
    605          #else

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    606          uint8 MAC_CbackQueryRetransmit(void)
   \                     MAC_CbackQueryRetransmit:
    607          #endif /* FEATURE_DUAL_MAC */
    608          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    609            return(0);
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
    610          }
    611          
    612          /********************************************************************************************************
    613           * @fn      ZMacLqiAdjustMode
    614           *
    615           * @brief   Sets/return LQI adjust mode
    616           *
    617           * @param   mode - LQI_ADJ_GET = return current mode only
    618           *                 LQI_ADJ_OFF = disable LQI adjusts
    619           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    620           *
    621           * @return  current LQI adjust mode
    622           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    624          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
    625            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV       A,#-0x1
   \   000008   68           XRL       A,R0
   \   000009   6005         JZ        ??ZMacLqiAdjustMode_0
    626            {
    627              lqiAdjMode = mode;
   \   00000B   E9           MOV       A,R1
   \   00000C   90....       MOV       DPTR,#lqiAdjMode
   \   00000F   F0           MOVX      @DPTR,A
    628            }
    629            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV       DPTR,#lqiAdjMode
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   80..         SJMP      ?Subroutine0
    630          }
    631          
    632          #if !defined NONWK
    633          /********************************************************************************************************
    634           * @fn      ZMacLqiAdjust
    635           *
    636           * @brief   Adjust LQI according to correlation value
    637           *
    638           * @notes - the IEEE 802.15.4 specification provides some general statements on
    639           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    640           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    641           *          802.15.4 signals detectable by the receiver, and LQ values should be
    642           *          uniformly distributed between these two limits." Section E.2.3: "The
    643           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    644           *          received packet. When energy level and SNR information are combined,
    645           *          they can indicate whether a corrupt packet resulted from low signal
    646           *          strength or from high signal strength plus interference."
    647           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    648           *          packet correlation value (related to SNR) to scale incoming LQI value
    649           *          (related to signal strength) to 'derate' noisy packets.
    650           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    651           *          implement their own proprietary LQI adjustment algorithm.
    652           *
    653           * @param   corr - packet correlation value
    654           * @param   lqi  - ptr to link quality (scaled rssi)
    655           *
    656           * @return  *lqi - adjusted link quality
    657           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    658          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    659          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
    660            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV       DPTR,#lqiAdjMode
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6051         JZ        ??ZMacLqiAdjust_0
    661            {
    662              uint16 adjLqi = *lqi;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F8           MOV       R0,A
   \   000017   7900         MOV       R1,#0x0
    663          
    664              // Keep correlation within theoretical limits
    665              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   9432         SUBB      A,#0x32
   \   00001D   5004         JNC       ??ZMacLqiAdjust_1
    666              {
    667                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV       R6,#0x32
   \   000021   8008         SJMP      ??ZMacLqiAdjust_2
    668              }
    669              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   946F         SUBB      A,#0x6f
   \   000027   4002         JC        ??ZMacLqiAdjust_2
    670              {
    671                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV       R6,#0x6e
    672              }
    673          
    674              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV       DPTR,#lqiAdjMode
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   701F         JNZ       ??ZMacLqiAdjust_3
    675              {
    676                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    677                           which is computed from the incoming correlation value between
    678                           theorectical minimum/maximum values. This is a very simple way
    679                           of 'derating' the incoming LQI as correlation value drops. */
    680                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV       A,R6
   \   000034   24CE         ADD       A,#-0x32
   \   000036   F5..         MOV       ?V0,A
   \   000038   E4           CLR       A
   \   000039   34FF         ADDC      A,#-0x1
   \   00003B   F5..         MOV       ?V1,A
   \   00003D   E8           MOV       A,R0
   \   00003E   85..F0       MOV       B,?V0
   \   000041   A4           MUL       AB
   \   000042   C8           XCH       A,R0
   \   000043   AAF0         MOV       R2,B
   \   000045   85..F0       MOV       B,?V1
   \   000048   A4           MUL       AB
   \   000049   2A           ADD       A,R2
   \   00004A   F9           MOV       R1,A
   \   00004B   7A3C         MOV       R2,#0x3c
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     ?US_DIV_MOD
    681              }
    682              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    683              {
    684                /* MODE2 - location for developer to implement a proprietary algorithm */
    685              }
    686          
    687              // Replace incoming LQI with scaled value
    688              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000052   C3           CLR       C
   \   000053   E9           MOV       A,R1
   \   000054   9401         SUBB      A,#0x1
   \   000056   4004         JC        ??ZMacLqiAdjust_4
   \   000058   74FF         MOV       A,#-0x1
   \   00005A   8001         SJMP      ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005C   E8           MOV       A,R0
   \                     ??ZMacLqiAdjust_5:
   \   00005D   8C82         MOV       DPL,R4
   \   00005F   8D83         MOV       DPH,R5
   \   000061   F0           MOVX      @DPTR,A
    689            }
    690          }
   \                     ??ZMacLqiAdjust_0:
   \   000062   7F02         MOV       R7,#0x2
   \   000064   02....       LJMP      ?BANKED_LEAVE_XDATA
    691          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_CbackCheckPending
        2      0   -> nwkDB_ReturnIndirectHoldingCnt
      0     29   MAC_CbackEvent
        0     26   -> MAC_MlmeGetReq
        0     26   -> ZMacLqiAdjust
        0     26   -> mac_msg_deallocate
        0     26   -> nwk_broadcastSend
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     26   -> osal_msg_allocate
        0     26   -> osal_msg_send
      0      0   MAC_CbackQueryRetransmit
      1     36   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine13_0
       5  ??Subroutine14_0
       7  ?Subroutine0
      26  ?Subroutine1
      10  ?Subroutine10
      17  ?Subroutine11
       6  ?Subroutine12
      19  ?Subroutine2
       7  ?Subroutine3
       7  ?Subroutine4
      13  ?Subroutine5
       4  ?Subroutine6
      10  ?Subroutine7
       8  ?Subroutine8
       4  ?Subroutine9
       7  MAC_CbackCheckPending
     850  MAC_CbackEvent
       5  MAC_CbackQueryRetransmit
     103  ZMacLqiAdjust
      23  ZMacLqiAdjustMode
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      17  zmacCBSizeTable
      30  -- Other

 
 1 137 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    47 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 137 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
