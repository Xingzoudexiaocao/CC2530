###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Oct/2019  10:10:51
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\Source\app_sample.c
#    Command line       =  
#        -f C:\Users\hhhho\AppData\Local\Temp\EW8BDD.tmp
#        (C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\Source\app_sample.c
#        -D SECURE=1 -D xNV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D LCD_SUPPORTED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D FEATURE_SYSTEM_STATS -lC
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List\app_sample.lst
#    Object file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj\app_sample.r51
#
###############################################################################

C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\Source\app_sample.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "AF.h"
     47          #include "ZDApp.h"
     48          #include "ZDObject.h"
     49          #include "ZDProfile.h"
     50          #include "MT_SYS.h"
     51          
     52          #include "app_sample.h"
     53          #include "onboard.h"

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1
     54          
     55          #include "OSAL_PwrMgr.h"
     56          #include "OSAL_Nv.h"
     57          #include "sapi.h"
     58          #include "nwk_globals.h"
     59          #include "AssocList.h"
     60          #include "AddrMgr.h"
     61          
     62          /* HAL */
     63          #include "hal_uart.h"
     64          #include "hal_lcd.h"
     65          #include "hal_led.h"
     66          #include "hal_key.h"
     67          
     68          #include "app_driver.h"
     69          #include "stdio.h"
     70          /* User */
     71          #include "iic.h"
     72          #include "OLED.h"
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          /*********************************************************************
     81           * TYPEDEFS
     82           */
     83          
     84          /*********************************************************************
     85           * GLOBAL VARIABLES
     86           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          byte appSample_TaskID;
   \                     appSample_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 appSampleSeqNum;          // This is the unique message ID (counter)
   \                     appSampleSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     90          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          unsigned char t;
   \                     t:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          unsigned char accX_H[2];
   \                     accX_H:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     93          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          int accX,accY,accZ,graX,graY,graZ;
   \                     accX:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     accY:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     accZ:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     graX:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     graY:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     graZ:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          unsigned int steps = 0;
   \                     steps:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          unsigned char steps_buff[5] ;
   \                     steps_buff:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          long stoss = 0;
   \                     stoss:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          long barrier = 0;
   \                     barrier:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          unsigned char time0_count = 0; 
   \                     time0_count:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          /*********************************************************************
    101           * GLOBAL FUNCTIONS
    102           */
    103          
    104          /*********************************************************************
    105           * LOCAL VARIABLES
    106           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          devStates_t appSample_NwkState = DEV_INIT;
   \                     appSample_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for appSample_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          endPointDesc_t appSample_epDesc;
   \                     appSample_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    110          
    111          
    112          /*********************************************************************
    113           * LOCAL FUNCTIONS
    114           */
    115          void appSample_MessageMSGCB( afIncomingMSGPacket_t *pkt );
    116          void serialCallback( uint8 port, uint8 events );
    117          void print_dev_mac(void);
    118          
    119          /*********************************************************************
    120           * @fn          appSample_Init
    121           *
    122           * @brief       Initialization function for the zclGeneral layer.
    123           *
    124           * @param       none
    125           *
    126           * @return      none
    127           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    128          void appSample_Init( byte task_id )
   \                     appSample_Init:
    129          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    130            appSample_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#appSample_TaskID
   \   000009   F0           MOVX      @DPTR,A
    131          
    132          //  keyInit(appSample_TaskID,SAMPLEAPP_KEY_EVT,10);  //³õÊ¼»¯°´¼üÈÎÎñ
    133              
    134              
    135            if(zgDeviceLogicalType==ZG_DEVICETYPE_COORDINATOR)
   \   00000A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7006         JNZ       ??appSample_Init_0
    136            {
    137              printDebugString("COORDINATOR\n");
   \   000010                ; Setup parameters for call to function printDebugString
   \   000010   7A..         MOV       R2,#`?<Constant "COORDINATOR\\n">` & 0xff
   \   000012   7B..         MOV       R3,#(`?<Constant "COORDINATOR\\n">` >> 8) & 0xff
   \   000014   8013         SJMP      ??appSample_Init_1
    138            }
    139            else if(zgDeviceLogicalType==ZG_DEVICETYPE_ROUTER)
   \                     ??appSample_Init_0:
   \   000016   6401         XRL       A,#0x1
   \   000018   6012         JZ        ??appSample_Init_2
    140            {
    141          //    printDebugString("ROUTER\n");
    142            }
    143            else if(zgDeviceLogicalType==ZG_DEVICETYPE_ENDDEVICE)
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6402         XRL       A,#0x2
   \   00001D   7006         JNZ       ??appSample_Init_3
    144            {
    145              printDebugString("ENDDEVICE\n");
   \   00001F                ; Setup parameters for call to function printDebugString
   \   00001F   7A..         MOV       R2,#`?<Constant "ENDDEVICE\\n">` & 0xff
   \   000021   7B..         MOV       R3,#(`?<Constant "ENDDEVICE\\n">` >> 8) & 0xff
   \   000023   8004         SJMP      ??appSample_Init_1
    146            }
    147            else 
    148            {
    149              printDebugString("DEV ERR\n");
   \                     ??appSample_Init_3:
   \   000025                ; Setup parameters for call to function printDebugString
   \   000025   7A..         MOV       R2,#`?<Constant "DEV ERR\\n">` & 0xff
   \   000027   7B..         MOV       R3,#(`?<Constant "DEV ERR\\n">` >> 8) & 0xff
   \                     ??appSample_Init_1:
   \   000029   12....       LCALL     `??printDebugString::?relay`; Banked call to: printDebugString
    150            }
    151            
    152          #ifdef HAL_PA_LNA
    153          //    printDebugString("PA\n");
    154          #else
    155              printDebugString("NO PA\n");
    156          #endif
    157            
    158            //´®¿Ú³õÊ¼»¯
    159            uartInit(HAL_UART_BR_115200,serialCallback);
   \                     ??appSample_Init_2:
   \   00002C                ; Setup parameters for call to function uartInit
   \   00002C   7A..         MOV       R2,#`??serialCallback::?relay` & 0xff
   \   00002E   7B..         MOV       R3,#(`??serialCallback::?relay` >> 8) & 0xff
   \   000030   7904         MOV       R1,#0x4
   \   000032   12....       LCALL     `??uartInit::?relay`; Banked call to: uartInit
    160            
    161            // Fill out the endpoint description.
    162            appSample_epDesc.endPoint = SAMPLE_ENDPOINT;
   \   000035   90....       MOV       DPTR,#appSample_epDesc
   \   000038   7424         MOV       A,#0x24
   \   00003A   F0           MOVX      @DPTR,A
    163            appSample_epDesc.task_id = &appSample_TaskID;
   \   00003B   A3           INC       DPTR
   \   00003C   74..         MOV       A,#appSample_TaskID & 0xff
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   74..         MOV       A,#(appSample_TaskID >> 8) & 0xff
   \   000042   F0           MOVX      @DPTR,A
    164            appSample_epDesc.simpleDesc
    165                      = (SimpleDescriptionFormat_t *)&appSample_SimpleDesc;
   \   000043   A3           INC       DPTR
   \   000044   74..         MOV       A,#appSample_SimpleDesc & 0xff
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   74..         MOV       A,#(appSample_SimpleDesc >> 8) & 0xff
   \   00004A   F0           MOVX      @DPTR,A
    166            appSample_epDesc.latencyReq = noLatencyReqs;
   \   00004B   A3           INC       DPTR
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
    167          
    168            // Register the endpoint description with the AF
    169            afRegister( &appSample_epDesc );
   \   00004E                ; Setup parameters for call to function afRegister
   \   00004E   7A..         MOV       R2,#appSample_epDesc & 0xff
   \   000050   7B..         MOV       R3,#(appSample_epDesc >> 8) & 0xff
   \   000052   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    170          
    171          }
   \   000055   7F01         MOV       R7,#0x1
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA
    172          
    173          /*********************************************************************
    174          ¶ÁÈ¡¹âÇ¿º¯Êý
    175          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          uint16 myApp_ReadLightLevel( void )
   \                     myApp_ReadLightLevel:
    177          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    178            uint16 reading = 0;
    179            
    180            /* Enable channel */
    181            ADCCFG |= 0x40;
   \   000000   43F240       ORL       0xf2,#0x40
    182            
    183            /* writing to this register starts the extra conversion */
    184            ADCCON3 = 0x86;
   \   000003   75B686       MOV       0xb6,#-0x7a
    185            
    186            /* Wait for the conversion to be done */
    187            while (!(ADCCON1 & 0x80));
   \                     ??myApp_ReadLightLevel_0:
   \   000006   E5B4         MOV       A,0xb4
   \   000008   A2E7         MOV       C,0xE0 /* A   */.7
   \   00000A   50FA         JNC       ??myApp_ReadLightLevel_0
    188            
    189            /* Disable channel after done conversion */
    190            ADCCFG &= (0x40 ^ 0xFF);
   \   00000C   53F2BF       ANL       0xf2,#0xbf
    191            
    192            /* Read the result */
    193            reading = ADCH;
   \   00000F   E5BB         MOV       A,0xbb
    194            reading |= (int16) (ADCH << 8); 
    195            
    196            reading >>= 8;
    197            
    198            return (reading);
   \   000011   ABBB         MOV       R3,0xbb
   \   000013   E4           CLR       A
   \   000014   CB           XCH       A,R3
   \   000015   FA           MOV       R2,A
   \   000016   02....       LJMP      ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCH
    199          } 
    200          
    201          /*********************************************************************
    202           * @fn          zclSample_event_loop
    203           *
    204           * @brief       Event Loop Processor for zclGeneral.
    205           *
    206           * @param       none
    207           *
    208           * @return      none
    209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          uint16 appSample_event_loop( uint8 task_id, uint16 events )
   \                     appSample_event_loop:
    211          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    212            afIncomingMSGPacket_t *MSGpkt;
    213            afDataConfirm_t *afDataConfirm;
    214            osal_start_timerEx( appSample_TaskID, SAMPLEAPP_TIMEOUT_EVT,
    215                  (400 + (osal_rand() & 0x00FF)) );
   \   000009                ; Setup parameters for call to function osal_rand
   \   000009   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00000C                ; Setup parameters for call to function osal_start_timerEx
   \   00000C   EA           MOV       A,R2
   \   00000D   2490         ADD       A,#-0x70
   \   00000F   F5..         MOV       ?V0,A
   \   000011   E4           CLR       A
   \   000012   3401         ADDC      A,#0x1
   \   000014   F5..         MOV       ?V1,A
   \   000016   E4           CLR       A
   \   000017   F5..         MOV       ?V2,A
   \   000019   F5..         MOV       ?V3,A
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000020   7A01         MOV       R2,#0x1
   \   000022   7B00         MOV       R3,#0x0
   \   000024   90....       MOV       DPTR,#appSample_TaskID
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00002C   7404         MOV       A,#0x4
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
    216            // Data Confirmation message fields
    217            byte sentEP;
    218            ZStatus_t sentStatus;
    219            byte sentTransID;       // This should match the value sen
    220            (void)task_id;          // Intentionally unreferenced parameter
    221          
    222            if ( events & SYS_EVENT_MSG )
   \   000031   EF           MOV       A,R7
   \   000032   5480         ANL       A,#0x80
   \   000034   6003         JZ        $+5
   \   000036   02....       LJMP      ??appSample_event_loop_0 & 0xFFFF
    223            {
    224              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( appSample_TaskID )) )
    225              {
    226                printResString("dddd");
    227                switch ( MSGpkt->hdr.event )
    228                {
    229                  case ZDO_STATE_CHANGE:
    230                    printResString("aaaa");
    231                    appSample_NwkState = (devStates_t)(MSGpkt->hdr.status);
    232                      
    233                    // now on the network
    234                    if ( (appSample_NwkState == DEV_ZB_COORD) ||
    235                         (appSample_NwkState == DEV_ROUTER)   ||
    236                         (appSample_NwkState == DEV_END_DEVICE) )
    237                    {
    238                      HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
    239                      
    240                      if(appSample_NwkState==DEV_ZB_COORD)
    241                      {
    242                        printDebugString("DEV_ZB_COORD\n");
    243                      }
    244                      else if(appSample_NwkState==DEV_ROUTER)
    245                      {
    246                        printDebugString("DEV_ROUTER\n");
    247                      }
    248                      else if(appSample_NwkState==DEV_END_DEVICE)
    249                      {
    250                        printDebugString("DEV_END_DEVICE\n");
    251                      }
    252                    }
    253                    else
    254                    {
    255                      HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
    256                    }
    257                    break;
    258                    
    259                  case AF_DATA_CONFIRM_CMD:
    260                    printResString("bbbb");
    261                    // This message is received as a confirmation of a data packet sent.
    262                    // The status is of ZStatus_t type [defined in ZComDef.h]
    263                    // The message fields are defined in AF.h
    264                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    265          
    266                    sentEP = afDataConfirm->endpoint;
    267                    (void)sentEP;  // This info not used now
    268                    sentTransID = afDataConfirm->transID;
    269                    (void)sentTransID;  // This info not used now
    270          
    271                    sentStatus = afDataConfirm->hdr.status;
    272                    // Action taken when confirmation is received.
    273                    if ( sentStatus != ZSuccess )
    274                    {
    275                      // The data wasn't delivered -- Do something
    276                      printDebugString("\nmsg send rsp err\n"); 
    277                    }
    278                    else
    279                    {
    280          //            printDebugString("msg send rsp success\n"); 
    281                    }
    282                    break;
    283          
    284                  // Received when a messages is received (OTA) for this endpoint
    285                  case AF_INCOMING_MSG_CMD:
    286                    printResString("cccc");
    287                    appSample_MessageMSGCB( MSGpkt );
    288                    break;
    289          
    290                  default:
    291                    break;
    292                }
    293          
    294                // Release the memory
    295                osal_msg_deallocate( (uint8 *)MSGpkt );
    296              }
    297          
    298              // return unprocessed events
    299              return (events ^ SYS_EVENT_MSG);
    300            }
    301            
    302            if ( events & SAMPLEAPP_TIMEOUT_EVT )
   \   000039   EE           MOV       A,R6
   \   00003A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00003C   4003         JC        $+5
   \   00003E   02....       LJMP      ??appSample_event_loop_1 & 0xFFFF
    303            {
    304              // Send the periodic message
    305              printResString("eeee");
   \   000041                ; Setup parameters for call to function printResString
   \   000041   7A..         MOV       R2,#`?<Constant "eeee">` & 0xff
   \   000043   7B..         MOV       R3,#(`?<Constant "eeee">` >> 8) & 0xff
   \   000045   12....       LCALL     `??printResString::?relay`; Banked call to: printResString
    306          
    307              // Setup to send message again in normal period (+ a little jitter)
    308              osal_start_timerEx( appSample_TaskID, SAMPLEAPP_TIMEOUT_EVT,
    309                  (4000 + (osal_rand() & 0x00FF)) );
   \   000048                ; Setup parameters for call to function osal_rand
   \   000048   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00004B                ; Setup parameters for call to function osal_start_timerEx
   \   00004B   EA           MOV       A,R2
   \   00004C   24A0         ADD       A,#-0x60
   \   00004E   F5..         MOV       ?V0,A
   \   000050   E4           CLR       A
   \   000051   340F         ADDC      A,#0xf
   \   000053   F5..         MOV       ?V1,A
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00005A   7A01         MOV       R2,#0x1
   \   00005C   7B00         MOV       R3,#0x0
   \   00005E   90....       MOV       DPTR,#appSample_TaskID
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F9           MOV       R1,A
   \   000063   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000066   7404         MOV       A,#0x4
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
    310          
    311              OLED_Init();//³õÊ¼»¯OLED  
   \   00006B                ; Setup parameters for call to function OLED_Init
   \   00006B   12....       LCALL     `??OLED_Init::?relay`; Banked call to: OLED_Init
    312              OLED_Clear();
   \   00006E                ; Setup parameters for call to function OLED_Clear
   \   00006E   12....       LCALL     `??OLED_Clear::?relay`; Banked call to: OLED_Clear
    313              OLED_ShowString(6,3,"0.96' OLED TEST",16);
   \   000071                ; Setup parameters for call to function OLED_ShowString
   \   000071   7B10         MOV       R3,#0x10
   \   000073   7C..         MOV       R4,#`?<Constant "0.96\\' OLED TEST">` & 0xff
   \   000075   7D..         MOV       R5,#(`?<Constant "0.96\\' OLED TEST">` >> 8) & 0xff
   \   000077   7A03         MOV       R2,#0x3
   \   000079   7906         MOV       R1,#0x6
   \   00007B   12....       LCALL     `??OLED_ShowString::?relay`; Banked call to: OLED_ShowString
    314              OLED_ShowString(0,6,"CODE:",16);  
   \   00007E                ; Setup parameters for call to function OLED_ShowString
   \   00007E   7B10         MOV       R3,#0x10
   \   000080   7C..         MOV       R4,#`?<Constant "CODE:">` & 0xff
   \   000082   7D..         MOV       R5,#(`?<Constant "CODE:">` >> 8) & 0xff
   \   000084   7A06         MOV       R2,#0x6
   \   000086   7900         MOV       R1,#0x0
   \   000088   12....       LCALL     `??OLED_ShowString::?relay`; Banked call to: OLED_ShowString
    315              t = myApp_ReadLightLevel();//¶ÁÈ¡¹âÇ¿
   \   00008B                ; Setup parameters for call to function myApp_ReadLightLevel
   \   00008B   12....       LCALL     `??myApp_ReadLightLevel::?relay`; Banked call to: myApp_ReadLightLevel
   \   00008E   EA           MOV       A,R2
   \   00008F   90....       MOV       DPTR,#t
   \   000092   F0           MOVX      @DPTR,A
    316              OLED_ShowNum(41,6,t,3,16);//ÏÔÊ¾ASCII×Ö·ûµÄÂëÖµ 	
   \   000093                ; Setup parameters for call to function OLED_ShowNum
   \   000093   F5..         MOV       ?V0,A
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V1,A
   \   000098   78..         MOV       R0,#?V0
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00009D   7C10         MOV       R4,#0x10
   \   00009F   7B03         MOV       R3,#0x3
   \   0000A1   7A06         MOV       R2,#0x6
   \   0000A3   7929         MOV       R1,#0x29
   \   0000A5   12....       LCALL     `??OLED_ShowNum::?relay`; Banked call to: OLED_ShowNum
   \   0000A8   7404         MOV       A,#0x4
   \   0000AA   12....       LCALL     ?DEALLOC_XSTACK8
    317              barrier = 3*5000l + 9000l;
   \   0000AD   90....       MOV       DPTR,#barrier
   \   0000B0   74C0         MOV       A,#-0x40
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   745D         MOV       A,#0x5d
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E4           CLR       A
   \   0000B9   F0           MOVX      @DPTR,A
   \   0000BA   A3           INC       DPTR
   \   0000BB   F0           MOVX      @DPTR,A
    318              if (stoss > barrier) {
   \   0000BC   90....       MOV       DPTR,#__Constant_5dc1
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?L_MOV_X
   \   0000C4   90....       MOV       DPTR,#stoss
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?SL_GT_X
   \   0000CC   400C         JC        ??appSample_event_loop_2
    319                steps++;
   \   0000CE   90....       MOV       DPTR,#steps
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   2401         ADD       A,#0x1
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   3400         ADDC      A,#0x0
   \   0000D9   F0           MOVX      @DPTR,A
    320              }
    321              if(time0_count < 10)
   \                     ??appSample_event_loop_2:
   \   0000DA   90....       MOV       DPTR,#time0_count
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   C3           CLR       C
   \   0000DF   940A         SUBB      A,#0xa
   \   0000E1   4003         JC        $+5
   \   0000E3   02....       LJMP      ??appSample_event_loop_3 & 0xFFFF
    322                 time0_count++;
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   04           INC       A
   \   0000E8   F0           MOVX      @DPTR,A
   \   0000E9   02....       LJMP      ??appSample_event_loop_4 & 0xFFFF
   \                     ??appSample_event_loop_5:
   \   0000EC                ; Setup parameters for call to function printResString
   \   0000EC   7A..         MOV       R2,#`?<Constant "cccc">` & 0xff
   \   0000EE   7B..         MOV       R3,#(`?<Constant "cccc">` >> 8) & 0xff
   \   0000F0   12....       LCALL     `??printResString::?relay`; Banked call to: printResString
   \   0000F3                ; Setup parameters for call to function appSample_MessageMSGCB
   \   0000F3   AA..         MOV       R2,?V0
   \   0000F5   AB..         MOV       R3,?V1
   \   0000F7   12....       LCALL     `??appSample_MessageMSGCB::?relay`; Banked call to: appSample_MessageMSGCB
   \                     ??appSample_event_loop_6:
   \   0000FA                ; Setup parameters for call to function osal_msg_deallocate
   \   0000FA   AA..         MOV       R2,?V0
   \   0000FC   AB..         MOV       R3,?V1
   \   0000FE   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??appSample_event_loop_0:
   \   000101                ; Setup parameters for call to function osal_msg_receive
   \   000101   90....       MOV       DPTR,#appSample_TaskID
   \   000104   E0           MOVX      A,@DPTR
   \   000105   F9           MOV       R1,A
   \   000106   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000109   8A..         MOV       ?V0,R2
   \   00010B   8B..         MOV       ?V1,R3
   \   00010D   EA           MOV       A,R2
   \   00010E   4B           ORL       A,R3
   \   00010F   7003         JNZ       $+5
   \   000111   02....       LJMP      ??appSample_event_loop_7 & 0xFFFF
   \   000114                ; Setup parameters for call to function printResString
   \   000114   7A..         MOV       R2,#`?<Constant "dddd">` & 0xff
   \   000116   7B..         MOV       R3,#(`?<Constant "dddd">` >> 8) & 0xff
   \   000118   12....       LCALL     `??printResString::?relay`; Banked call to: printResString
   \   00011B   85..82       MOV       DPL,?V0
   \   00011E   85..83       MOV       DPH,?V1
   \   000121   A3           INC       DPTR
   \   000122   8582..       MOV       ?V2,DPL
   \   000125   8583..       MOV       ?V3,DPH
   \   000128   85..82       MOV       DPL,?V0
   \   00012B   85..83       MOV       DPH,?V1
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   24E6         ADD       A,#-0x1a
   \   000131   60B9         JZ        ??appSample_event_loop_5
   \   000133   2449         ADD       A,#0x49
   \   000135   6006         JZ        ??appSample_event_loop_8
   \   000137   24D4         ADD       A,#-0x2c
   \   000139   6056         JZ        ??appSample_event_loop_9
   \   00013B   80BD         SJMP      ??appSample_event_loop_6
   \                     ??appSample_event_loop_8:
   \   00013D                ; Setup parameters for call to function printResString
   \   00013D   7A..         MOV       R2,#`?<Constant "aaaa">` & 0xff
   \   00013F   7B..         MOV       R3,#(`?<Constant "aaaa">` >> 8) & 0xff
   \   000141   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000144   90....       MOV       DPTR,#appSample_NwkState
   \   000147   F0           MOVX      @DPTR,A
   \   000148   6409         XRL       A,#0x9
   \   00014A   600A         JZ        ??appSample_event_loop_10
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   6407         XRL       A,#0x7
   \   00014F   6005         JZ        ??appSample_event_loop_10
   \   000151   E0           MOVX      A,@DPTR
   \   000152   6406         XRL       A,#0x6
   \   000154   7031         JNZ       ??appSample_event_loop_11
   \                     ??appSample_event_loop_10:
   \   000156                ; Setup parameters for call to function HalLedSet
   \   000156   7A01         MOV       R2,#0x1
   \   000158   7901         MOV       R1,#0x1
   \   00015A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00015D   90....       MOV       DPTR,#appSample_NwkState
   \   000160   E0           MOVX      A,@DPTR
   \   000161   6409         XRL       A,#0x9
   \   000163   7009         JNZ       ??appSample_event_loop_12
   \   000165                ; Setup parameters for call to function printDebugString
   \   000165   7A..         MOV       R2,#`?<Constant "DEV_ZB_COORD\\n">` & 0xff
   \   000167   7B..         MOV       R3,#(`?<Constant "DEV_ZB_COORD\\n">` >> 8) & 0xff
   \                     ??appSample_event_loop_13:
   \   000169   12....       LCALL     `??printDebugString::?relay`; Banked call to: printDebugString
   \   00016C   808C         SJMP      ??appSample_event_loop_6
   \                     ??appSample_event_loop_12:
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   6407         XRL       A,#0x7
   \   000171   7006         JNZ       ??appSample_event_loop_14
   \   000173                ; Setup parameters for call to function printDebugString
   \   000173   7A..         MOV       R2,#`?<Constant "DEV_ROUTER\\n">` & 0xff
   \   000175   7B..         MOV       R3,#(`?<Constant "DEV_ROUTER\\n">` >> 8) & 0xff
   \   000177   80F0         SJMP      ??appSample_event_loop_13
   \                     ??appSample_event_loop_14:
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   6406         XRL       A,#0x6
   \   00017C   6003         JZ        $+5
   \   00017E   02....       LJMP      ??appSample_event_loop_6 & 0xFFFF
   \   000181                ; Setup parameters for call to function printDebugString
   \   000181   7A..         MOV       R2,#`?<Constant "DEV_END_DEVICE\\n">` & 0xff
   \   000183   7B..         MOV       R3,#(`?<Constant "DEV_END_DEVICE\\n">` >> 8) & 0xff
   \   000185   80E2         SJMP      ??appSample_event_loop_13
   \                     ??appSample_event_loop_11:
   \   000187                ; Setup parameters for call to function HalLedSet
   \   000187   7A00         MOV       R2,#0x0
   \   000189   7901         MOV       R1,#0x1
   \   00018B   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00018E   02....       LJMP      ??appSample_event_loop_6 & 0xFFFF
   \                     ??appSample_event_loop_9:
   \   000191                ; Setup parameters for call to function printResString
   \   000191   7A..         MOV       R2,#`?<Constant "bbbb">` & 0xff
   \   000193   7B..         MOV       R3,#(`?<Constant "bbbb">` >> 8) & 0xff
   \   000195   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000198   7003         JNZ       $+5
   \   00019A   02....       LJMP      ??appSample_event_loop_6 & 0xFFFF
   \   00019D                ; Setup parameters for call to function printDebugString
   \   00019D   7A..         MOV       R2,#`?<Constant "\\nmsg send rsp err\\n">` & 0xff
   \   00019F   7B..         MOV       R3,#(`?<Constant "\\nmsg send rsp err\\n">` >> 8) & 0xff
   \   0001A1   80C6         SJMP      ??appSample_event_loop_13
   \                     ??appSample_event_loop_7:
   \   0001A3   EE           MOV       A,R6
   \   0001A4   FA           MOV       R2,A
   \   0001A5   EF           MOV       A,R7
   \   0001A6   6480         XRL       A,#0x80
   \   0001A8   02....       LJMP      ??appSample_event_loop_15 & 0xFFFF
    323              else{
    324                time0_count = 0;
   \                     ??appSample_event_loop_3:
   \   0001AB   E4           CLR       A
   \   0001AC   12....       LCALL     ?Subroutine3 & 0xFFFF
    325                
    326                steps_buff[0] = steps/10000;
   \                     ??CrossCallReturnLabel_4:
   \   0001AF   7A10         MOV       R2,#0x10
   \   0001B1   7B27         MOV       R3,#0x27
   \   0001B3   12....       LCALL     ?US_DIV_MOD
   \   0001B6   E8           MOV       A,R0
   \   0001B7   90....       MOV       DPTR,#steps_buff
   \   0001BA   12....       LCALL     ?Subroutine3 & 0xFFFF
    327                steps_buff[1] = steps/1000%10;
   \                     ??CrossCallReturnLabel_5:
   \   0001BD   7AE8         MOV       R2,#-0x18
   \   0001BF   7B03         MOV       R3,#0x3
   \   0001C1   12....       LCALL     ?US_DIV_MOD
   \   0001C4   7A0A         MOV       R2,#0xa
   \   0001C6   7B00         MOV       R3,#0x0
   \   0001C8   12....       LCALL     ?US_DIV_MOD
   \   0001CB   EA           MOV       A,R2
   \   0001CC   90....       MOV       DPTR,#steps_buff + 1
   \   0001CF   12....       LCALL     ?Subroutine3 & 0xFFFF
    328                steps_buff[2] = steps/100%10;
   \                     ??CrossCallReturnLabel_6:
   \   0001D2   7A64         MOV       R2,#0x64
   \   0001D4   7B00         MOV       R3,#0x0
   \   0001D6   12....       LCALL     ?US_DIV_MOD
   \   0001D9   7A0A         MOV       R2,#0xa
   \   0001DB   7B00         MOV       R3,#0x0
   \   0001DD   12....       LCALL     ?US_DIV_MOD
   \   0001E0   EA           MOV       A,R2
   \   0001E1   90....       MOV       DPTR,#steps_buff + 2
   \   0001E4   12....       LCALL     ?Subroutine2 & 0xFFFF
    329                steps_buff[3] = steps/10%10;
   \                     ??CrossCallReturnLabel_2:
   \   0001E7   12....       LCALL     ?US_DIV_MOD
   \   0001EA   7A0A         MOV       R2,#0xa
   \   0001EC   7B00         MOV       R3,#0x0
   \   0001EE   12....       LCALL     ?US_DIV_MOD
   \   0001F1   EA           MOV       A,R2
   \   0001F2   90....       MOV       DPTR,#steps_buff + 3
   \   0001F5   12....       LCALL     ?Subroutine2 & 0xFFFF
    330                steps_buff[4] = steps%10;
   \                     ??CrossCallReturnLabel_3:
   \   0001F8   12....       LCALL     ?US_DIV_MOD
   \   0001FB   EA           MOV       A,R2
   \   0001FC   90....       MOV       DPTR,#steps_buff + 4
   \   0001FF   F0           MOVX      @DPTR,A
    331                
    332                switch(steps_buff[0]){
   \   000200   90....       MOV       DPTR,#steps_buff
   \   000203   E0           MOVX      A,@DPTR
   \   000204   601D         JZ        ??appSample_event_loop_16
   \   000206   14           DEC       A
   \   000207   601E         JZ        ??appSample_event_loop_17
   \   000209   14           DEC       A
   \   00020A   601F         JZ        ??appSample_event_loop_18
   \   00020C   14           DEC       A
   \   00020D   6020         JZ        ??appSample_event_loop_19
   \   00020F   14           DEC       A
   \   000210   6021         JZ        ??appSample_event_loop_20
   \   000212   14           DEC       A
   \   000213   6022         JZ        ??appSample_event_loop_21
   \   000215   14           DEC       A
   \   000216   6023         JZ        ??appSample_event_loop_22
   \   000218   14           DEC       A
   \   000219   6024         JZ        ??appSample_event_loop_23
   \   00021B   14           DEC       A
   \   00021C   6025         JZ        ??appSample_event_loop_24
   \   00021E   14           DEC       A
   \   00021F   6026         JZ        ??appSample_event_loop_25
   \   000221   8027         SJMP      ??appSample_event_loop_26
    333                  case 0 : steps_buff[0] = 48;
   \                     ??appSample_event_loop_16:
   \   000223   7430         MOV       A,#0x30
   \   000225   8022         SJMP      ??appSample_event_loop_27
    334                  break;              
    335                  case 1 : steps_buff[0] = 49;
   \                     ??appSample_event_loop_17:
   \   000227   7431         MOV       A,#0x31
   \   000229   801E         SJMP      ??appSample_event_loop_27
    336                  break;              
    337                  case 2 : steps_buff[0] = 50;
   \                     ??appSample_event_loop_18:
   \   00022B   7432         MOV       A,#0x32
   \   00022D   801A         SJMP      ??appSample_event_loop_27
    338                  break;              
    339                  case 3 : steps_buff[0] = 51;
   \                     ??appSample_event_loop_19:
   \   00022F   7433         MOV       A,#0x33
   \   000231   8016         SJMP      ??appSample_event_loop_27
    340                  break;              
    341                  case 4 : steps_buff[0] = 52;
   \                     ??appSample_event_loop_20:
   \   000233   7434         MOV       A,#0x34
   \   000235   8012         SJMP      ??appSample_event_loop_27
    342                  break;              
    343                  case 5 : steps_buff[0] = 53;
   \                     ??appSample_event_loop_21:
   \   000237   7435         MOV       A,#0x35
   \   000239   800E         SJMP      ??appSample_event_loop_27
    344                  break;              
    345                  case 6 : steps_buff[0] = 54;
   \                     ??appSample_event_loop_22:
   \   00023B   7436         MOV       A,#0x36
   \   00023D   800A         SJMP      ??appSample_event_loop_27
    346                  break;              
    347                  case 7 : steps_buff[0] = 55;
   \                     ??appSample_event_loop_23:
   \   00023F   7437         MOV       A,#0x37
   \   000241   8006         SJMP      ??appSample_event_loop_27
    348                  break;              
    349                  case 8 : steps_buff[0] = 56;
   \                     ??appSample_event_loop_24:
   \   000243   7438         MOV       A,#0x38
   \   000245   8002         SJMP      ??appSample_event_loop_27
    350                  break;              
    351                  case 9 : steps_buff[0] = 57;
   \                     ??appSample_event_loop_25:
   \   000247   7439         MOV       A,#0x39
   \                     ??appSample_event_loop_27:
   \   000249   F0           MOVX      @DPTR,A
    352                  break;
    353                  default :break;
    354                }
    355                switch(steps_buff[1]){
   \                     ??appSample_event_loop_26:
   \   00024A   A3           INC       DPTR
   \   00024B   E0           MOVX      A,@DPTR
   \   00024C   601D         JZ        ??appSample_event_loop_28
   \   00024E   14           DEC       A
   \   00024F   601E         JZ        ??appSample_event_loop_29
   \   000251   14           DEC       A
   \   000252   601F         JZ        ??appSample_event_loop_30
   \   000254   14           DEC       A
   \   000255   6020         JZ        ??appSample_event_loop_31
   \   000257   14           DEC       A
   \   000258   6021         JZ        ??appSample_event_loop_32
   \   00025A   14           DEC       A
   \   00025B   6022         JZ        ??appSample_event_loop_33
   \   00025D   14           DEC       A
   \   00025E   6023         JZ        ??appSample_event_loop_34
   \   000260   14           DEC       A
   \   000261   6024         JZ        ??appSample_event_loop_35
   \   000263   14           DEC       A
   \   000264   6025         JZ        ??appSample_event_loop_36
   \   000266   14           DEC       A
   \   000267   6026         JZ        ??appSample_event_loop_37
   \   000269   8027         SJMP      ??appSample_event_loop_38
    356                  case 0 : steps_buff[1] = 48;
   \                     ??appSample_event_loop_28:
   \   00026B   7430         MOV       A,#0x30
   \   00026D   8022         SJMP      ??appSample_event_loop_39
    357                  break;              
    358                  case 1 : steps_buff[1] = 49;
   \                     ??appSample_event_loop_29:
   \   00026F   7431         MOV       A,#0x31
   \   000271   801E         SJMP      ??appSample_event_loop_39
    359                  break;              
    360                  case 2 : steps_buff[1] = 50;
   \                     ??appSample_event_loop_30:
   \   000273   7432         MOV       A,#0x32
   \   000275   801A         SJMP      ??appSample_event_loop_39
    361                  break;              
    362                  case 3 : steps_buff[1] = 51;
   \                     ??appSample_event_loop_31:
   \   000277   7433         MOV       A,#0x33
   \   000279   8016         SJMP      ??appSample_event_loop_39
    363                  break;              
    364                  case 4 : steps_buff[1] = 52;
   \                     ??appSample_event_loop_32:
   \   00027B   7434         MOV       A,#0x34
   \   00027D   8012         SJMP      ??appSample_event_loop_39
    365                  break;              
    366                  case 5 : steps_buff[1] = 53;
   \                     ??appSample_event_loop_33:
   \   00027F   7435         MOV       A,#0x35
   \   000281   800E         SJMP      ??appSample_event_loop_39
    367                  break;              
    368                  case 6 : steps_buff[1] = 54;
   \                     ??appSample_event_loop_34:
   \   000283   7436         MOV       A,#0x36
   \   000285   800A         SJMP      ??appSample_event_loop_39
    369                  break;              
    370                  case 7 : steps_buff[1] = 55;
   \                     ??appSample_event_loop_35:
   \   000287   7437         MOV       A,#0x37
   \   000289   8006         SJMP      ??appSample_event_loop_39
    371                  break;              
    372                  case 8 : steps_buff[1] = 56;
   \                     ??appSample_event_loop_36:
   \   00028B   7438         MOV       A,#0x38
   \   00028D   8002         SJMP      ??appSample_event_loop_39
    373                  break;              
    374                  case 9 : steps_buff[1] = 57;
   \                     ??appSample_event_loop_37:
   \   00028F   7439         MOV       A,#0x39
   \                     ??appSample_event_loop_39:
   \   000291   F0           MOVX      @DPTR,A
    375                  break;
    376                  default :break;
    377                }
    378                switch(steps_buff[2]){
   \                     ??appSample_event_loop_38:
   \   000292   A3           INC       DPTR
   \   000293   E0           MOVX      A,@DPTR
   \   000294   601D         JZ        ??appSample_event_loop_40
   \   000296   14           DEC       A
   \   000297   601E         JZ        ??appSample_event_loop_41
   \   000299   14           DEC       A
   \   00029A   601F         JZ        ??appSample_event_loop_42
   \   00029C   14           DEC       A
   \   00029D   6020         JZ        ??appSample_event_loop_43
   \   00029F   14           DEC       A
   \   0002A0   6021         JZ        ??appSample_event_loop_44
   \   0002A2   14           DEC       A
   \   0002A3   6022         JZ        ??appSample_event_loop_45
   \   0002A5   14           DEC       A
   \   0002A6   6023         JZ        ??appSample_event_loop_46
   \   0002A8   14           DEC       A
   \   0002A9   6024         JZ        ??appSample_event_loop_47
   \   0002AB   14           DEC       A
   \   0002AC   6025         JZ        ??appSample_event_loop_48
   \   0002AE   14           DEC       A
   \   0002AF   6026         JZ        ??appSample_event_loop_49
   \   0002B1   8027         SJMP      ??appSample_event_loop_50
    379                  case 0 : steps_buff[2] = 48;
   \                     ??appSample_event_loop_40:
   \   0002B3   7430         MOV       A,#0x30
   \   0002B5   8022         SJMP      ??appSample_event_loop_51
    380                  break;              
    381                  case 1 : steps_buff[2] = 49;
   \                     ??appSample_event_loop_41:
   \   0002B7   7431         MOV       A,#0x31
   \   0002B9   801E         SJMP      ??appSample_event_loop_51
    382                  break;              
    383                  case 2 : steps_buff[2] = 50;
   \                     ??appSample_event_loop_42:
   \   0002BB   7432         MOV       A,#0x32
   \   0002BD   801A         SJMP      ??appSample_event_loop_51
    384                  break;              
    385                  case 3 : steps_buff[2] = 51;
   \                     ??appSample_event_loop_43:
   \   0002BF   7433         MOV       A,#0x33
   \   0002C1   8016         SJMP      ??appSample_event_loop_51
    386                  break;              
    387                  case 4 : steps_buff[2] = 52;
   \                     ??appSample_event_loop_44:
   \   0002C3   7434         MOV       A,#0x34
   \   0002C5   8012         SJMP      ??appSample_event_loop_51
    388                  break;              
    389                  case 5 : steps_buff[2] = 53;
   \                     ??appSample_event_loop_45:
   \   0002C7   7435         MOV       A,#0x35
   \   0002C9   800E         SJMP      ??appSample_event_loop_51
    390                  break;              
    391                  case 6 : steps_buff[2] = 54;
   \                     ??appSample_event_loop_46:
   \   0002CB   7436         MOV       A,#0x36
   \   0002CD   800A         SJMP      ??appSample_event_loop_51
    392                  break;              
    393                  case 7 : steps_buff[2] = 55;
   \                     ??appSample_event_loop_47:
   \   0002CF   7437         MOV       A,#0x37
   \   0002D1   8006         SJMP      ??appSample_event_loop_51
    394                  break;              
    395                  case 8 : steps_buff[2] = 56;
   \                     ??appSample_event_loop_48:
   \   0002D3   7438         MOV       A,#0x38
   \   0002D5   8002         SJMP      ??appSample_event_loop_51
    396                  break;              
    397                  case 9 : steps_buff[2] = 57;
   \                     ??appSample_event_loop_49:
   \   0002D7   7439         MOV       A,#0x39
   \                     ??appSample_event_loop_51:
   \   0002D9   F0           MOVX      @DPTR,A
    398                  break;
    399                  default :break;
    400                }
    401                switch(steps_buff[3]){
   \                     ??appSample_event_loop_50:
   \   0002DA   A3           INC       DPTR
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   601D         JZ        ??appSample_event_loop_52
   \   0002DE   14           DEC       A
   \   0002DF   601E         JZ        ??appSample_event_loop_53
   \   0002E1   14           DEC       A
   \   0002E2   601F         JZ        ??appSample_event_loop_54
   \   0002E4   14           DEC       A
   \   0002E5   6020         JZ        ??appSample_event_loop_55
   \   0002E7   14           DEC       A
   \   0002E8   6021         JZ        ??appSample_event_loop_56
   \   0002EA   14           DEC       A
   \   0002EB   6022         JZ        ??appSample_event_loop_57
   \   0002ED   14           DEC       A
   \   0002EE   6023         JZ        ??appSample_event_loop_58
   \   0002F0   14           DEC       A
   \   0002F1   6024         JZ        ??appSample_event_loop_59
   \   0002F3   14           DEC       A
   \   0002F4   6025         JZ        ??appSample_event_loop_60
   \   0002F6   14           DEC       A
   \   0002F7   6026         JZ        ??appSample_event_loop_61
   \   0002F9   8027         SJMP      ??appSample_event_loop_62
    402                  case 0 : steps_buff[3] = 48;
   \                     ??appSample_event_loop_52:
   \   0002FB   7430         MOV       A,#0x30
   \   0002FD   8022         SJMP      ??appSample_event_loop_63
    403                  break;              
    404                  case 1 : steps_buff[3] = 49;
   \                     ??appSample_event_loop_53:
   \   0002FF   7431         MOV       A,#0x31
   \   000301   801E         SJMP      ??appSample_event_loop_63
    405                  break;              
    406                  case 2 : steps_buff[3] = 50;
   \                     ??appSample_event_loop_54:
   \   000303   7432         MOV       A,#0x32
   \   000305   801A         SJMP      ??appSample_event_loop_63
    407                  break;              
    408                  case 3 : steps_buff[3] = 51;
   \                     ??appSample_event_loop_55:
   \   000307   7433         MOV       A,#0x33
   \   000309   8016         SJMP      ??appSample_event_loop_63
    409                  break;              
    410                  case 4 : steps_buff[3] = 52;
   \                     ??appSample_event_loop_56:
   \   00030B   7434         MOV       A,#0x34
   \   00030D   8012         SJMP      ??appSample_event_loop_63
    411                  break;              
    412                  case 5 : steps_buff[3] = 53;
   \                     ??appSample_event_loop_57:
   \   00030F   7435         MOV       A,#0x35
   \   000311   800E         SJMP      ??appSample_event_loop_63
    413                  break;              
    414                  case 6 : steps_buff[3] = 54;
   \                     ??appSample_event_loop_58:
   \   000313   7436         MOV       A,#0x36
   \   000315   800A         SJMP      ??appSample_event_loop_63
    415                  break;              
    416                  case 7 : steps_buff[3] = 55;
   \                     ??appSample_event_loop_59:
   \   000317   7437         MOV       A,#0x37
   \   000319   8006         SJMP      ??appSample_event_loop_63
    417                  break;              
    418                  case 8 : steps_buff[3] = 56;
   \                     ??appSample_event_loop_60:
   \   00031B   7438         MOV       A,#0x38
   \   00031D   8002         SJMP      ??appSample_event_loop_63
    419                  break;              
    420                  case 9 : steps_buff[3] = 57;
   \                     ??appSample_event_loop_61:
   \   00031F   7439         MOV       A,#0x39
   \                     ??appSample_event_loop_63:
   \   000321   F0           MOVX      @DPTR,A
    421                  break;
    422                  default :break;
    423                }
    424                switch(steps_buff[4]){
   \                     ??appSample_event_loop_62:
   \   000322   A3           INC       DPTR
   \   000323   E0           MOVX      A,@DPTR
   \   000324   601D         JZ        ??appSample_event_loop_64
   \   000326   14           DEC       A
   \   000327   601E         JZ        ??appSample_event_loop_65
   \   000329   14           DEC       A
   \   00032A   601F         JZ        ??appSample_event_loop_66
   \   00032C   14           DEC       A
   \   00032D   6020         JZ        ??appSample_event_loop_67
   \   00032F   14           DEC       A
   \   000330   6021         JZ        ??appSample_event_loop_68
   \   000332   14           DEC       A
   \   000333   6022         JZ        ??appSample_event_loop_69
   \   000335   14           DEC       A
   \   000336   6023         JZ        ??appSample_event_loop_70
   \   000338   14           DEC       A
   \   000339   6024         JZ        ??appSample_event_loop_71
   \   00033B   14           DEC       A
   \   00033C   6025         JZ        ??appSample_event_loop_72
   \   00033E   14           DEC       A
   \   00033F   6026         JZ        ??appSample_event_loop_73
   \   000341   8027         SJMP      ??appSample_event_loop_74
    425                  case 0 : steps_buff[4] = 48;
   \                     ??appSample_event_loop_64:
   \   000343   7430         MOV       A,#0x30
   \   000345   8022         SJMP      ??appSample_event_loop_75
    426                  break;              
    427                  case 1 : steps_buff[4] = 49;
   \                     ??appSample_event_loop_65:
   \   000347   7431         MOV       A,#0x31
   \   000349   801E         SJMP      ??appSample_event_loop_75
    428                  break;              
    429                  case 2 : steps_buff[4] = 50;
   \                     ??appSample_event_loop_66:
   \   00034B   7432         MOV       A,#0x32
   \   00034D   801A         SJMP      ??appSample_event_loop_75
    430                  break;              
    431                  case 3 : steps_buff[4] = 51;
   \                     ??appSample_event_loop_67:
   \   00034F   7433         MOV       A,#0x33
   \   000351   8016         SJMP      ??appSample_event_loop_75
    432                  break;              
    433                  case 4 : steps_buff[4] = 52;
   \                     ??appSample_event_loop_68:
   \   000353   7434         MOV       A,#0x34
   \   000355   8012         SJMP      ??appSample_event_loop_75
    434                  break;              
    435                  case 5 : steps_buff[4] = 53;
   \                     ??appSample_event_loop_69:
   \   000357   7435         MOV       A,#0x35
   \   000359   800E         SJMP      ??appSample_event_loop_75
    436                  break;              
    437                  case 6 : steps_buff[4] = 54;
   \                     ??appSample_event_loop_70:
   \   00035B   7436         MOV       A,#0x36
   \   00035D   800A         SJMP      ??appSample_event_loop_75
    438                  break;              
    439                  case 7 : steps_buff[4] = 55;
   \                     ??appSample_event_loop_71:
   \   00035F   7437         MOV       A,#0x37
   \   000361   8006         SJMP      ??appSample_event_loop_75
    440                  break;              
    441                  case 8 : steps_buff[4] = 56;
   \                     ??appSample_event_loop_72:
   \   000363   7438         MOV       A,#0x38
   \   000365   8002         SJMP      ??appSample_event_loop_75
    442                  break;              
    443                  case 9 : steps_buff[4] = 57;
   \                     ??appSample_event_loop_73:
   \   000367   7439         MOV       A,#0x39
   \                     ??appSample_event_loop_75:
   \   000369   F0           MOVX      @DPTR,A
    444                  break;
    445                default :break;
    446                }
    447                
    448                SampleApp_SendPeriodicMessage(steps_buff, 5 );
   \                     ??appSample_event_loop_74:
   \   00036A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00036A   7C05         MOV       R4,#0x5
   \   00036C   7D00         MOV       R5,#0x0
   \   00036E   7A..         MOV       R2,#steps_buff & 0xff
   \   000370   7B..         MOV       R3,#(steps_buff >> 8) & 0xff
   \   000372   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    449              }
    450              printInt(steps);
   \                     ??appSample_event_loop_4:
   \   000375                ; Setup parameters for call to function printInt
   \   000375   90....       MOV       DPTR,#steps
   \   000378   E0           MOVX      A,@DPTR
   \   000379   FA           MOV       R2,A
   \   00037A   A3           INC       DPTR
   \   00037B   E0           MOVX      A,@DPTR
   \   00037C   FB           MOV       R3,A
   \   00037D   12....       LCALL     `??printInt::?relay`; Banked call to: printInt
    451              // return unprocessed events
    452              return (events ^ SAMPLEAPP_TIMEOUT_EVT);
   \   000380   EE           MOV       A,R6
   \   000381   6401         XRL       A,#0x1
   \   000383   8007         SJMP      ??appSample_event_loop_76
    453            }
    454            
    455            if ( events & SAMPLEAPP_KEY_EVT )
   \                     ??appSample_event_loop_1:
   \   000385   5402         ANL       A,#0x2
   \   000387   6008         JZ        ??appSample_event_loop_77
    456            {
    457          //    printDebugStringNum("key press : ",readKeyPress());
    458          //    
    459              // return unprocessed events
    460              return (events ^ SAMPLEAPP_KEY_EVT);
   \   000389   EE           MOV       A,R6
   \   00038A   6402         XRL       A,#0x2
   \                     ??appSample_event_loop_76:
   \   00038C   FA           MOV       R2,A
   \   00038D   EF           MOV       A,R7
   \                     ??appSample_event_loop_15:
   \   00038E   FB           MOV       R3,A
   \   00038F   8004         SJMP      ??appSample_event_loop_78
    461            }
    462          
    463          
    464            // Discard unknown events
    465            return 0;
   \                     ??appSample_event_loop_77:
   \   000391   7A00         MOV       R2,#0x0
   \   000393   7B00         MOV       R3,#0x0
   \                     ??appSample_event_loop_78:
   \   000395   7F04         MOV       R7,#0x4
   \   000397   02....       LJMP      ?BANKED_LEAVE_XDATA
    466          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     `??printResString::?relay`; Banked call to: printResString
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#steps
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   7A0A         MOV       R2,#0xa
   \   000005   7B00         MOV       R3,#0x0
   \   000007   22           RET
    467          
    468          /*********************************************************************
    469           * LOCAL FUNCTIONS
    470           */
    471          
    472          /*********************************************************************
    473           * @fn      appSample_MessageMSGCB
    474           *
    475           * @brief   Data message processor callback.  This function processes
    476           *          any incoming data - probably from other devices.  So, based
    477           *          on cluster ID, perform the intended action.
    478           *
    479           * @param   none
    480           *
    481           * @return  none
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          void appSample_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     appSample_MessageMSGCB:
    484          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    485            //´®¿ÚÊä³ö½ÓÊÕµ½µÄÊý¾Ý
    486            HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);
   \   000004                ; Setup parameters for call to function HalUARTWrite
   \   000004   EA           MOV       A,R2
   \   000005   2420         ADD       A,#0x20
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FC           MOV       R4,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FD           MOV       R5,A
   \   000012   EA           MOV       A,R2
   \   000013   2422         ADD       A,#0x22
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   3B           ADDC      A,R3
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FA           MOV       R2,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   FB           MOV       R3,A
   \   000020   7900         MOV       R1,#0x0
   \   000022   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    487            
    488            switch ( pkt->clusterId )
    489            {
    490              case APP_PERIODIC_CLUSTERID:
    491                
    492                break;
    493                
    494              case APP_UNICAST_CLUSTERID:
    495                break;
    496                
    497              case APP_MULTICAST_CLUSTERID:
    498                break;
    499            }
    500          }
   \   000025   D083         POP       DPH
   \   000027   D082         POP       DPL
   \   000029   02....       LJMP      ?BRET
    501          
    502          
    503          /*********************************************************************
    504           * FUNCTIONS
    505           */
    506          
    507          /*********************************************************************
    508           * @fn      SampleApp_SendPeriodicMessage
    509           *
    510           * @brief   Send the periodic message.
    511           *
    512           * @param   none
    513           *
    514           * @return  none
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          afStatus_t SampleApp_SendPeriodicMessage( uint8 *data, uint16 datalen )
   \                     SampleApp_SendPeriodicMessage:
    517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    518            afStatus_t state;
    519            afAddrType_t SampleApp_DstAddr;
    520          
    521            SampleApp_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000A   7408         MOV       A,#0x8
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   740F         MOV       A,#0xf
   \   000011   F0           MOVX      @DPTR,A
    522            SampleApp_DstAddr.endPoint = SAMPLE_ENDPOINT;
   \   000012   7409         MOV       A,#0x9
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7424         MOV       A,#0x24
   \   000019   F0           MOVX      @DPTR,A
    523            SampleApp_DstAddr.addr.shortAddr = 0xFFFF;
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   74FF         MOV       A,#-0x1
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    524            
    525            state = AF_DataRequest( &SampleApp_DstAddr, &appSample_epDesc,
    526                                   APP_PERIODIC_CLUSTERID,
    527                                   datalen,
    528                                   data,
    529                                   &appSampleSeqNum,
    530                                   AF_DISCV_ROUTE,
    531                                   AF_DEFAULT_RADIUS );
    532            if ( state == afStatus_SUCCESS )
    533            {
    534          //    printDebugString("msg send success\n"); 
    535            }
    536            else
    537            {
    538              // Error occurred in request to send.
    539          //    printDebugString("msg send error\n"); 
    540            }
    541            
    542            return state;
   \   000025                ; Setup parameters for call to function AF_DataRequest
   \   000025   75..1E       MOV       ?V0,#0x1e
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002D   75....       MOV       ?V0,#appSampleSeqNum & 0xff
   \   000030   75....       MOV       ?V1,#(appSampleSeqNum >> 8) & 0xff
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   8A..         MOV       ?V0,R2
   \   00003A   8B..         MOV       ?V1,R3
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   8C..         MOV       ?V0,R4
   \   000043   8D..         MOV       ?V1,R5
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..01       MOV       ?V0,#0x1
   \   00004D   80..         SJMP      ?Subroutine0
    543          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   75..00       MOV       ?V1,#0x0
   \   000003   78..         MOV       R0,#?V0
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7900         MOV       R1,#0x0
   \   00000A   7C..         MOV       R4,#appSample_epDesc & 0xff
   \   00000C   7D..         MOV       R5,#(appSample_epDesc >> 8) & 0xff
   \   00000E   7409         MOV       A,#0x9
   \   000010   12....       LCALL     ?XSTACK_DISP101_8
   \   000013   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000016   7409         MOV       A,#0x9
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   740C         MOV       A,#0xc
   \   00001D                REQUIRE ??Subroutine6_0
   \   00001D                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
    544          
    545          /*********************************************************************
    546           * @fn      SampleApp_SendUnicastMessage
    547           *
    548           * @brief   Send the unicast message.
    549           *
    550           * @param   none
    551           *
    552           * @return  none
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          afStatus_t SampleApp_SendUnicastMessage( uint16 addr, uint8 *data, uint16 datalen )
   \                     SampleApp_SendUnicastMessage:
    555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    556            afStatus_t state;
    557            afAddrType_t SampleApp_DstAddr;
    558          
    559            SampleApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000A   7408         MOV       A,#0x8
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   7402         MOV       A,#0x2
   \   000011   F0           MOVX      @DPTR,A
    560            SampleApp_DstAddr.endPoint = SAMPLE_ENDPOINT;
   \   000012   7409         MOV       A,#0x9
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine1 & 0xFFFF
    561            SampleApp_DstAddr.addr.shortAddr = addr;
    562            
    563            state = AF_DataRequest( &SampleApp_DstAddr, &appSample_epDesc,
    564                                   APP_UNICAST_CLUSTERID,
    565                                   datalen,
    566                                   data,
    567                                   &appSampleSeqNum,
    568                                   AF_DISCV_ROUTE,
    569                                   AF_DEFAULT_RADIUS );
    570            if ( state == afStatus_SUCCESS )
    571            {
    572          //    printDebugString("msg send success\n"); 
    573            }
    574            else
    575            {
    576              // Error occurred in request to send.
    577          //    printDebugString("msg send error\n"); 
    578            }
    579          
    580            return state;
   \                     ??CrossCallReturnLabel_0:
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001D   75....       MOV       ?V0,#appSampleSeqNum & 0xff
   \   000020   75....       MOV       ?V1,#(appSampleSeqNum >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   8C..         MOV       ?V0,R4
   \   00002A   8D..         MOV       ?V1,R5
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   741B         MOV       A,#0x1b
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000039   75..02       MOV       ?V0,#0x2
   \   00003C   80..         SJMP      ?Subroutine0
    581          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7424         MOV       A,#0x24
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   EA           MOV       A,R2
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   EB           MOV       A,R3
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E                ; Setup parameters for call to function AF_DataRequest
   \   00000E                ; Setup parameters for call to function AF_DataRequest
   \   00000E   75..1E       MOV       ?V0,#0x1e
   \   000011   78..         MOV       R0,#?V0
   \   000013   22           RET
    582          
    583          /*********************************************************************
    584           * @fn      SampleApp_SendMulticastMessage
    585           *
    586           * @brief   Send the multicast message.
    587           *
    588           * @param   none
    589           *
    590           * @return  none
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          afStatus_t SampleApp_SendMulticastMessage( uint16 group, uint8 *data, uint16 datalen )
   \                     SampleApp_SendMulticastMessage:
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    594            afStatus_t state;
    595            afAddrType_t SampleApp_DstAddr;
    596          
    597            SampleApp_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00000A   7408         MOV       A,#0x8
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   7401         MOV       A,#0x1
   \   000011   F0           MOVX      @DPTR,A
    598            SampleApp_DstAddr.endPoint = SAMPLE_ENDPOINT;
   \   000012   7409         MOV       A,#0x9
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine1 & 0xFFFF
    599            SampleApp_DstAddr.addr.shortAddr = group;
    600            
    601            state = AF_DataRequest( &SampleApp_DstAddr, &appSample_epDesc,
    602                                   APP_MULTICAST_CLUSTERID,
    603                                   datalen,
    604                                   data,
    605                                   &appSampleSeqNum,
    606                                   AF_DISCV_ROUTE,
    607                                   AF_DEFAULT_RADIUS );
    608            if ( state == afStatus_SUCCESS )
    609            {
    610          //    printDebugString("msg send success\n"); 
    611            }
    612            else
    613            {
    614              // Error occurred in request to send.
    615          //    printDebugString("msg send error\n"); 
    616            }
    617          
    618            return state;
   \                     ??CrossCallReturnLabel_1:
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001D   75....       MOV       ?V0,#appSampleSeqNum & 0xff
   \   000020   75....       MOV       ?V1,#(appSampleSeqNum >> 8) & 0xff
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   8C..         MOV       ?V0,R4
   \   00002A   8D..         MOV       ?V1,R5
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   741B         MOV       A,#0x1b
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000039   75..03       MOV       ?V0,#0x3
   \   00003C                REQUIRE ?Subroutine0
   \   00003C                ; // Fall through to label ?Subroutine0
    619          }
    620          
    621          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    622          void serialCallback( uint8 port, uint8 events )  //´®¿ÚÊÕµ½ÏûÏ¢´¦Àí
   \                     serialCallback:
    623          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 85
   \   000005   74AB         MOV       A,#-0x55
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
    624            (void)port;
    625            uint8 SampleApp_TxLen;
    626            uint8 SampleApp_TxBuf[85];
    627            
    628            if (events & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
   \   00000C   7407         MOV       A,#0x7
   \   00000E   5E           ANL       A,R6
   \   00000F   603C         JZ        ??serialCallback_0
    629            {
    630              SampleApp_TxLen = HalUARTRead(0,SampleApp_TxBuf,80); 
   \   000011                ; Setup parameters for call to function HalUARTRead
   \   000011   7C50         MOV       R4,#0x50
   \   000013   7D00         MOV       R5,#0x0
   \   000015   AA..         MOV       R2,?XSP + 0
   \   000017   AB..         MOV       R3,?XSP + 1
   \   000019   7900         MOV       R1,#0x0
   \   00001B   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00001E   EA           MOV       A,R2
    631              //Í¸´«Êý¾Ý·¢ËÍ
    632              if(appSample_NwkState==DEV_ZB_COORD)        //Â·ÓÉÆ÷-¹ã²¥
   \   00001F   FC           MOV       R4,A
   \   000020   7D00         MOV       R5,#0x0
   \   000022   90....       MOV       DPTR,#appSample_NwkState
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6409         XRL       A,#0x9
   \   000028   7009         JNZ       ??serialCallback_1
    633              {
    634                SampleApp_SendPeriodicMessage(SampleApp_TxBuf,SampleApp_TxLen);
   \   00002A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00002A   AA..         MOV       R2,?XSP + 0
   \   00002C   AB..         MOV       R3,?XSP + 1
   \   00002E   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
   \   000031   801A         SJMP      ??serialCallback_0
    635              }
    636              else        //ÆäËû-µã²¥µ½Ð­µ÷Æ÷
    637              {
    638                SampleApp_SendUnicastMessage( 0x0000, SampleApp_TxBuf, SampleApp_TxLen );  //·¢ËÍ
   \                     ??serialCallback_1:
   \   000033                ; Setup parameters for call to function SampleApp_SendUnicastMessage
   \   000033   8A..         MOV       ?V0,R2
   \   000035   8D..         MOV       ?V1,R5
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP102_8
   \   000041   7A00         MOV       R2,#0x0
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??SampleApp_SendUnicastMessage::?relay`; Banked call to: SampleApp_SendUnicastMessage
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
    639              }
    640          
    641            }
    642          }
   \                     ??serialCallback_0:
   \   00004D   7455         MOV       A,#0x55
   \   00004F   80..         SJMP      ??Subroutine6_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for appSample_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COORDINATOR\\n">`:
   \   000000   434F4F52     DB "COORDINATOR\012"
   \            44494E41
   \            544F520A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ENDDEVICE\\n">`:
   \   000000   454E4444     DB "ENDDEVICE\012"
   \            45564943
   \            450A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV ERR\\n">`:
   \   000000   44455620     DB "DEV ERR\012"
   \            4552520A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "dddd">`:
   \   000000   64646464     DB "dddd"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "aaaa">`:
   \   000000   61616161     DB "aaaa"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_ZB_COORD\\n">`:
   \   000000   4445565F     DB "DEV_ZB_COORD\012"
   \            5A425F43
   \            4F4F5244
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_ROUTER\\n">`:
   \   000000   4445565F     DB "DEV_ROUTER\012"
   \            524F5554
   \            45520A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_END_DEVICE\\n">`:
   \   000000   4445565F     DB "DEV_END_DEVICE\012"
   \            454E445F
   \            44455649
   \            43450A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "bbbb">`:
   \   000000   62626262     DB "bbbb"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\nmsg send rsp err\\n">`:
   \   000000   0A6D7367     DB "\012msg send rsp err\012"
   \            2073656E
   \            64207273
   \            70206572
   \            720A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "cccc">`:
   \   000000   63636363     DB "cccc"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "eeee">`:
   \   000000   65656565     DB "eeee"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0.96\\' OLED TEST">`:
   \   000000   302E3936     DB "0.96' OLED TEST"
   \            27204F4C
   \            45442054
   \            45535400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CODE:">`:
   \   000000   434F4445     DB "CODE:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5dc1:
   \   000000   C15D0000     DD 24001
    643          
    644          /****************************************************************************
    645          ****************************************************************************/
    646          
    647          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     33   SampleApp_SendMulticastMessage
        0     31   -> AF_DataRequest
      0    126   SampleApp_SendPeriodicMessage
        0     31   -> AF_DataRequest
      0    128   SampleApp_SendUnicastMessage
        0     31   -> AF_DataRequest
      0      9   appSample_Init
        0      9   -> afRegister
        0      9   -> printDebugString
        0      9   -> uartInit
      2     12   appSample_MessageMSGCB
        2      0   -> HalUARTWrite
      0     16   appSample_event_loop
        0     12   -> HalLedSet
        0     12   -> OLED_Clear
        0     12   -> OLED_Init
        0     16   -> OLED_ShowNum
        0     12   -> OLED_ShowString
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> appSample_MessageMSGCB
        0     12   -> myApp_ReadLightLevel
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
        0     12   -> printDebugString
        0     12   -> printInt
        0     12   -> printResString
      0     12   myApp_ReadLightLevel
      0     97   serialCallback
        0     95   -> HalUARTRead
        0     95   -> SampleApp_SendPeriodicMessage
        0     97   -> SampleApp_SendUnicastMessage


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "0.96\' OLED TEST">
       6  ?<Constant "CODE:">
      13  ?<Constant "COORDINATOR\n">
       9  ?<Constant "DEV ERR\n">
      16  ?<Constant "DEV_END_DEVICE\n">
      12  ?<Constant "DEV_ROUTER\n">
      14  ?<Constant "DEV_ZB_COORD\n">
      11  ?<Constant "ENDDEVICE\n">
      19  ?<Constant "\nmsg send rsp err\n">
       5  ?<Constant "aaaa">
       5  ?<Constant "bbbb">
       5  ?<Constant "cccc">
       5  ?<Constant "dddd">
       5  ?<Constant "eeee">
       1  ?<Initializer for appSample_NwkState>
       8  ??Subroutine6_0
      29  ?Subroutine0
      20  ?Subroutine1
       8  ?Subroutine2
       4  ?Subroutine3
      11  ?Subroutine4
      10  ?Subroutine5
       1  ADCCFG
       1  ADCCON1
       1  ADCCON3
       1  ADCH
      60  SampleApp_SendMulticastMessage
      79  SampleApp_SendPeriodicMessage
      62  SampleApp_SendUnicastMessage
       4  __Constant_5dc1
       2  accX
       2  accX_H
       2  accY
       2  accZ
       1  appSampleSeqNum
      90  appSample_Init
      44  appSample_MessageMSGCB
       1  appSample_NwkState
       1  appSample_TaskID
       6  appSample_epDesc
     922  appSample_event_loop
       4  barrier
       2  graX
       2  graY
       2  graZ
      25  myApp_ReadLightLevel
      81  serialCallback
       2  steps
       5  steps_buff
       4  stoss
       1  t
       1  time0_count
      48  -- Other

 
 1 453 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     4 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   145 bytes in segment XDATA_ROM_C
    39 bytes in segment XDATA_Z
 
    49 bytes of CODE     memory
   141 bytes of CONST    memory (+ 4 bytes shared)
     0 bytes of DATA     memory (+ 4 bytes shared)
 1 453 bytes of HUGECODE memory
    40 bytes of XDATA    memory

Errors: none
Warnings: none
