###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Oct/2019  09:20:12
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\hhhho\AppData\Local\Temp\EW2803.tmp
#        (C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\mt\MT_AF.c
#        -D SECURE=1 -D xNV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D LCD_SUPPORTED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D FEATURE_SYSTEM_STATS -lC
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List\MT_AF.lst
#    Object file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj\MT_AF.r51
#
###############################################################################

C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
      4            Revision:       $Revision: 42025 $
      5          
      6            Description:    MonitorTest functions for the AF layer.
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "MT.h"
     47          #include "MT_AF.h"
     48          #include "MT_ZDO.h"
     49          #include "nwk.h"
     50          #include "OnBoard.h"
     51          #include "MT_UART.h"
     52          
     53          #if defined INTER_PAN
     54          #include "stub_aps.h"
     55          #endif
     56          
     57          #if defined ( MT_GP_FUNC )
     58          #include "MT_GP.h"
     59          #endif
     60          
     61          /* ------------------------------------------------------------------------------------------------
     62           *                                          Constants
     63           * ------------------------------------------------------------------------------------------------
     64           */
     65          
     66          #if !defined MT_AF_EXEC_CNT
     67          #define MT_AF_EXEC_CNT  15
     68          #endif
     69          
     70          #if !defined MT_AF_EXEC_DLY
     71          #define MT_AF_EXEC_DLY  1000
     72          #endif
     73          
     74          /* ------------------------------------------------------------------------------------------------
     75           *                                           Typedefs
     76           * ------------------------------------------------------------------------------------------------
     77           */
     78          
     79          typedef struct
     80          {
     81            uint8 *data;
     82            afAddrType_t dstAddr;
     83            endPointDesc_t *epDesc;
     84            uint16 cId;
     85            uint16 dataLen;
     86            uint8 transId;
     87            uint8 txOpts;
     88            uint8 radius;
     89            uint8 tick;
     90          } mtAfDataReq_t;
     91          
     92          typedef struct _mtAfInMsgList_t
     93          {
     94            struct _mtAfInMsgList_t *next;
     95            uint8 *data;
     96            uint32 timestamp;         // Receipt timestamp from MAC.
     97            uint8 tick;
     98          } mtAfInMsgList_t;
     99          
    100          /* ------------------------------------------------------------------------------------------------
    101           *                                        Local Variables
    102           * ------------------------------------------------------------------------------------------------
    103           */
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    107          
    108          /* ------------------------------------------------------------------------------------------------
    109           *                                        Global Variables
    110           * ------------------------------------------------------------------------------------------------
    111           */
    112          
    113          #if defined ( MT_AF_CB_FUNC )
    114          uint16 _afCallbackSub;
    115          #endif
    116          
    117          /* ------------------------------------------------------------------------------------------------
    118           *                                        Local Functions
    119           * ------------------------------------------------------------------------------------------------
    120           */
    121          
    122          static void MT_AfRegister(uint8 *pBuf);
    123          static void MT_AfDelete(uint8 *pBuf);
    124          static void MT_AfDataRequest(uint8 *pBuf);
    125          
    126          #if defined ( ZIGBEEPRO )
    127          static void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    128          #endif
    129          
    130          #if defined INTER_PAN
    131          static void MT_AfInterPanCtl(uint8 *pBuf);
    132          #endif
    133          
    134          static void MT_AfDataRetrieve(uint8 *pBuf);
    135          static void MT_AfDataStore(uint8 *pBuf);
    136          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    137          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    138          
    139          
    140          /**************************************************************************************************
    141           * @fn          MT_AfExec
    142           *
    143           * @brief       This function is invoked by an MT timer event.
    144           *
    145           * input parameters
    146           *
    147           * None.
    148           *
    149           * output parameters
    150           *
    151           * None.
    152           *
    153           * @return      None.
    154           **************************************************************************************************
    155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          void MT_AfExec(void)
   \                     MT_AfExec:
    157          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    158            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP      ??MT_AfExec_1
    159          
    160            while (pItem != NULL)
    161            {
    162              if (--(pItem->tick) == 0)
    163              {
    164                if (pMtAfInMsgList == pItem)
    165                {
    166                  pMtAfInMsgList = pItem->next;
    167                  (void)osal_mem_free(pItem);
    168                  pItem = pMtAfInMsgList;
    169                }
    170                else
    171                {
    172                  pPrev->next = pItem->next;
    173                  (void)osal_mem_free(pItem);
    174                  pItem = pPrev->next;
    175                }
    176              }
    177              else
    178              {
    179                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    180                pItem = pItem->next;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \                     ??MT_AfExec_1:
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FA           MOV       R2,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FB           MOV       R3,A
    181              }
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   6035         JZ        ??MT_AfExec_3
   \   00001B   EA           MOV       A,R2
   \   00001C   2408         ADD       A,#0x8
   \   00001E   F582         MOV       DPL,A
   \   000020   E4           CLR       A
   \   000021   3B           ADDC      A,R3
   \   000022   F583         MOV       DPH,A
   \   000024   E0           MOVX      A,@DPTR
   \   000025   14           DEC       A
   \   000026   F0           MOVX      @DPTR,A
   \   000027   70E1         JNZ       ??MT_AfExec_2
   \   000029   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00002C   EA           MOV       A,R2
   \   00002D   68           XRL       A,R0
   \   00002E   7002         JNZ       ??MT_AfExec_4
   \   000030   EB           MOV       A,R3
   \   000031   69           XRL       A,R1
   \                     ??MT_AfExec_4:
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   7008         JNZ       ??MT_AfExec_5
   \   000038   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00003B   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00003E   80C5         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   000040   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   80C2         SJMP      ??MT_AfExec_1
    182            }
    183          
    184            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000050   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000053   6015         JZ        ??MT_AfExec_6
    185            {
    186              if (--(pMtAfDataReq->tick) == 0)
   \   000055   E8           MOV       A,R0
   \   000056   2417         ADD       A,#0x17
   \   000058   F582         MOV       DPL,A
   \   00005A   E4           CLR       A
   \   00005B   39           ADDC      A,R1
   \   00005C   F583         MOV       DPH,A
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   14           DEC       A
   \   000060   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   7004         JNZ       ??MT_AfExec_6
    187              {
    188                (void)osal_mem_free(pMtAfDataReq);
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   12....       LCALL     ?Subroutine3 & 0xFFFF
    189                pMtAfDataReq = NULL;
    190              }
    191            }
   \                     ??CrossCallReturnLabel_2:
   \   000069   F0           MOVX      @DPTR,A
    192          
    193            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   00006A   90....       MOV       DPTR,#pMtAfInMsgList
   \   00006D   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000070   7005         JNZ       ??MT_AfExec_7
   \   000072   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000075   6012         JZ        ??CrossCallReturnLabel_26
    194            {
    195              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000077                ; Setup parameters for call to function osal_start_timerEx
   \   000077   90....       MOV       DPTR,#__Constant_3e8
   \   00007A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   \   000083   E9           MOV       A,R1
   \   000084   6003         JZ        ??CrossCallReturnLabel_26
    196              {
    197                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000086                ; Setup parameters for call to function osal_set_event
   \   000086   12....       LCALL     ?Subroutine16 & 0xFFFF
    198              }
    199            }
    200          }
   \                     ??CrossCallReturnLabel_26:
   \   000089   7F01         MOV       R7,#0x1
   \   00008B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7A08         MOV       R2,#0x8
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#MT_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7A08         MOV       R2,#0x8
   \   000002   7B00         MOV       R3,#0x0
   \   000004   90....       MOV       DPTR,#MT_TaskID
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00000C   7404         MOV       A,#0x4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pMtAfDataReq
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C8           XCH       A,R0
   \   000009   2417         ADD       A,#0x17
   \   00000B   F582         MOV       DPL,A
   \   00000D   E4           CLR       A
   \   00000E   38           ADDC      A,R0
   \   00000F   F583         MOV       DPH,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   90....       MOV       DPTR,#pMtAfInMsgList
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00000B   90....       MOV       DPTR,#pMtAfDataReq
   \   00000E   E4           CLR       A
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   22           RET
    201          
    202          /***************************************************************************************************
    203           * @fn      MT_AfCommandProcessing
    204           *
    205           * @brief   Process all the AF commands that are issued by test tool
    206           *
    207           * @param   pBuf - pointer to the received buffer
    208           *
    209           * @return  status
    210           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    213            uint8 status = MT_RPC_SUCCESS;
   \   00000A   75..00       MOV       ?V0,#0x0
    214          
    215            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000D   EA           MOV       A,R2
   \   00000E   2403         ADD       A,#0x3
   \   000010   F5..         MOV       ?V2,A
   \   000012   E4           CLR       A
   \   000013   3B           ADDC      A,R3
   \   000014   F5..         MOV       ?V3,A
   \   000016   EA           MOV       A,R2
   \   000017   2402         ADD       A,#0x2
   \   000019   F8           MOV       R0,A
   \   00001A   E4           CLR       A
   \   00001B   3B           ADDC      A,R3
   \   00001C   F9           MOV       R1,A
   \   00001D   8882         MOV       DPL,R0
   \   00001F   F583         MOV       DPH,A
   \   000021   E0           MOVX      A,@DPTR
   \   000022   6031         JZ        ??MT_AfCommandProcessing_0
   \   000024   14           DEC       A
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??MT_AfCommandProcessing_1 & 0xFFFF
   \   00002A   14           DEC       A
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??MT_AfCommandProcessing_1 & 0xFFFF
   \   000030   14           DEC       A
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??MT_AfCommandProcessing_2 & 0xFFFF
   \   000036   14           DEC       A
   \   000037   607A         JZ        ??MT_AfCommandProcessing_3
   \   000039   24F3         ADD       A,#-0xd
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??MT_AfCommandProcessing_4 & 0xFFFF
   \   000040   14           DEC       A
   \   000041   7003         JNZ       $+5
   \   000043   02....       LJMP      ??MT_AfCommandProcessing_5 & 0xFFFF
   \   000046   14           DEC       A
   \   000047   7003         JNZ       $+5
   \   000049   02....       LJMP      ??MT_AfCommandProcessing_6 & 0xFFFF
   \   00004C   14           DEC       A
   \   00004D   7003         JNZ       $+5
   \   00004F   02....       LJMP      ??MT_AfCommandProcessing_7 & 0xFFFF
   \   000052   02....       LJMP      ??MT_AfCommandProcessing_8 & 0xFFFF
    216            {
    217              case MT_AF_REGISTER:
    218                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000055   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V1,A
   \   00005B                ; Setup parameters for call to function osal_mem_alloc
   \   00005B   7A06         MOV       R2,#0x6
   \   00005D   7B00         MOV       R3,#0x0
   \   00005F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000062   8A..         MOV       ?V4,R2
   \   000064   8B..         MOV       ?V5,R3
   \   000066   AE..         MOV       R6,?V4
   \   000068   AF..         MOV       R7,?V5
   \   00006A   EA           MOV       A,R2
   \   00006B   4F           ORL       A,R7
   \   00006C   603A         JZ        ??MT_AfCommandProcessing_9
   \   00006E   8A82         MOV       DPL,R2
   \   000070   8B83         MOV       DPH,R3
   \   000072   A3           INC       DPTR
   \   000073   74..         MOV       A,#MT_TaskID & 0xff
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   000079   F0           MOVX      @DPTR,A
   \   00007A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00007A   EA           MOV       A,R2
   \   00007B   FC           MOV       R4,A
   \   00007C   EB           MOV       A,R3
   \   00007D   FD           MOV       R5,A
   \   00007E   AA..         MOV       R2,?V2
   \   000080   AB..         MOV       R3,?V3
   \   000082   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   000085   E9           MOV       A,R1
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   700F         JNZ       ??MT_AfCommandProcessing_10
   \   00008F                ; Setup parameters for call to function afRegister
   \   00008F   EE           MOV       A,R6
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   000096   E9           MOV       A,R1
   \   000097   85..82       MOV       DPL,?XSP + 0
   \   00009A   85..83       MOV       DPH,?XSP + 1
   \   00009D   F0           MOVX      @DPTR,A
   \                     ??MT_AfCommandProcessing_10:
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   6007         JZ        ??MT_AfCommandProcessing_9
   \   0000A1                ; Setup parameters for call to function osal_mem_free
   \   0000A1   EE           MOV       A,R6
   \   0000A2   FA           MOV       R2,A
   \   0000A3   EF           MOV       A,R7
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??MT_AfCommandProcessing_9:
   \   0000A8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000A8   AC..         MOV       R4,?XSP + 0
   \   0000AA   AD..         MOV       R5,?XSP + 1
   \   0000AC   7B01         MOV       R3,#0x1
   \   0000AE   AA..         MOV       R2,?V1
   \   0000B0   02....       LJMP      ??MT_AfCommandProcessing_11 & 0xFFFF
    219                break;
    220          
    221              case MT_AF_DELETE:
    222                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   0000B3   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   FE           MOV       R6,A
   \   0000B8                ; Setup parameters for call to function afDelete
   \   0000B8   85..82       MOV       DPL,?V2
   \   0000BB   85..83       MOV       DPH,?V3
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F9           MOV       R1,A
   \   0000C0   12....       LCALL     `??afDelete::?relay`; Banked call to: afDelete
   \   0000C3   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C6   EE           MOV       A,R6
   \   0000C7   FA           MOV       R2,A
   \   0000C8   02....       LJMP      ??MT_AfCommandProcessing_11 & 0xFFFF
    223                break;
    224          
    225              case MT_AF_DATA_REQUEST:
    226              case MT_AF_DATA_REQUEST_EXT:
    227                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   0000CB                ; Setup parameters for call to function MT_AfDataRequest
   \   0000CB   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    228                break;
   \   0000CE   02....       LJMP      ??MT_AfCommandProcessing_12 & 0xFFFF
    229          
    230          #if defined( ZIGBEEPRO )
    231              case MT_AF_DATA_REQUEST_SRCRTG:
    232                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   0000D1                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   0000D1   12....       LCALL     `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    233                break;
   \   0000D4   02....       LJMP      ??MT_AfCommandProcessing_12 & 0xFFFF
    234          #endif
    235          
    236          #if defined INTER_PAN
    237              case MT_AF_INTER_PAN_CTL:
    238                MT_AfInterPanCtl(pBuf);
    239                break;
    240          #endif
    241          
    242              case MT_AF_DATA_RETRIEVE:
    243                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   0000D7                ; Setup parameters for call to function MT_AfDataRetrieve
   \   0000D7   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    244                break;
   \   0000DA   02....       LJMP      ??MT_AfCommandProcessing_12 & 0xFFFF
    245          
    246              case MT_AF_DATA_STORE:
    247                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   0000DD                ; Setup parameters for call to function MT_AfDataStore
   \   0000DD   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    248                break;
   \   0000E0   02....       LJMP      ??MT_AfCommandProcessing_12 & 0xFFFF
    249          
    250              case MT_AF_APSF_CONFIG_SET:
    251                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   0000E3   8A82         MOV       DPL,R2
   \   0000E5   8B83         MOV       DPH,R3
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   C0E0         PUSH      A
   \   0000EE   7401         MOV       A,#0x1
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   D0E0         POP       A
   \   0000F5   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   C0E0         PUSH      A
   \   0000FC   7402         MOV       A,#0x2
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   D0E0         POP       A
   \   000103   F0           MOVX      @DPTR,A
   \   000104                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000104   7401         MOV       A,#0x1
   \   000106   12....       LCALL     ?XSTACK_DISP101_8
   \   000109   85..82       MOV       DPL,?V2
   \   00010C   85..83       MOV       DPH,?V3
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   F9           MOV       R1,A
   \   000111   12....       LCALL     `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   000114   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000117   7A13         MOV       R2,#0x13
   \   000119   8045         SJMP      ??MT_AfCommandProcessing_11
    252                break;
    253          
    254              case MT_AF_APSF_CONFIG_GET:
    255                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   00011B   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   00011E   7401         MOV       A,#0x1
   \   000120   12....       LCALL     ?XSTACK_DISP102_8
   \   000123   7402         MOV       A,#0x2
   \   000125   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000128                ; Setup parameters for call to function afAPSF_ConfigGet
   \   000128   04           INC       A
   \   000129   12....       LCALL     ?XSTACK_DISP101_8
   \   00012C   85..82       MOV       DPL,?V2
   \   00012F   85..83       MOV       DPH,?V3
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F9           MOV       R1,A
   \   000134   12....       LCALL     `??afAPSF_ConfigGet::?relay`; Banked call to: afAPSF_ConfigGet
   \   000137   7401         MOV       A,#0x1
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   C0E0         PUSH      A
   \   00013F   7403         MOV       A,#0x3
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   D0E0         POP       A
   \   000146   F0           MOVX      @DPTR,A
   \   000147   7402         MOV       A,#0x2
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   C0E0         PUSH      A
   \   00014F   7404         MOV       A,#0x4
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   D0E0         POP       A
   \   000156   F0           MOVX      @DPTR,A
   \   000157                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000157   7403         MOV       A,#0x3
   \   000159   12....       LCALL     ?XSTACK_DISP102_8
   \   00015C   7B03         MOV       R3,#0x3
   \   00015E   7A14         MOV       R2,#0x14
   \                     ??MT_AfCommandProcessing_11:
   \   000160   7964         MOV       R1,#0x64
   \   000162   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    256                break;
   \   000165   8003         SJMP      ??MT_AfCommandProcessing_12
    257          
    258              default:
    259                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_8:
   \   000167   75..02       MOV       ?V0,#0x2
    260                break;
    261            }
    262          
    263            return status;
   \                     ??MT_AfCommandProcessing_12:
   \   00016A   A9..         MOV       R1,?V0
   \   00016C   7405         MOV       A,#0x5
   \   00016E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000171   7F06         MOV       R7,#0x6
   \   000173   02....       LJMP      ?BANKED_LEAVE_XDATA
    264          }
    265          
    266          /***************************************************************************************************
    267           * @fn      MT_AfRegister
    268           *
    269           * @brief   Process AF Register command
    270           *
    271           * @param   pBuf - pointer to the received buffer
    272           *
    273           * @return  none
    274           ***************************************************************************************************/
    275          static void MT_AfRegister(uint8 *pBuf)
    276          {
    277            uint8 cmdId;
    278            uint8 retValue = ZMemError;
    279            endPointDesc_t *epDesc;
    280          
    281            /* parse header */
    282            cmdId = pBuf[MT_RPC_POS_CMD1];
    283            pBuf += MT_RPC_FRAME_HDR_SZ;
    284          
    285            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
    286            if ( epDesc )
    287            {
    288              epDesc->task_id = &MT_TaskID;
    289              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
    290              if ( retValue == ZSuccess )
    291              {
    292                retValue = afRegister( epDesc );
    293              }
    294          
    295              if ( retValue != ZSuccess )
    296              {
    297                osal_mem_free( epDesc );
    298              }
    299            }
    300          
    301            /* Build and send back the response */
    302            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    303          }
    304          
    305          /***************************************************************************************************
    306           * @fn      MT_AfDelete
    307           *
    308           * @brief   Process AF Delete Endpoint command
    309           *
    310           * @param   pBuf - pointer to the received buffer
    311           *
    312           * @return  none
    313           ***************************************************************************************************/
    314          static void MT_AfDelete(uint8 *pBuf)
    315          {
    316            uint8 cmdId;
    317            uint8 retValue = ZMemError;
    318          
    319            /* parse header */
    320            cmdId = pBuf[MT_RPC_POS_CMD1];
    321            pBuf += MT_RPC_FRAME_HDR_SZ;
    322          
    323            retValue = afDelete( *pBuf );
    324          
    325            /* Build and send back the response */
    326            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    327          }
    328          
    329          /***************************************************************************************************
    330           * @fn      MT_AfDataRequest
    331           *
    332           * @brief   Process AF Register command
    333           *
    334           * @param   pBuf - pointer to the received buffer
    335           *
    336           * @return  none
    337           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          static void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    340            #define MT_AF_REQ_MSG_LEN  10
    341            #define MT_AF_REQ_MSG_EXT  10
    342          
    343            endPointDesc_t *epDesc;
    344            afAddrType_t dstAddr;
    345            cId_t cId;
    346            uint8 transId, txOpts, radius;
    347            uint8 cmd0, cmd1;
    348            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine41 & 0xFFFF
    349            uint16 dataLen, tempLen;
    350          
    351            /* Parse header */
    352            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_75:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V12,A
    353            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V9,A
    354            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000023   EA           MOV       A,R2
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??MT_AfDataRequest_0
   \   000029   0F           INC       R7
    355          
    356            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002A   7402         MOV       A,#0x2
   \   00002C   65..         XRL       A,?V9
   \   00002E   7077         JNZ       ??MT_AfDataRequest_1
    357            {
    358              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   740A         MOV       A,#0xa
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E8           MOV       A,R0
   \   00003C   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00003F   AE82         MOV       R6,DPL
   \   000041   AF83         MOV       R7,DPH
    359          
    360              if (dstAddr.addrMode == afAddr64Bit)
   \   000043   7403         MOV       A,#0x3
   \   000045   68           XRL       A,R0
   \   000046   701D         JNZ       ??MT_AfDataRequest_2
    361              {
    362                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   8E..         MOV       ?V0,R6
   \   00004A   8F..         MOV       ?V1,R7
   \   00004C   75..00       MOV       ?V2,#0x0
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000054   7C08         MOV       R4,#0x8
   \   000056   7D00         MOV       R5,#0x0
   \   000058   7405         MOV       A,#0x5
   \   00005A   12....       LCALL     ?XSTACK_DISP101_8
   \   00005D   12....       LCALL     ??Subroutine48_0 & 0xFFFF
    363              }
   \                     ??CrossCallReturnLabel_102:
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   8011         SJMP      ??MT_AfDataRequest_3
    364              else
    365              {
    366                dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_2:
   \   000065                ; Setup parameters for call to function osal_build_uint16
   \   000065   EE           MOV       A,R6
   \   000066   FA           MOV       R2,A
   \   000067   EF           MOV       A,R7
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   EA           MOV       A,R2
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   EB           MOV       A,R3
   \   000075   F0           MOVX      @DPTR,A
    367              }
    368              pBuf += Z_EXTADDR_LEN;
    369          
    370              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   C0E0         PUSH      A
   \   000085   740B         MOV       A,#0xb
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   D0E0         POP       A
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   EE           MOV       A,R6
   \   00008E   2409         ADD       A,#0x9
   \   000090   FE           MOV       R6,A
   \   000091   5001         JNC       ??MT_AfDataRequest_4
   \   000093   0F           INC       R7
    371              dstAddr.panId = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_4:
   \   000094                ; Setup parameters for call to function osal_build_uint16
   \   000094   FA           MOV       R2,A
   \   000095   EF           MOV       A,R7
   \   000096   FB           MOV       R3,A
   \   000097   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00009A   740C         MOV       A,#0xc
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ?Subroutine26 & 0xFFFF
    372              pBuf += 2;
    373            }
   \                     ??CrossCallReturnLabel_43:
   \   0000A2   5035         JNC       ??MT_AfDataRequest_5
   \   0000A4   0F           INC       R7
   \   0000A5   8032         SJMP      ??MT_AfDataRequest_5
    374            else
    375            {
    376              /* Destination address */
    377              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000A7   740A         MOV       A,#0xa
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   F0           MOVX      @DPTR,A
    378              dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   0000AF                ; Setup parameters for call to function osal_build_uint16
   \   0000AF   0A           INC       R2
   \   0000B0   0A           INC       R2
   \   0000B1   0A           INC       R2
   \   0000B2   EF           MOV       A,R7
   \   0000B3   FB           MOV       R3,A
   \   0000B4   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000B7   7402         MOV       A,#0x2
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL     ?Subroutine19 & 0xFFFF
    379              pBuf += 2;
    380          
    381              /* Destination endpoint */
    382              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_33:
   \   0000BF   C0E0         PUSH      A
   \   0000C1   740B         MOV       A,#0xb
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   D0E0         POP       A
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   EE           MOV       A,R6
   \   0000CA   2403         ADD       A,#0x3
   \   0000CC   FE           MOV       R6,A
   \   0000CD   5001         JNC       ??MT_AfDataRequest_6
   \   0000CF   0F           INC       R7
    383              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_6:
   \   0000D0   740C         MOV       A,#0xc
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E4           CLR       A
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   F0           MOVX      @DPTR,A
    384            }
    385          
    386            /* Source endpoint */
    387            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   0000D9                ; Setup parameters for call to function afFindEndPointDesc
   \   0000D9   8E82         MOV       DPL,R6
   \   0000DB   8F83         MOV       DPH,R7
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F9           MOV       R1,A
   \   0000DF   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000E2   8A..         MOV       ?V10,R2
   \   0000E4   8B..         MOV       ?V11,R3
   \   0000E6   8E82         MOV       DPL,R6
   \   0000E8   8F83         MOV       DPH,R7
   \   0000EA   A3           INC       DPTR
   \   0000EB   AE82         MOV       R6,DPL
   \   0000ED   AF83         MOV       R7,DPH
    388          
    389            /* ClusterId */
    390            cId = osal_build_uint16( pBuf );
   \   0000EF                ; Setup parameters for call to function osal_build_uint16
   \   0000EF   EE           MOV       A,R6
   \   0000F0   FA           MOV       R2,A
   \   0000F1   EF           MOV       A,R7
   \   0000F2   FB           MOV       R3,A
   \   0000F3   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000F6   8A..         MOV       ?V2,R2
   \   0000F8   8B..         MOV       ?V3,R3
    391            pBuf +=2;
    392          
    393            /* TransId */
    394            transId = *pBuf++;
   \   0000FA   8E82         MOV       DPL,R6
   \   0000FC   8F83         MOV       DPH,R7
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   E0           MOVX      A,@DPTR
   \   000101   C0E0         PUSH      A
   \   000103   7401         MOV       A,#0x1
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   D0E0         POP       A
   \   00010A   F0           MOVX      @DPTR,A
    395          
    396            /* TxOption */
    397            txOpts = *pBuf++;
   \   00010B   8E82         MOV       DPL,R6
   \   00010D   8F83         MOV       DPH,R7
   \   00010F   12....       LCALL     ?Subroutine9 & 0xFFFF
    398          
    399            /* Radius */
    400            radius = *pBuf++;
   \                     ??CrossCallReturnLabel_13:
   \   000112   E0           MOVX      A,@DPTR
   \   000113   F5..         MOV       ?V7,A
   \   000115   EE           MOV       A,R6
   \   000116   2405         ADD       A,#0x5
   \   000118   FE           MOV       R6,A
   \   000119   5001         JNC       ??MT_AfDataRequest_7
   \   00011B   0F           INC       R7
    401          
    402            /* Length */
    403            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_7:
   \   00011C   7402         MOV       A,#0x2
   \   00011E   65..         XRL       A,?V9
   \   000120   701C         JNZ       ??MT_AfDataRequest_8
    404            {
    405              dataLen = osal_build_uint16( pBuf );
   \   000122                ; Setup parameters for call to function osal_build_uint16
   \   000122   EE           MOV       A,R6
   \   000123   FA           MOV       R2,A
   \   000124   EF           MOV       A,R7
   \   000125   FB           MOV       R3,A
   \   000126   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000129   8A..         MOV       ?V0,R2
   \   00012B   8B..         MOV       ?V1,R3
    406              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   00012D   EA           MOV       A,R2
   \   00012E   2414         ADD       A,#0x14
   \   000130   F8           MOV       R0,A
   \   000131   E4           CLR       A
   \   000132   35..         ADDC      A,?V1
   \   000134   F9           MOV       R1,A
    407              pBuf += 2;
   \   000135   EE           MOV       A,R6
   \   000136   2402         ADD       A,#0x2
   \   000138   FE           MOV       R6,A
   \   000139   5018         JNC       ??MT_AfDataRequest_9
   \   00013B   0F           INC       R7
   \   00013C   8015         SJMP      ??MT_AfDataRequest_9
    408            }
    409            else
    410            {
    411              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   00013E   8E82         MOV       DPL,R6
   \   000140   8F83         MOV       DPH,R7
   \   000142   E0           MOVX      A,@DPTR
   \   000143   F5..         MOV       ?V0,A
   \   000145   75..00       MOV       ?V1,#0x0
   \   000148   A3           INC       DPTR
   \   000149   0E           INC       R6
   \   00014A   AF83         MOV       R7,DPH
    412              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   00014C   240A         ADD       A,#0xa
   \   00014E   F8           MOV       R0,A
   \   00014F   E4           CLR       A
   \   000150   3400         ADDC      A,#0x0
   \   000152   F9           MOV       R1,A
    413            }
    414          
    415            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   000153   E5..         MOV       A,?V10
   \   000155   45..         ORL       A,?V11
   \   000157   6011         JZ        ??MT_AfDataRequest_10
    416            {
    417              retValue = afStatus_INVALID_PARAMETER;
    418            }
    419            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000159   C3           CLR       C
   \   00015A   E8           MOV       A,R0
   \   00015B   94FB         SUBB      A,#-0x5
   \   00015D   E9           MOV       A,R1
   \   00015E   9400         SUBB      A,#0x0
   \   000160   5003         JNC       $+5
   \   000162   02....       LJMP      ??MT_AfDataRequest_11 & 0xFFFF
    420            {
    421              if (pMtAfDataReq != NULL)
   \   000165   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000168   600B         JZ        ??MT_AfDataRequest_12
    422              {
    423                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_10:
   \   00016A   85..82       MOV       DPL,?XSP + 0
   \   00016D   85..83       MOV       DPH,?XSP + 1
   \   000170   7402         MOV       A,#0x2
   \   000172   02....       LJMP      ??MT_AfDataRequest_13 & 0xFFFF
    424              }
    425              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_12:
   \   000175                ; Setup parameters for call to function osal_mem_alloc
   \   000175   E5..         MOV       A,?V0
   \   000177   2418         ADD       A,#0x18
   \   000179   FA           MOV       R2,A
   \   00017A   E4           CLR       A
   \   00017B   35..         ADDC      A,?V1
   \   00017D   FB           MOV       R3,A
   \   00017E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000181   90....       MOV       DPTR,#pMtAfDataReq
   \   000184   EA           MOV       A,R2
   \   000185   F0           MOVX      @DPTR,A
   \   000186   A3           INC       DPTR
   \   000187   EB           MOV       A,R3
   \   000188   F0           MOVX      @DPTR,A
   \   000189   F9           MOV       R1,A
   \   00018A   EA           MOV       A,R2
   \   00018B   49           ORL       A,R1
   \   00018C   85..82       MOV       DPL,?XSP + 0
   \   00018F   85..83       MOV       DPH,?XSP + 1
   \   000192   7005         JNZ       ??MT_AfDataRequest_14
    426              {
    427                retValue = afStatus_MEM_FAIL;
   \   000194   7410         MOV       A,#0x10
   \   000196   02....       LJMP      ??MT_AfDataRequest_13 & 0xFFFF
    428              }
    429              else
    430              {
    431                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   000199   E4           CLR       A
   \   00019A   F0           MOVX      @DPTR,A
    432          
    433                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   00019B   90....       MOV       DPTR,#pMtAfDataReq
   \   00019E   E0           MOVX      A,@DPTR
   \   00019F   2418         ADD       A,#0x18
   \   0001A1   FA           MOV       R2,A
   \   0001A2   A3           INC       DPTR
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   3400         ADDC      A,#0x0
   \   0001A6   FB           MOV       R3,A
   \   0001A7   90....       MOV       DPTR,#pMtAfDataReq
   \   0001AA   E0           MOVX      A,@DPTR
   \   0001AB   F8           MOV       R0,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   F583         MOV       DPH,A
   \   0001B0   8882         MOV       DPL,R0
   \   0001B2   EA           MOV       A,R2
   \   0001B3   F0           MOVX      @DPTR,A
   \   0001B4   A3           INC       DPTR
   \   0001B5   EB           MOV       A,R3
   \   0001B6   F0           MOVX      @DPTR,A
    434                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001B7                ; Setup parameters for call to function osal_memcpy
   \   0001B7   7402         MOV       A,#0x2
   \   0001B9   12....       LCALL     ?XSTACK_DISP100_8
   \   0001BC   88..         MOV       ?V4,R0
   \   0001BE   89..         MOV       ?V5,R1
   \   0001C0   75..00       MOV       ?V6,#0x0
   \   0001C3   78..         MOV       R0,#?V4
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001C8   7C0C         MOV       R4,#0xc
   \   0001CA   7D00         MOV       R5,#0x0
   \   0001CC   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0001CF   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0001D2   12....       LCALL     ?DEALLOC_XSTACK8
    435                pMtAfDataReq->epDesc = epDesc;
   \   0001D5   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0001D8   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0001DB   E5..         MOV       A,?V10
   \   0001DD   F0           MOVX      @DPTR,A
   \   0001DE   A3           INC       DPTR
   \   0001DF   E5..         MOV       A,?V11
   \   0001E1   12....       LCALL     ?Subroutine6 & 0xFFFF
    436                pMtAfDataReq->cId = cId;
   \                     ??CrossCallReturnLabel_81:
   \   0001E4   2410         ADD       A,#0x10
   \   0001E6   F582         MOV       DPL,A
   \   0001E8   E4           CLR       A
   \   0001E9   38           ADDC      A,R0
   \   0001EA   F583         MOV       DPH,A
   \   0001EC   E5..         MOV       A,?V2
   \   0001EE   F0           MOVX      @DPTR,A
   \   0001EF   A3           INC       DPTR
   \   0001F0   E5..         MOV       A,?V3
   \   0001F2   12....       LCALL     ?Subroutine6 & 0xFFFF
    437                pMtAfDataReq->dataLen = dataLen;
   \                     ??CrossCallReturnLabel_82:
   \   0001F5   2412         ADD       A,#0x12
   \   0001F7   F582         MOV       DPL,A
   \   0001F9   E4           CLR       A
   \   0001FA   38           ADDC      A,R0
   \   0001FB   F583         MOV       DPH,A
   \   0001FD   E5..         MOV       A,?V0
   \   0001FF   F0           MOVX      @DPTR,A
   \   000200   A3           INC       DPTR
   \   000201   E5..         MOV       A,?V1
   \   000203   F0           MOVX      @DPTR,A
    438                pMtAfDataReq->transId = transId;
   \   000204   7401         MOV       A,#0x1
   \   000206   12....       LCALL     ?XSTACK_DISP0_8
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   C0E0         PUSH      A
   \   00020C   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00020F   2414         ADD       A,#0x14
   \   000211   F582         MOV       DPL,A
   \   000213   E4           CLR       A
   \   000214   38           ADDC      A,R0
   \   000215   F583         MOV       DPH,A
   \   000217   D0E0         POP       A
   \   000219   12....       LCALL     ?Subroutine6 & 0xFFFF
    439                pMtAfDataReq->txOpts = txOpts;
   \                     ??CrossCallReturnLabel_83:
   \   00021C   2415         ADD       A,#0x15
   \   00021E   F582         MOV       DPL,A
   \   000220   E4           CLR       A
   \   000221   38           ADDC      A,R0
   \   000222   F583         MOV       DPH,A
   \   000224   E5..         MOV       A,?V8
   \   000226   12....       LCALL     ?Subroutine6 & 0xFFFF
    440                pMtAfDataReq->radius = radius;
   \                     ??CrossCallReturnLabel_84:
   \   000229   2416         ADD       A,#0x16
   \   00022B   F582         MOV       DPL,A
   \   00022D   E4           CLR       A
   \   00022E   38           ADDC      A,R0
   \   00022F   F583         MOV       DPH,A
   \   000231   E5..         MOV       A,?V7
   \   000233   12....       LCALL     ?Subroutine5 & 0xFFFF
    441          
    442                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    443                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_6:
   \   000236   740F         MOV       A,#0xf
   \   000238   F0           MOVX      @DPTR,A
    444                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000239                ; Setup parameters for call to function osal_start_timerEx
   \   000239   90....       MOV       DPTR,#__Constant_3e8
   \   00023C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00023F   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000242   12....       LCALL     ?DEALLOC_XSTACK8
   \   000245   E9           MOV       A,R1
   \   000246   604A         JZ        ??MT_AfDataRequest_15
    445                {
    446                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000248                ; Setup parameters for call to function osal_set_event
   \   000248   12....       LCALL     ?Subroutine16 & 0xFFFF
    447                }
    448              }
    449            }
   \                     ??CrossCallReturnLabel_27:
   \   00024B   8045         SJMP      ??MT_AfDataRequest_15
    450          #if defined ( MT_GP_FUNC )
    451            else if ( ( cmd1 == MT_AF_DATA_REQUEST_EXT )
    452                     && ( dstAddr.endPoint == ZGP_ENDPOINT_ID )
    453                     && ( dstAddr.panId == 0 )
    454                     && ( dstAddr.addrMode == afAddr64Bit ) )// loopback support
    455            {
    456              retValue = MT_GpGenerateResponse( dstAddr.addr.extAddr, dataLen, pBuf );
    457            }
    458          #endif
    459            else
    460            {
    461              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_11:
   \   00024D                ; Setup parameters for call to function AF_DataRequest
   \   00024D   E5..         MOV       A,?V7
   \   00024F   F5..         MOV       ?V4,A
   \   000251   78..         MOV       R0,#?V4
   \   000253   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000256   7402         MOV       A,#0x2
   \   000258   12....       LCALL     ?XSTACK_DISP100_8
   \   00025B   88..         MOV       ?V4,R0
   \   00025D   89..         MOV       ?V5,R1
   \   00025F   78..         MOV       R0,#?V4
   \   000261   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000264   8E..         MOV       ?V4,R6
   \   000266   8F..         MOV       ?V5,R7
   \   000268   78..         MOV       R0,#?V4
   \   00026A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00026D   78..         MOV       R0,#?V0
   \   00026F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000272   78..         MOV       R0,#?V2
   \   000274   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000277   A9..         MOV       R1,?V8
   \   000279   AC..         MOV       R4,?V10
   \   00027B   AD..         MOV       R5,?V11
   \   00027D   740B         MOV       A,#0xb
   \   00027F   12....       LCALL     ?XSTACK_DISP101_8
   \   000282   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000285   7409         MOV       A,#0x9
   \   000287   12....       LCALL     ?DEALLOC_XSTACK8
   \   00028A   E9           MOV       A,R1
   \   00028B   85..82       MOV       DPL,?XSP + 0
   \   00028E   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_13:
   \   000291   F0           MOVX      @DPTR,A
    462            }
    463          
    464            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_15:
   \   000292   74E0         MOV       A,#-0x20
   \   000294   55..         ANL       A,?V12
   \   000296   6420         XRL       A,#0x20
   \   000298   700D         JNZ       ??MT_AfDataRequest_16
    465            {
    466              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   00029A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00029A   AC..         MOV       R4,?XSP + 0
   \   00029C   AD..         MOV       R5,?XSP + 1
   \   00029E   7B01         MOV       R3,#0x1
   \   0002A0   AA..         MOV       R2,?V9
   \   0002A2   7964         MOV       R1,#0x64
   \   0002A4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    467            }
    468          }
   \                     ??MT_AfDataRequest_16:
   \   0002A7   740E         MOV       A,#0xe
   \   0002A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002AC   7F0D         MOV       R7,#0xd
   \   0002AE   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine43_0
   \   000001                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C8           XCH       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V8,A
   \   000006   8E82         MOV       DPL,R6
   \   000008   8F83         MOV       DPH,R7
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2402         ADD       A,#0x2
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    469          
    470          #if defined( ZIGBEEPRO )
    471          /***************************************************************************************************
    472           * @fn      MT_AfDataRequestSrcRtg
    473           *
    474           * @brief   Process AF Register command
    475           *
    476           * @param   pBuf - pointer to the received buffer
    477           *
    478           * @return  none
    479           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          static void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    482            uint8 cmdId, dataLen = 0;
    483            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?Subroutine37 & 0xFFFF
    484            endPointDesc_t *epDesc;
    485            byte transId;
    486            afAddrType_t dstAddr;
    487            cId_t cId;
    488            byte txOpts, radius, srcEP, relayCnt;
    489            uint16 *pRelayList;
    490            uint8 i;
    491          
    492            /* parse header */
    493            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_63:
   \   000017   F5..         MOV       ?V6,A
    494            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EA           MOV       A,R2
   \   00001A   2403         ADD       A,#0x3
   \   00001C   FE           MOV       R6,A
   \   00001D   5001         JNC       ??MT_AfDataRequestSrcRtg_0
   \   00001F   0F           INC       R7
    495          
    496            /* Destination address */
    497            /* Initialize the panID field to zero to avoid inter-pan */
    498            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000020                ; Setup parameters for call to function osal_memset
   \   000020   7C0C         MOV       R4,#0xc
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7900         MOV       R1,#0x0
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP101_8
   \   00002B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    499            dstAddr.addrMode = afAddr16Bit;
   \   00002E   740A         MOV       A,#0xa
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   7402         MOV       A,#0x2
   \   000035   F0           MOVX      @DPTR,A
    500            dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   000036                ; Setup parameters for call to function osal_build_uint16
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine19 & 0xFFFF
    501            pBuf += 2;
    502          
    503            /* Destination endpoint */
    504            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_34:
   \   000045   C0E0         PUSH      A
   \   000047   740B         MOV       A,#0xb
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   D0E0         POP       A
   \   00004E   12....       LCALL     ?Subroutine24 & 0xFFFF
    505          
    506            /* Source endpoint */
    507            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_39:
   \   000051   F9           MOV       R1,A
   \   000052   EE           MOV       A,R6
   \   000053   2404         ADD       A,#0x4
   \   000055   FE           MOV       R6,A
   \   000056   5001         JNC       ??MT_AfDataRequestSrcRtg_1
   \   000058   0F           INC       R7
    508            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   000059                ; Setup parameters for call to function afFindEndPointDesc
   \   000059   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00005C   8A..         MOV       ?V2,R2
   \   00005E   8B..         MOV       ?V3,R3
    509          
    510            /* ClusterId */
    511            cId = osal_build_uint16( pBuf );
   \   000060                ; Setup parameters for call to function osal_build_uint16
   \   000060   EE           MOV       A,R6
   \   000061   12....       LCALL     ?Subroutine28 & 0xFFFF
    512            pBuf +=2;
    513          
    514            /* TransId */
    515            transId = *pBuf++;
   \                     ??CrossCallReturnLabel_45:
   \   000064   C0E0         PUSH      A
   \   000066   7401         MOV       A,#0x1
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   D0E0         POP       A
   \   00006D   12....       LCALL     ?Subroutine24 & 0xFFFF
    516          
    517            /* TxOption */
    518            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_40:
   \   000070   F5..         MOV       ?V7,A
    519          
    520            /* Radius */
    521            radius = *pBuf++;
   \   000072   8E82         MOV       DPL,R6
   \   000074   8F83         MOV       DPH,R7
   \   000076   A3           INC       DPTR
   \   000077   12....       LCALL     ?Subroutine9 & 0xFFFF
    522          
    523            /* Source route relay count */
    524            relayCnt = *pBuf++;
   \                     ??CrossCallReturnLabel_14:
   \   00007A   A3           INC       DPTR
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F5..         MOV       ?V9,A
   \   00007E   EE           MOV       A,R6
   \   00007F   2406         ADD       A,#0x6
   \   000081   FE           MOV       R6,A
   \   000082   5001         JNC       ??MT_AfDataRequestSrcRtg_2
   \   000084   0F           INC       R7
    525          
    526            /* Convert the source route relay list */
    527            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   000085                ; Setup parameters for call to function osal_mem_alloc
   \   000085   AA..         MOV       R2,?V9
   \   000087   EA           MOV       A,R2
   \   000088   2A           ADD       A,R2
   \   000089   FA           MOV       R2,A
   \   00008A   E4           CLR       A
   \   00008B   33           RLC       A
   \   00008C   FB           MOV       R3,A
   \   00008D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000090   8A..         MOV       ?V0,R2
   \   000092   8B..         MOV       ?V1,R3
   \   000094   EA           MOV       A,R2
   \   000095   4B           ORL       A,R3
   \   000096   7003         JNZ       $+5
   \   000098   02....       LJMP      ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    528            {
    529              for( i = 0; i < relayCnt; i++ )
   \   00009B   75..00       MOV       ?V10,#0x0
   \   00009E   8021         SJMP      ??MT_AfDataRequestSrcRtg_4
    530              {
    531                pRelayList[i] = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000A0                ; Setup parameters for call to function osal_build_uint16
   \   0000A0   EE           MOV       A,R6
   \   0000A1   FA           MOV       R2,A
   \   0000A2   EF           MOV       A,R7
   \   0000A3   FB           MOV       R3,A
   \   0000A4   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000A7   A8..         MOV       R0,?V10
   \   0000A9   E8           MOV       A,R0
   \   0000AA   28           ADD       A,R0
   \   0000AB   F8           MOV       R0,A
   \   0000AC   E4           CLR       A
   \   0000AD   33           RLC       A
   \   0000AE   F9           MOV       R1,A
   \   0000AF   E5..         MOV       A,?V0
   \   0000B1   28           ADD       A,R0
   \   0000B2   F582         MOV       DPL,A
   \   0000B4   E5..         MOV       A,?V1
   \   0000B6   39           ADDC      A,R1
   \   0000B7   F583         MOV       DPH,A
   \   0000B9   12....       LCALL     ?Subroutine26 & 0xFFFF
    532                pBuf += 2;
    533              }
   \                     ??CrossCallReturnLabel_44:
   \   0000BC   5001         JNC       ??MT_AfDataRequestSrcRtg_6
   \   0000BE   0F           INC       R7
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000BF   05..         INC       ?V10
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000C1   E5..         MOV       A,?V10
   \   0000C3   C3           CLR       C
   \   0000C4   95..         SUBB      A,?V9
   \   0000C6   40D8         JC        ??MT_AfDataRequestSrcRtg_5
    534          
    535              /* Data payload Length */
    536              dataLen = *pBuf++;
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   FA           MOV       R2,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   AE82         MOV       R6,DPL
   \   0000D1   AF83         MOV       R7,DPH
    537          
    538              if ( epDesc == NULL )
   \   0000D3   E5..         MOV       A,?V2
   \   0000D5   45..         ORL       A,?V3
   \   0000D7   700A         JNZ       ??MT_AfDataRequestSrcRtg_7
    539              {
    540                retValue = afStatus_INVALID_PARAMETER;
   \   0000D9   85..82       MOV       DPL,?XSP + 0
   \   0000DC   85..83       MOV       DPH,?XSP + 1
   \   0000DF   7402         MOV       A,#0x2
   \   0000E1   8050         SJMP      ??MT_AfDataRequestSrcRtg_8
    541              }
    542              else
    543              {
    544                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    545                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0000E3                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0000E3   78..         MOV       R0,#?V0
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E8   78..         MOV       R0,#?V9
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000ED   78..         MOV       R0,#?V8
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F2   7405         MOV       A,#0x5
   \   0000F4   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F7   88..         MOV       ?V8,R0
   \   0000F9   89..         MOV       ?V9,R1
   \   0000FB   78..         MOV       R0,#?V8
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000100   8E..         MOV       ?V8,R6
   \   000102   8F..         MOV       ?V9,R7
   \   000104   78..         MOV       R0,#?V8
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000109   EA           MOV       A,R2
   \   00010A   F5..         MOV       ?V8,A
   \   00010C   75..00       MOV       ?V9,#0x0
   \   00010F   78..         MOV       R0,#?V8
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000114   78..         MOV       R0,#?V4
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   A9..         MOV       R1,?V7
   \   00011B   AC..         MOV       R4,?V2
   \   00011D   AD..         MOV       R5,?V3
   \   00011F   740E         MOV       A,#0xe
   \   000121   12....       LCALL     ?XSTACK_DISP101_8
   \   000124   12....       LCALL     `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   000127   740C         MOV       A,#0xc
   \   000129   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012C   E9           MOV       A,R1
   \   00012D   85..82       MOV       DPL,?XSP + 0
   \   000130   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000133   F0           MOVX      @DPTR,A
    546              }
    547          
    548              /* Free the memory allocated */
    549              osal_mem_free( pRelayList );
   \   000134                ; Setup parameters for call to function osal_mem_free
   \   000134   AA..         MOV       R2,?V0
   \   000136   AB..         MOV       R3,?V1
   \   000138   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00013B   8009         SJMP      ??MT_AfDataRequestSrcRtg_9
    550            }
    551            else
    552            {
    553              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   00013D   85..82       MOV       DPL,?XSP + 0
   \   000140   85..83       MOV       DPH,?XSP + 1
   \   000143   7410         MOV       A,#0x10
   \   000145   F0           MOVX      @DPTR,A
    554            }
    555          
    556          
    557            /* Build and send back the response */
    558            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   000146                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000146   AC..         MOV       R4,?XSP + 0
   \   000148   AD..         MOV       R5,?XSP + 1
   \   00014A   7B01         MOV       R3,#0x1
   \   00014C   AA..         MOV       R2,?V6
   \   00014E   7964         MOV       R1,#0x64
   \   000150   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    559          }
   \   000153   740E         MOV       A,#0xe
   \   000155   12....       LCALL     ?DEALLOC_XSTACK8
   \   000158   7F0C         MOV       R7,#0xc
   \   00015A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   FA           MOV       R2,A
   \   000001   EF           MOV       A,R7
   \   000002   FB           MOV       R3,A
   \   000003   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000006   8A..         MOV       ?V4,R2
   \   000008   8B..         MOV       ?V5,R3
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET
    560          #endif
    561          
    562          #if defined INTER_PAN
    563          /***************************************************************************************************
    564           * @fn      MT_AfInterPanCtl
    565           *
    566           * @brief   Process the AF Inter Pan control command.
    567           *
    568           * @param   pBuf - pointer to the received buffer
    569           *
    570           * @return  none
    571           ***************************************************************************************************/
    572          static void MT_AfInterPanCtl(uint8 *pBuf)
    573          {
    574            uint8 cmd, rtrn;
    575            uint16 panId;
    576            endPointDesc_t *pEP;
    577          
    578            cmd = pBuf[MT_RPC_POS_CMD1];
    579            pBuf += MT_RPC_FRAME_HDR_SZ;
    580          
    581            switch (*pBuf++)  // Inter-pan request parameter.
    582            {
    583            case InterPanClr:
    584              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    585              break;
    586          
    587            case InterPanSet:
    588              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    589              break;
    590          
    591            case InterPanReg:
    592              if ((pEP = afFindEndPointDesc(*pBuf)))
    593              {
    594                StubAPS_RegisterApp(pEP);
    595                rtrn = SUCCESS;
    596              }
    597              else
    598              {
    599                rtrn = FAILURE;
    600              }
    601              break;
    602          
    603            case InterPanChk:
    604              panId = osal_build_uint16( pBuf );
    605              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    606              break;
    607          
    608            default:
    609              rtrn = afStatus_INVALID_PARAMETER;
    610              break;
    611            }
    612          
    613            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    614          }
    615          #endif
    616          
    617          /***************************************************************************************************
    618           * @fn      MT_AfDataConfirm
    619           *
    620           * @brief   Process
    621           *
    622           * @param   pBuf - pointer to the received buffer
    623           *
    624           * @return  none
    625           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    627          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    628            uint8 retArray[3];
    629          
    630            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL     ?Subroutine2 & 0xFFFF
    631            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_0:
   \   00000C   C0E0         PUSH      A
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   D0E0         POP       A
   \   000015   12....       LCALL     ?Subroutine23 & 0xFFFF
    632            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_37:
   \   000018   C0E0         PUSH      A
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   F0           MOVX      @DPTR,A
    633          
    634            /* Build and send back the response */
    635            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   AC..         MOV       R4,?XSP + 0
   \   000024   AD..         MOV       R5,?XSP + 1
   \   000026   7B03         MOV       R3,#0x3
   \   000028   7A80         MOV       R2,#-0x80
   \   00002A   7944         MOV       R1,#0x44
   \   00002C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    636          }
   \   00002F   7403         MOV       A,#0x3
   \   000031                REQUIRE ?Subroutine0
   \   000031                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   D083         POP       DPH
   \   000005   D082         POP       DPL
   \   000007   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00000F   22           RET
    637          
    638          /***************************************************************************************************
    639           * @fn      MT_AfReflectError
    640           *
    641           * @brief   Process
    642           *
    643           * @param   pBuf - pointer to the received buffer
    644           *
    645           * @return  none
    646           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    648          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV       A,#-0x6
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    649            uint8 retArray[6];
    650          
    651            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL     ?Subroutine2 & 0xFFFF
    652            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_1:
   \   00000C   C0E0         PUSH      A
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   D0E0         POP       A
   \   000015   12....       LCALL     ?Subroutine23 & 0xFFFF
    653            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_38:
   \   000018   C0E0         PUSH      A
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine22 & 0xFFFF
    654            retArray[3] = pMsg->dstAddrMode;
   \                     ??CrossCallReturnLabel_36:
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C0E0         PUSH      A
   \   000027   7403         MOV       A,#0x3
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
    655            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   00002F   EA           MOV       A,R2
   \   000030   2405         ADD       A,#0x5
   \   000032   F8           MOV       R0,A
   \   000033   E4           CLR       A
   \   000034   3B           ADDC      A,R3
   \   000035   F9           MOV       R1,A
   \   000036   8882         MOV       DPL,R0
   \   000038   F583         MOV       DPH,A
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   C0E0         PUSH      A
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   D0E0         POP       A
   \   000044   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    656            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \                     ??CrossCallReturnLabel_94:
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   C0E0         PUSH      A
   \   00004B   7405         MOV       A,#0x5
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   D0E0         POP       A
   \   000052   F0           MOVX      @DPTR,A
    657          
    658            /* Build and send back the response */
    659            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \   000053                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000053   AC..         MOV       R4,?XSP + 0
   \   000055   AD..         MOV       R5,?XSP + 1
   \   000057   7B06         MOV       R3,#0x6
   \   000059   7A83         MOV       R2,#-0x7d
   \   00005B   7944         MOV       R1,#0x44
   \   00005D   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    660          }
   \   000060   7406         MOV       A,#0x6
   \   000062   80..         SJMP      ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET
    661          
    662          /***************************************************************************************************
    663           * @fn          MT_AfIncomingMsg
    664           *
    665           * @brief       Process the callback subscription for AF Incoming data.
    666           *
    667           * @param       pkt - Incoming AF data.
    668           *
    669           * @return      none
    670           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    672          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
    673            #define MT_AF_INC_MSG_LEN  20
    674            #define MT_AF_INC_MSG_EXT  10
    675          
    676            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000009   EA           MOV       A,R2
   \   00000A   2420         ADD       A,#0x20
   \   00000C   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V1,A
    677            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000016   E5..         MOV       A,?V0
   \   000018   2414         ADD       A,#0x14
   \   00001A   FE           MOV       R6,A
   \   00001B   E4           CLR       A
   \   00001C   35..         ADDC      A,?V1
   \   00001E   FF           MOV       R7,A
    678            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00001F   75..81       MOV       ?V7,#-0x7f
    679            uint8 *pRsp, *pTmp;
    680            mtAfInMsgList_t *pItem = NULL;
   \   000022   75..00       MOV       ?V10,#0x0
   \   000025   75..00       MOV       ?V11,#0x0
    681          
    682          #if defined INTER_PAN
    683            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    684            {
    685              cmd = MT_AF_INCOMING_MSG_EXT;
    686            }
    687            else
    688          #endif
    689            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    690                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   000028   EA           MOV       A,R2
   \   000029   240E         ADD       A,#0xe
   \   00002B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6403         XRL       A,#0x3
   \   000031   6009         JZ        ??MT_AfIncomingMsg_0
   \   000033   C3           CLR       C
   \   000034   EE           MOV       A,R6
   \   000035   94F1         SUBB      A,#-0xf
   \   000037   EF           MOV       A,R7
   \   000038   9400         SUBB      A,#0x0
   \   00003A   400A         JC        ??MT_AfIncomingMsg_1
    691            {
    692              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   00003C   75..82       MOV       ?V7,#-0x7e
    693            }
    694          
    695            if (cmd == MT_AF_INCOMING_MSG_EXT)
    696            {
    697              respLen += MT_AF_INC_MSG_EXT;
   \   00003F   EE           MOV       A,R6
   \   000040   240A         ADD       A,#0xa
   \   000042   FE           MOV       R6,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FF           MOV       R7,A
    698            }
    699          
    700            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   000046   C3           CLR       C
   \   000047   EE           MOV       A,R6
   \   000048   94FB         SUBB      A,#-0x5
   \   00004A   EF           MOV       A,R7
   \   00004B   9400         SUBB      A,#0x0
   \   00004D   4033         JC        ??MT_AfIncomingMsg_2
    701            {
    702              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00004F                ; Setup parameters for call to function osal_mem_alloc
   \   00004F   E5..         MOV       A,?V0
   \   000051   2409         ADD       A,#0x9
   \   000053   FA           MOV       R2,A
   \   000054   E4           CLR       A
   \   000055   35..         ADDC      A,?V1
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005B   8A..         MOV       ?V10,R2
   \   00005D   8B..         MOV       ?V11,R3
   \   00005F   EA           MOV       A,R2
   \   000060   4B           ORL       A,R3
   \   000061   7003         JNZ       $+5
   \   000063   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    703              {
    704                return;  // If cannot hold a huge message, cannot give indication at all.
    705              }
    706          
    707              pItem->data = (uint8 *)(pItem+1);
   \   000066   EA           MOV       A,R2
   \   000067   2409         ADD       A,#0x9
   \   000069   F8           MOV       R0,A
   \   00006A   E4           CLR       A
   \   00006B   35..         ADDC      A,?V11
   \   00006D   F9           MOV       R1,A
   \   00006E   8A82         MOV       DPL,R2
   \   000070   8B83         MOV       DPH,R3
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   E8           MOV       A,R0
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   E9           MOV       A,R1
   \   000078   F0           MOVX      @DPTR,A
    708              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   000079   C3           CLR       C
   \   00007A   EE           MOV       A,R6
   \   00007B   95..         SUBB      A,?V0
   \   00007D   FE           MOV       R6,A
   \   00007E   EF           MOV       A,R7
   \   00007F   95..         SUBB      A,?V1
   \   000081   FF           MOV       R7,A
    709            }
    710          
    711            // Attempt to allocate memory for the response packet.
    712            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   000082                ; Setup parameters for call to function osal_mem_alloc
   \   000082   EE           MOV       A,R6
   \   000083   FA           MOV       R2,A
   \   000084   EF           MOV       A,R7
   \   000085   FB           MOV       R3,A
   \   000086   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000089   8A..         MOV       ?V12,R2
   \   00008B   8B..         MOV       ?V13,R3
   \   00008D   EA           MOV       A,R2
   \   00008E   4B           ORL       A,R3
   \   00008F   7010         JNZ       ??MT_AfIncomingMsg_4
    713            {
    714              if (pItem != NULL)
   \   000091   E5..         MOV       A,?V10
   \   000093   45..         ORL       A,?V11
   \   000095   6007         JZ        ??MT_AfIncomingMsg_5
    715              {
    716                (void)osal_mem_free(pItem);
   \   000097                ; Setup parameters for call to function osal_mem_free
   \   000097   AA..         MOV       R2,?V10
   \   000099   AB..         MOV       R3,?V11
   \   00009B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    717              }
    718              return;
   \                     ??MT_AfIncomingMsg_5:
   \   00009E   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    719            }
    720            pTmp = pRsp;
    721          
    722            /* Group ID */
    723            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_4:
   \   0000A1   E5..         MOV       A,?V8
   \   0000A3   2402         ADD       A,#0x2
   \   0000A5   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   8A82         MOV       DPL,R2
   \   0000AB   8B83         MOV       DPH,R3
   \   0000AD   12....       LCALL     ?Subroutine13 & 0xFFFF
    724            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_96:
   \   0000B0   F0           MOVX      @DPTR,A
    725          
    726            /* Cluster ID */
    727            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   0000B1   E5..         MOV       A,?V8
   \   0000B3   2404         ADD       A,#0x4
   \   0000B5   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000B8   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine13 & 0xFFFF
    728            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_97:
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   F0           MOVX      @DPTR,A
    729          
    730            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000C2   EA           MOV       A,R2
   \   0000C3   2406         ADD       A,#0x6
   \   0000C5   FA           MOV       R2,A
   \   0000C6   E4           CLR       A
   \   0000C7   35..         ADDC      A,?V13
   \   0000C9   FB           MOV       R3,A
   \   0000CA   E5..         MOV       A,?V12
   \   0000CC   2405         ADD       A,#0x5
   \   0000CE   F5..         MOV       ?V2,A
   \   0000D0   E4           CLR       A
   \   0000D1   35..         ADDC      A,?V13
   \   0000D3   F5..         MOV       ?V3,A
   \   0000D5   E5..         MOV       A,?V12
   \   0000D7   2404         ADD       A,#0x4
   \   0000D9   FC           MOV       R4,A
   \   0000DA   E4           CLR       A
   \   0000DB   35..         ADDC      A,?V13
   \   0000DD   FD           MOV       R5,A
   \   0000DE   E5..         MOV       A,?V8
   \   0000E0   240F         ADD       A,#0xf
   \   0000E2   F5..         MOV       ?V14,A
   \   0000E4   E4           CLR       A
   \   0000E5   35..         ADDC      A,?V9
   \   0000E7   F5..         MOV       ?V15,A
   \   0000E9   E5..         MOV       A,?V8
   \   0000EB   2406         ADD       A,#0x6
   \   0000ED   F8           MOV       R0,A
   \   0000EE   E4           CLR       A
   \   0000EF   35..         ADDC      A,?V9
   \   0000F1   F9           MOV       R1,A
   \   0000F2   7482         MOV       A,#-0x7e
   \   0000F4   65..         XRL       A,?V7
   \   0000F6   705E         JNZ       ??MT_AfIncomingMsg_6
    731            {
    732              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0000F8   85..82       MOV       DPL,?V4
   \   0000FB   85..83       MOV       DPH,?V5
   \   0000FE   12....       LCALL     ?Subroutine14 & 0xFFFF
    733          
    734              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_21:
   \   000101   85..82       MOV       DPL,?V4
   \   000104   85..83       MOV       DPH,?V5
   \   000107   E0           MOVX      A,@DPTR
   \   000108   6403         XRL       A,#0x3
   \   00010A   701B         JNZ       ??MT_AfIncomingMsg_7
    735              {
    736                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   00010C                ; Setup parameters for call to function osal_memcpy
   \   00010C   88..         MOV       ?V4,R0
   \   00010E   89..         MOV       ?V5,R1
   \   000110   75..00       MOV       ?V6,#0x0
   \   000113   78..         MOV       R0,#?V4
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000118   7C08         MOV       R4,#0x8
   \   00011A   7D00         MOV       R5,#0x0
   \   00011C   1A           DEC       R2
   \   00011D   AB..         MOV       R3,?V3
   \   00011F   12....       LCALL     ??Subroutine48_0 & 0xFFFF
    737              }
   \                     ??CrossCallReturnLabel_104:
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   \   000125   800C         SJMP      ??MT_AfIncomingMsg_8
    738              else
    739              {
    740                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   000127   8882         MOV       DPL,R0
   \   000129   8983         MOV       DPH,R1
   \   00012B   12....       LCALL     ?Subroutine4 & 0xFFFF
    741                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    742              }
   \                     ??CrossCallReturnLabel_4:
   \   00012E   8A82         MOV       DPL,R2
   \   000130   8B83         MOV       DPH,R3
   \   000132   F0           MOVX      @DPTR,A
    743              pTmp += Z_EXTADDR_LEN;
    744          
    745              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_8:
   \   000133   85..82       MOV       DPL,?V14
   \   000136   85..83       MOV       DPH,?V15
   \   000139   12....       LCALL     ?Subroutine10 & 0xFFFF
    746          #if defined INTER_PAN
    747              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    748              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    749          #else
    750              *pTmp++ = 0;
    751              *pTmp++ = 0;
    752          #endif
    753            }
   \                     ??CrossCallReturnLabel_15:
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000144   E4           CLR       A
   \   000145   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000148   A3           INC       DPTR
   \   000149   F0           MOVX      @DPTR,A
   \   00014A   E5..         MOV       A,?V2
   \   00014C   240B         ADD       A,#0xb
   \   00014E   F5..         MOV       ?V2,A
   \   000150   502A         JNC       ??MT_AfIncomingMsg_9
   \   000152   05..         INC       ?V3
   \   000154   8026         SJMP      ??MT_AfIncomingMsg_9
    754            else
    755            {
    756              /* Source Address */
    757              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   000156   8882         MOV       DPL,R0
   \   000158   8983         MOV       DPH,R1
   \   00015A   12....       LCALL     ?Subroutine14 & 0xFFFF
    758              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_22:
   \   00015D   8882         MOV       DPL,R0
   \   00015F   8983         MOV       DPH,R1
   \   000161   A3           INC       DPTR
   \   000162   12....       LCALL     ?Subroutine17 & 0xFFFF
    759          
    760              /* Source EP */
    761              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_29:
   \   000165   85..82       MOV       DPL,?V14
   \   000168   85..83       MOV       DPH,?V15
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   8A82         MOV       DPL,R2
   \   00016E   8B83         MOV       DPH,R3
   \   000170   F0           MOVX      @DPTR,A
   \   000171   E5..         MOV       A,?V12
   \   000173   2407         ADD       A,#0x7
   \   000175   F5..         MOV       ?V2,A
   \   000177   E4           CLR       A
   \   000178   35..         ADDC      A,?V13
   \   00017A   F5..         MOV       ?V3,A
    762            }
    763          
    764            /* Destination EP */
    765            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_9:
   \   00017C   E5..         MOV       A,?V8
   \   00017E   2414         ADD       A,#0x14
   \   000180   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000183   12....       LCALL     ?Subroutine17 & 0xFFFF
    766          
    767            /* WasBroadCast */
    768            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_30:
   \   000186   E5..         MOV       A,?V8
   \   000188   2415         ADD       A,#0x15
   \   00018A   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00018D   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000190   F0           MOVX      @DPTR,A
    769          
    770            /* LinkQuality */
    771            *pTmp++ = pMsg->LinkQuality;
   \   000191   E5..         MOV       A,?V8
   \   000193   2416         ADD       A,#0x16
   \   000195   12....       LCALL     ?Subroutine11 & 0xFFFF
    772          
    773            /* SecurityUse */
    774            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_17:
   \   000198   E5..         MOV       A,?V8
   \   00019A   2419         ADD       A,#0x19
   \   00019C   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00019F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001A2   F0           MOVX      @DPTR,A
   \   0001A3   E5..         MOV       A,?V2
   \   0001A5   2404         ADD       A,#0x4
   \   0001A7   F5..         MOV       ?V2,A
   \   0001A9   5002         JNC       ??MT_AfIncomingMsg_10
   \   0001AB   05..         INC       ?V3
    775          
    776            /* Timestamp */
    777            osal_buffer_uint32( pTmp, pMsg->timestamp );
   \                     ??MT_AfIncomingMsg_10:
   \   0001AD   E5..         MOV       A,?V8
   \   0001AF   241A         ADD       A,#0x1a
   \   0001B1   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0001B4   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001B7   AA..         MOV       R2,?V2
   \   0001B9   AB..         MOV       R3,?V3
   \   0001BB   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   0001BE   7404         MOV       A,#0x4
   \   0001C0   12....       LCALL     ?DEALLOC_XSTACK8
    778            pTmp += 4;
    779          
    780            /* Data Length */
    781            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0001C3   E5..         MOV       A,?V2
   \   0001C5   2406         ADD       A,#0x6
   \   0001C7   F8           MOV       R0,A
   \   0001C8   E4           CLR       A
   \   0001C9   35..         ADDC      A,?V3
   \   0001CB   F9           MOV       R1,A
   \   0001CC   E5..         MOV       A,?V2
   \   0001CE   2405         ADD       A,#0x5
   \   0001D0   FA           MOV       R2,A
   \   0001D1   E4           CLR       A
   \   0001D2   35..         ADDC      A,?V3
   \   0001D4   FB           MOV       R3,A
   \   0001D5   E5..         MOV       A,?V2
   \   0001D7   2404         ADD       A,#0x4
   \   0001D9   FC           MOV       R4,A
   \   0001DA   E4           CLR       A
   \   0001DB   35..         ADDC      A,?V3
   \   0001DD   FD           MOV       R5,A
   \   0001DE   7482         MOV       A,#-0x7e
   \   0001E0   65..         XRL       A,?V7
   \   0001E2   701E         JNZ       ??MT_AfIncomingMsg_11
    782            {
    783              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    784               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    785               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    786               */
    787              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0001E4   8C82         MOV       DPL,R4
   \   0001E6   8D83         MOV       DPH,R5
   \   0001E8   E4           CLR       A
   \   0001E9   F0           MOVX      @DPTR,A
    788              *pTmp++ = LO_UINT16(dataLen);
   \   0001EA   8A82         MOV       DPL,R2
   \   0001EC   8B83         MOV       DPH,R3
   \   0001EE   E5..         MOV       A,?V0
   \   0001F0   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    789              *pTmp++ = HI_UINT16(dataLen);
    790            }
   \                     ??CrossCallReturnLabel_95:
   \   0001F3   E5..         MOV       A,?V1
   \   0001F5   F0           MOVX      @DPTR,A
   \   0001F6   E5..         MOV       A,?V2
   \   0001F8   2407         ADD       A,#0x7
   \   0001FA   F5..         MOV       ?V2,A
   \   0001FC   5019         JNC       ??MT_AfIncomingMsg_12
   \   0001FE   05..         INC       ?V3
   \   000200   8015         SJMP      ??MT_AfIncomingMsg_12
    791            else
    792            {
    793              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_11:
   \   000202   E5..         MOV       A,?V8
   \   000204   241F         ADD       A,#0x1f
   \   000206   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000209   12....       LCALL     ?Subroutine14 & 0xFFFF
    794              *pTmp++ = dataLen;
   \                     ??CrossCallReturnLabel_23:
   \   00020C   8A82         MOV       DPL,R2
   \   00020E   8B83         MOV       DPH,R3
   \   000210   E5..         MOV       A,?V0
   \   000212   F0           MOVX      @DPTR,A
   \   000213   88..         MOV       ?V2,R0
   \   000215   89..         MOV       ?V3,R1
    795            }
    796          
    797            /* Data */
    798            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_12:
   \   000217   E5..         MOV       A,?V8
   \   000219   2422         ADD       A,#0x22
   \   00021B   F5..         MOV       ?V14,A
   \   00021D   E4           CLR       A
   \   00021E   35..         ADDC      A,?V9
   \   000220   F5..         MOV       ?V15,A
   \   000222   E5..         MOV       A,?V10
   \   000224   45..         ORL       A,?V11
   \   000226   606E         JZ        ??MT_AfIncomingMsg_13
    799            {
    800              // Enqueue the new huge incoming item.
    801              pItem->next = pMtAfInMsgList;
   \   000228   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00022B   85..82       MOV       DPL,?V10
   \   00022E   85..83       MOV       DPH,?V11
   \   000231   E8           MOV       A,R0
   \   000232   F0           MOVX      @DPTR,A
   \   000233   A3           INC       DPTR
   \   000234   E9           MOV       A,R1
   \   000235   F0           MOVX      @DPTR,A
    802              pMtAfInMsgList = pItem;
   \   000236   90....       MOV       DPTR,#pMtAfInMsgList
   \   000239   E5..         MOV       A,?V10
   \   00023B   F0           MOVX      @DPTR,A
   \   00023C   A3           INC       DPTR
   \   00023D   E5..         MOV       A,?V11
   \   00023F   F0           MOVX      @DPTR,A
    803          
    804              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    805              pItem->tick = MT_AF_EXEC_CNT;
   \   000240   85..82       MOV       DPL,?V10
   \   000243   F583         MOV       DPH,A
   \   000245   A3           INC       DPTR
   \   000246   A3           INC       DPTR
   \   000247   A3           INC       DPTR
   \   000248   A3           INC       DPTR
   \   000249   A3           INC       DPTR
   \   00024A   A3           INC       DPTR
   \   00024B   A3           INC       DPTR
   \   00024C   A3           INC       DPTR
   \   00024D   740F         MOV       A,#0xf
   \   00024F   F0           MOVX      @DPTR,A
    806              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000250                ; Setup parameters for call to function osal_start_timerEx
   \   000250   90....       MOV       DPTR,#__Constant_3e8
   \   000253   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000256   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000259   12....       LCALL     ?DEALLOC_XSTACK8
   \   00025C   E9           MOV       A,R1
   \   00025D   6003         JZ        ??CrossCallReturnLabel_28
    807              {
    808                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00025F                ; Setup parameters for call to function osal_set_event
   \   00025F   12....       LCALL     ?Subroutine16 & 0xFFFF
    809              }
    810          
    811              pItem->timestamp = pMsg->timestamp;
   \                     ??CrossCallReturnLabel_28:
   \   000262   85..82       MOV       DPL,?V4
   \   000265   85..83       MOV       DPH,?V5
   \   000268   12....       LCALL     ?XLOAD_R0123
   \   00026B   85..82       MOV       DPL,?V10
   \   00026E   85..83       MOV       DPH,?V11
   \   000271   A3           INC       DPTR
   \   000272   A3           INC       DPTR
   \   000273   A3           INC       DPTR
   \   000274   A3           INC       DPTR
   \   000275   12....       LCALL     ?XSTORE_R0123
    812              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000278                ; Setup parameters for call to function osal_memcpy
   \   000278   12....       LCALL     ?Subroutine7 & 0xFFFF
    813            }
   \                     ??CrossCallReturnLabel_8:
   \   00027B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00027E   AC..         MOV       R4,?V0
   \   000280   AD..         MOV       R5,?V1
   \   000282   85..82       MOV       DPL,?V10
   \   000285   85..83       MOV       DPH,?V11
   \   000288   A3           INC       DPTR
   \   000289   A3           INC       DPTR
   \   00028A   E0           MOVX      A,@DPTR
   \   00028B   FA           MOV       R2,A
   \   00028C   A3           INC       DPTR
   \   00028D   E0           MOVX      A,@DPTR
   \   00028E   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000291   12....       LCALL     ?DEALLOC_XSTACK8
   \   000294   8020         SJMP      ??MT_AfIncomingMsg_14
    814            else
    815            {
    816              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_13:
   \   000296                ; Setup parameters for call to function osal_memcpy
   \   000296   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000299   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00029C   AC..         MOV       R4,?V0
   \   00029E   AD..         MOV       R5,?V1
   \   0002A0   AA..         MOV       R2,?V2
   \   0002A2   AB..         MOV       R3,?V3
   \   0002A4   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0002A7   12....       LCALL     ?DEALLOC_XSTACK8
    817              pTmp += dataLen;
   \   0002AA   E5..         MOV       A,?V2
   \   0002AC   25..         ADD       A,?V0
   \   0002AE   F5..         MOV       ?V2,A
   \   0002B0   E5..         MOV       A,?V3
   \   0002B2   35..         ADDC      A,?V1
   \   0002B4   F5..         MOV       ?V3,A
    818            }
    819          
    820            // MAC Source address
    821            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_14:
   \   0002B6   E5..         MOV       A,?V8
   \   0002B8   2424         ADD       A,#0x24
   \   0002BA   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0002BD   12....       LCALL     ?Subroutine4 & 0xFFFF
    822            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
   \                     ??CrossCallReturnLabel_5:
   \   0002C0   85..82       MOV       DPL,?V2
   \   0002C3   85..83       MOV       DPH,?V3
   \   0002C6   A3           INC       DPTR
   \   0002C7   F0           MOVX      @DPTR,A
    823          
    824            // messages result radius
    825            *pTmp = pMsg->radius;
   \   0002C8   E5..         MOV       A,?V8
   \   0002CA   2426         ADD       A,#0x26
   \   0002CC   12....       LCALL     ?Subroutine11 & 0xFFFF
    826          
    827            /* Build and send back the response */
    828            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??CrossCallReturnLabel_18:
   \   0002CF                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002CF   AC..         MOV       R4,?V12
   \   0002D1   AD..         MOV       R5,?V13
   \   0002D3   EE           MOV       A,R6
   \   0002D4   FB           MOV       R3,A
   \   0002D5   AA..         MOV       R2,?V7
   \   0002D7   7944         MOV       R1,#0x44
   \   0002D9   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    829          
    830            (void)osal_mem_free(pRsp);
   \   0002DC                ; Setup parameters for call to function osal_mem_free
   \   0002DC   AA..         MOV       R2,?V12
   \   0002DE   AB..         MOV       R3,?V13
   \   0002E0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    831          }
   \                     ??MT_AfIncomingMsg_3:
   \   0002E3   7F10         MOV       R7,#0x10
   \   0002E5   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F5..         MOV       ?V4,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F5..         MOV       ?V5,A
   \   000007                ; Setup parameters for call to function osal_buffer_uint32
   \   000007   85..82       MOV       DPL,?V4
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V9
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?V14
   \   000003   85..83       MOV       DPH,?V15
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V5,A
   \   00000D   75..00       MOV       ?V6,#0x0
   \   000010   78..         MOV       R0,#?V4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   FB           MOV       R3,A
   \   000001                REQUIRE ??Subroutine48_0
   \   000001                ; // Fall through to label ??Subroutine48_0
    832          
    833          /**************************************************************************************************
    834           * @fn          MT_AfDataRetrieve
    835           *
    836           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    837           *          incoming AF message.
    838           *
    839           * input parameters
    840           *
    841           * @param pBuf - pointer to the received buffer
    842           *
    843           * output parameters
    844           *
    845           * @param rtrn - AF-Status of the operation.
    846           *
    847           * @return      None.
    848           **************************************************************************************************
    849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          static void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EB           MOV       A,R3
   \   000006   FF           MOV       R7,A
    852            #define MT_AF_RTV_HDR_SZ  2
    853          
    854            uint32 timestamp;
    855            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000007   90....       MOV       DPTR,#pMtAfInMsgList
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V3,A
    856            uint8 rtrn = afStatus_FAILED;
   \   000011   75..01       MOV       ?V1,#0x1
    857            uint8 len = 0;
   \   000014   75..00       MOV       ?V0,#0x0
    858          
    859            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EA           MOV       A,R2
   \   000018   2403         ADD       A,#0x3
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??MT_AfDataRetrieve_0
   \   00001D   0F           INC       R7
    860            timestamp = osal_build_uint32( pBuf, 4 );
   \                     ??MT_AfDataRetrieve_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint32
   \   00001E   7904         MOV       R1,#0x4
   \   000020   FA           MOV       R2,A
   \   000021   EF           MOV       A,R7
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000026   8A..         MOV       ?V4,R2
   \   000028   8B..         MOV       ?V5,R3
   \   00002A   8C..         MOV       ?V6,R4
   \   00002C   8D..         MOV       ?V7,R5
   \   00002E   800D         SJMP      ??MT_AfDataRetrieve_1
    861          
    862            while (pItem != NULL)
    863            {
    864              pPrev = pItem;
    865              if (pItem->timestamp == timestamp)
    866              {
    867                break;
    868              }
    869              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_2:
   \   000030   85..82       MOV       DPL,?V2
   \   000033   85..83       MOV       DPH,?V3
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V2,A
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F5..         MOV       ?V3,A
   \                     ??MT_AfDataRetrieve_1:
   \   00003D   E5..         MOV       A,?V2
   \   00003F   45..         ORL       A,?V3
   \   000041   6065         JZ        ??MT_AfDataRetrieve_3
   \   000043   85....       MOV       ?V8,?V2
   \   000046   85....       MOV       ?V9,?V3
   \   000049   85..82       MOV       DPL,?V2
   \   00004C   85..83       MOV       DPH,?V3
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?L_EQ_X
   \   000058   70D6         JNZ       ??MT_AfDataRetrieve_2
    870            }
    871          
    872            if (pItem != NULL)
    873            {
    874              uint16 idx;
    875              uint8 *pRsp;
    876          
    877              pBuf += 4;
   \   00005A   EE           MOV       A,R6
   \   00005B   2404         ADD       A,#0x4
   \   00005D   FE           MOV       R6,A
   \   00005E   5001         JNC       ??MT_AfDataRetrieve_4
   \   000060   0F           INC       R7
    878              idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRetrieve_4:
   \   000061                ; Setup parameters for call to function osal_build_uint16
   \   000061   FA           MOV       R2,A
   \   000062   EF           MOV       A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000067   8A..         MOV       ?V6,R2
   \   000069   8B..         MOV       ?V7,R3
    879              len = pBuf[2];
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F5..         MOV       ?V0,A
    880          
    881              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   000074   704F         JNZ       ??MT_AfDataRetrieve_5
    882              {
    883                if (pMtAfInMsgList == pItem)
   \   000076   85..82       MOV       DPL,?V2
   \   000079   85..83       MOV       DPH,?V3
   \   00007C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FA           MOV       R2,A
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FB           MOV       R3,A
   \   000084   E5..         MOV       A,?V2
   \   000086   6A           XRL       A,R2
   \   000087   7003         JNZ       ??MT_AfDataRetrieve_6
   \   000089   E5..         MOV       A,?V3
   \   00008B   6B           XRL       A,R3
   \                     ??MT_AfDataRetrieve_6:
   \   00008C   7005         JNZ       ??MT_AfDataRetrieve_7
    884                {
    885                  pMtAfInMsgList = pItem->next;
   \   00008E   90....       MOV       DPTR,#pMtAfInMsgList
   \   000091   8006         SJMP      ??MT_AfDataRetrieve_8
    886                }
    887                else
    888                {
    889                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   000093   85..82       MOV       DPL,?V8
   \   000096   85..83       MOV       DPH,?V9
   \                     ??MT_AfDataRetrieve_8:
   \   000099   E8           MOV       A,R0
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   E9           MOV       A,R1
   \   00009D   F0           MOVX      @DPTR,A
    890                }
    891                (void)osal_mem_free(pItem);
   \   00009E                ; Setup parameters for call to function osal_mem_free
   \   00009E   AA..         MOV       R2,?V2
   \   0000A0   AB..         MOV       R3,?V3
   \   0000A2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    892                rtrn = afStatus_SUCCESS;
   \   0000A5   75..00       MOV       ?V1,#0x0
    893              }
    894              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    895              {
    896                rtrn = afStatus_MEM_FAIL;
    897                len = 0;
    898              }
    899              else
    900              {
    901                pRsp[0] = ZSuccess;
    902                pRsp[1] = len;
    903                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    904                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    905                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    906                (void)osal_mem_free(pRsp);
    907                return;
    908              }
    909            }
    910          
    911            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   0000A8   8E82         MOV       DPL,R6
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   E5..         MOV       A,?V1
   \   0000AE   F0           MOVX      @DPTR,A
    912            pBuf[1] = len;
   \   0000AF   A3           INC       DPTR
   \   0000B0   E5..         MOV       A,?V0
   \   0000B2   F0           MOVX      @DPTR,A
    913            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    914                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000B3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B3   EE           MOV       A,R6
   \   0000B4   FC           MOV       R4,A
   \   0000B5   EF           MOV       A,R7
   \   0000B6   FD           MOV       R5,A
   \   0000B7   7B02         MOV       R3,#0x2
   \   0000B9   7A12         MOV       R2,#0x12
   \   0000BB   7964         MOV       R1,#0x64
   \   0000BD   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    915          }
   \                     ??MT_AfDataRetrieve_9:
   \   0000C0   7F0B         MOV       R7,#0xb
   \   0000C2   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_5:
   \   0000C5                ; Setup parameters for call to function osal_mem_alloc
   \   0000C5   2402         ADD       A,#0x2
   \   0000C7   FA           MOV       R2,A
   \   0000C8   E4           CLR       A
   \   0000C9   3400         ADDC      A,#0x0
   \   0000CB   FB           MOV       R3,A
   \   0000CC   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CF   8A..         MOV       ?V4,R2
   \   0000D1   8B..         MOV       ?V5,R3
   \   0000D3   EA           MOV       A,R2
   \   0000D4   4B           ORL       A,R3
   \   0000D5   7008         JNZ       ??MT_AfDataRetrieve_10
   \   0000D7   75..10       MOV       ?V1,#0x10
   \   0000DA   75..00       MOV       ?V0,#0x0
   \   0000DD   80C9         SJMP      ??MT_AfDataRetrieve_3
   \                     ??MT_AfDataRetrieve_10:
   \   0000DF   8A82         MOV       DPL,R2
   \   0000E1   8B83         MOV       DPH,R3
   \   0000E3   E4           CLR       A
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5   A3           INC       DPTR
   \   0000E6   E5..         MOV       A,?V0
   \   0000E8   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   25..         ADD       A,?V6
   \   0000EE   F5..         MOV       ?V8,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   35..         ADDC      A,?V7
   \   0000F4   F5..         MOV       ?V9,A
   \   0000F6   75..00       MOV       ?V10,#0x0
   \   0000F9   78..         MOV       R0,#?V8
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FE   AC..         MOV       R4,?V0
   \   000100   7D00         MOV       R5,#0x0
   \   000102   EA           MOV       A,R2
   \   000103   2402         ADD       A,#0x2
   \   000105   FA           MOV       R2,A
   \   000106   E4           CLR       A
   \   000107   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00010D   AC..         MOV       R4,?V4
   \   00010F   AD..         MOV       R5,?V5
   \   000111   7402         MOV       A,#0x2
   \   000113   25..         ADD       A,?V0
   \   000115   FB           MOV       R3,A
   \   000116   7A12         MOV       R2,#0x12
   \   000118   7964         MOV       R1,#0x64
   \   00011A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00011D                ; Setup parameters for call to function osal_mem_free
   \   00011D   AA..         MOV       R2,?V4
   \   00011F   AB..         MOV       R3,?V5
   \   000121   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000124   809A         SJMP      ??MT_AfDataRetrieve_9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   35..         ADDC      A,?V5
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0
    916          
    917          /**************************************************************************************************
    918           * @fn          MT_AfDataStore
    919           *
    920           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    921           *          outgoing AF message.
    922           *
    923           * input parameters
    924           *
    925           * @param pBuf - pointer to the received buffer
    926           *
    927           * output parameters
    928           *
    929           * @param rtrn - AF-Status of the operation.
    930           *
    931           * @return      None.
    932           **************************************************************************************************
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   7B01         MOV       R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          static void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    935          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
    936            uint16 idx;
    937            uint8 len, rtrn = afStatus_FAILED;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
    938          
    939            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000015   EA           MOV       A,R2
   \   000016   2403         ADD       A,#0x3
   \   000018   FE           MOV       R6,A
   \   000019   5001         JNC       ??MT_AfDataStore_0
   \   00001B   0F           INC       R7
    940            idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataStore_0:
   \   00001C                ; Setup parameters for call to function osal_build_uint16
   \   00001C   12....       LCALL     ?Subroutine28 & 0xFFFF
    941            len = pBuf[2];
   \                     ??CrossCallReturnLabel_46:
   \   00001F   FA           MOV       R2,A
    942            pBuf += 3;
   \   000020   EE           MOV       A,R6
   \   000021   2403         ADD       A,#0x3
   \   000023   FE           MOV       R6,A
   \   000024   5001         JNC       ??MT_AfDataStore_1
   \   000026   0F           INC       R7
    943          
    944            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   000027   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00002A   700B         JNZ       ??MT_AfDataStore_2
    945            {
    946              rtrn = afStatus_MEM_FAIL;
   \   00002C   85..82       MOV       DPL,?XSP + 0
   \   00002F   85..83       MOV       DPH,?XSP + 1
   \   000032   7410         MOV       A,#0x10
   \   000034   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    947            }
    948            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F583         MOV       DPH,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F5..         MOV       ?V6,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F5..         MOV       ?V7,A
   \   000043   EA           MOV       A,R2
   \   000044   707B         JNZ       ??MT_AfDataStore_4
    949            {
    950              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    951                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    952                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   000046                ; Setup parameters for call to function AF_DataRequest
   \   000046   E8           MOV       A,R0
   \   000047   2416         ADD       A,#0x16
   \   000049   F582         MOV       DPL,A
   \   00004B   E4           CLR       A
   \   00004C   39           ADDC      A,R1
   \   00004D   F583         MOV       DPH,A
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F5..         MOV       ?V0,A
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   90....       MOV       DPTR,#pMtAfDataReq
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   2414         ADD       A,#0x14
   \   00005D   F5..         MOV       ?V0,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   3400         ADDC      A,#0x0
   \   000063   F5..         MOV       ?V1,A
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   78..         MOV       R0,#?V6
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   90....       MOV       DPTR,#pMtAfDataReq
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F8           MOV       R0,A
   \   000074   2412         ADD       A,#0x12
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   39           ADDC      A,R1
   \   00007A   F583         MOV       DPH,A
   \   00007C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00007F   90....       MOV       DPTR,#pMtAfDataReq
   \   000082   E0           MOVX      A,@DPTR
   \   000083   2410         ADD       A,#0x10
   \   000085   F582         MOV       DPL,A
   \   000087   E4           CLR       A
   \   000088   39           ADDC      A,R1
   \   000089   F583         MOV       DPH,A
   \   00008B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008E   90....       MOV       DPTR,#pMtAfDataReq
   \   000091   E0           MOVX      A,@DPTR
   \   000092   2415         ADD       A,#0x15
   \   000094   F582         MOV       DPL,A
   \   000096   E4           CLR       A
   \   000097   39           ADDC      A,R1
   \   000098   F583         MOV       DPH,A
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F9           MOV       R1,A
   \   00009C   90....       MOV       DPTR,#pMtAfDataReq + 1
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   C8           XCH       A,R0
   \   0000A1   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   FC           MOV       R4,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   FD           MOV       R5,A
   \   0000A9   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000AC   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000AF   7409         MOV       A,#0x9
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   E9           MOV       A,R1
   \   0000B5   85..82       MOV       DPL,?XSP + 0
   \   0000B8   85..83       MOV       DPH,?XSP + 1
   \   0000BB   F0           MOVX      @DPTR,A
    953              (void)osal_mem_free(pMtAfDataReq);
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   12....       LCALL     ?Subroutine3 & 0xFFFF
    954              pMtAfDataReq = NULL;
    955            }
   \                     ??CrossCallReturnLabel_3:
   \   0000BF   8024         SJMP      ??MT_AfDataStore_3
    956            else
    957            {
    958              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000C1                ; Setup parameters for call to function osal_memcpy
   \   0000C1   8E..         MOV       ?V0,R6
   \   0000C3   8F..         MOV       ?V1,R7
   \   0000C5   75..00       MOV       ?V2,#0x0
   \   0000C8   78..         MOV       R0,#?V0
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CD   EA           MOV       A,R2
   \   0000CE   FC           MOV       R4,A
   \   0000CF   7D00         MOV       R5,#0x0
   \   0000D1   E5..         MOV       A,?V6
   \   0000D3   25..         ADD       A,?V4
   \   0000D5   FA           MOV       R2,A
   \   0000D6   E5..         MOV       A,?V7
   \   0000D8   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
    959              rtrn = afStatus_SUCCESS;
   \   0000DE   85..82       MOV       DPL,?XSP + 0
   \   0000E1   85..83       MOV       DPH,?XSP + 1
   \   0000E4   E4           CLR       A
    960            }
   \                     ??MT_AfDataStore_3:
   \   0000E5   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    961          
    962            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    963                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??CrossCallReturnLabel_80:
   \   0000E8   7A11         MOV       R2,#0x11
   \   0000EA   7964         MOV       R1,#0x64
   \   0000EC   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    964          }
   \   0000EF   7401         MOV       A,#0x1
   \   0000F1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F4   7F08         MOV       R7,#0x8
   \   0000F6   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine42_0
   \   000007                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7410         MOV       A,#0x10
   \   000008                REQUIRE ??Subroutine45_0
   \   000008                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    965          
    966          /**************************************************************************************************
    967           * @fn          MT_AfAPSF_ConfigSet
    968           *
    969           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    970           *
    971           * input parameters
    972           *
    973           * @param       pBuf - Pointer to the received buffer.
    974           *
    975           * output parameters
    976           *
    977           * None.
    978           *
    979           * @return      None.
    980           */
    981          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    982          {
    983            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    984            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    985          
    986            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    987                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    988          }
    989          
    990          /**************************************************************************************************
    991           * @fn          MT_AfAPSF_ConfigGet
    992           *
    993           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
    994           *
    995           * input parameters
    996           *
    997           * @param       pBuf - Pointer to the received buffer.
    998           *
    999           * output parameters
   1000           *
   1001           * None.
   1002           *
   1003           * @return      None.
   1004           */
   1005          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   1006          {
   1007            afAPSF_Config_t cfg = { 0, 0 };
   1008            uint8 buf[2];
   1009          
   1010            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   1011          
   1012            buf[0] = cfg.frameDelay;
   1013            buf[1] = cfg.windowSize;
   1014          
   1015            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1016                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   1017          }
   1018          
   1019          /***************************************************************************************************
   1020          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     19   MT_AfCommandProcessing
        0     19   -> MT_AfDataRequest
        0     19   -> MT_AfDataRequestSrcRtg
        0     19   -> MT_AfDataRetrieve
        0     19   -> MT_AfDataStore
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> MT_BuildEndpointDesc
        0     19   -> afAPSF_ConfigGet
        0     19   -> afAPSF_ConfigSet
        0     19   -> afDelete
        0     19   -> afRegister
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     63   MT_AfDataRequest
        0     44   -> AF_DataRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     35   -> afFindEndPointDesc
        0     35   -> osal_build_uint16
        0     35   -> osal_mem_alloc
        0     38   -> osal_memcpy
        0     35   -> osal_set_event
        0     39   -> osal_start_timerEx
      1     65   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_build_uint16
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     41   MT_AfDataRetrieve
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_build_uint16
        0     19   -> osal_build_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     45   MT_AfDataStore
        0     26   -> AF_DataRequest
        0     17   -> MT_BuildAndSendZToolResponse
        0     17   -> osal_build_uint16
        0     17   -> osal_mem_free
        0     20   -> osal_memcpy
      0     13   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0     13   -> osal_start_timerEx
      1     28   MT_AfIncomingMsg
        0     24   -> MT_BuildAndSendZToolResponse
        0     28   -> osal_buffer_uint32
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     24   -> osal_set_event
        0     28   -> osal_start_timerEx
      3      6   MT_AfReflectError
        2      6   -> MT_BuildAndSendZToolResponse


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       8  ??Subroutine42_0
       9  ??Subroutine43_0
       6  ??Subroutine44_0
       6  ??Subroutine45_0
       7  ??Subroutine46_0
       1  ??Subroutine47_0
       6  ??Subroutine48_0
       6  ??Subroutine49_0
      10  ?Subroutine0
       3  ?Subroutine1
       5  ?Subroutine10
       8  ?Subroutine11
      13  ?Subroutine12
       6  ?Subroutine13
       7  ?Subroutine14
       7  ?Subroutine15
      13  ?Subroutine16
       4  ?Subroutine17
      11  ?Subroutine18
      10  ?Subroutine19
      16  ?Subroutine2
       7  ?Subroutine20
       8  ?Subroutine21
       5  ?Subroutine22
       5  ?Subroutine23
       7  ?Subroutine24
       9  ?Subroutine25
      10  ?Subroutine26
       2  ?Subroutine27
      18  ?Subroutine28
      10  ?Subroutine29
      18  ?Subroutine3
      13  ?Subroutine30
       9  ?Subroutine31
       3  ?Subroutine32
       5  ?Subroutine33
       9  ?Subroutine34
       7  ?Subroutine35
      10  ?Subroutine36
       6  ?Subroutine37
       6  ?Subroutine38
       8  ?Subroutine39
      10  ?Subroutine4
       9  ?Subroutine40
       7  ?Subroutine41
      18  ?Subroutine5
       1  ?Subroutine6
      19  ?Subroutine7
      15  ?Subroutine8
      15  ?Subroutine9
     374  MT_AfCommandProcessing
      49  MT_AfDataConfirm
     689  MT_AfDataRequest
     349  MT_AfDataRequestSrcRtg
     294  MT_AfDataRetrieve
     249  MT_AfDataStore
     142  MT_AfExec
     744  MT_AfIncomingMsg
     100  MT_AfReflectError
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList
      54  -- Other

 
 3 421 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
     2 bytes of CONST    memory (+ 4 bytes shared)
 3 421 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
