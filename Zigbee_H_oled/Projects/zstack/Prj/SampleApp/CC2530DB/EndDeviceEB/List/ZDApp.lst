###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Oct/2019  09:20:17
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\Users\hhhho\AppData\Local\Temp\EW3B09.tmp
#        (C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\stack\zdo\ZDApp.c
#        -D SECURE=1 -D xNV_INIT -D xNV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D LCD_SUPPORTED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D FEATURE_SYSTEM_STATS -lC
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\Source\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    191          
    192          /*********************************************************************
    193           * EXTERNAL VARIABLES
    194           */
    195          
    196          /*********************************************************************
    197           * EXTERNAL FUNCTIONS
    198           */
    199          
    200          /*********************************************************************
    201           * LOCAL FUNCTIONS
    202           */
    203          
    204          void ZDApp_NetworkStartEvt( void );
    205          void ZDApp_DeviceAuthEvt( void );
    206          void ZDApp_SaveNetworkStateEvt( void );
    207          
    208          uint8 ZDApp_ReadNetworkRestoreState( void );
    209          uint8 ZDApp_RestoreNetworkState( void );
    210          void ZDAppDetermineDeviceType( void );
    211          void ZDApp_InitUserDesc( void );
    212          void ZDAppCheckForHoldKey( void );
    213          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    214          void ZDApp_ProcessNetworkJoin( void );
    215          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    216          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    217          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    218          
    219          void ZDApp_SecInit( uint8 state );
    220          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    221          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    222          
    223          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    224          
    225          void ZDApp_ResetTimerStart( uint16 delay );
    226          void ZDApp_ResetTimerCancel( void );
    227          void ZDApp_LeaveCtrlInit( void );
    228          void ZDApp_LeaveCtrlSet( uint8 ra );
    229          uint8 ZDApp_LeaveCtrlBypass( void );
    230          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    231          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    232                                  uint8 removeChildren );
    233          void ZDApp_NodeProfileSync( uint8 stackProfile );
    234          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    235          void ZDApp_RegisterCBs( void );
    236          void ZDApp_InitZdoCBFunc(void);
    237          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    238          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    239          void ZDApp_InitPendingBind( void );
    240          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    241          void ZDApp_AgeOutPendingBindEntry( void );
    242          #endif
    243          
    244          void ZDApp_SetParentAnnceTimer( void );
    245          
    246          /*********************************************************************
    247           * LOCAL VARIABLES
    248           */
    249          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    250          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    251          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    252          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    253          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    254          
    255          #if defined( HOLD_AUTO_START )
    256            devStates_t devState = DEV_HOLD;
    257          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    258            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    259          #endif
    260          
    261          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    262            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    263          
    264          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    265            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    266            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    267                                  // to parent. Set to make the device do an Orphan scan.
    268          #else
    269            // Set the default to coodinator
    270            devStartModes_t devStartMode = MODE_HARD;
    271          #endif
    272          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    273          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    274          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    275          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    276          {
    277            ZDO_EP,
    278            &ZDAppTaskID,
    279            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    280            (afNetworkLatencyReq_t)0            // No Network Latency req
    281          };
    282          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    283          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    284          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    285          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    286          
    287          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */
    288          //static uint8 zdappHoldKeys;
    289          
    290          /*********************************************************************
    291           * @fn      ZDApp_Init
    292           *
    293           * @brief   ZDApp Initialization function.
    294           *
    295           * @param   task_id - ZDApp Task ID
    296           *
    297           * @return  None
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    300          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    301            // Save the task ID
    302            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    303          
    304            // Initialize the ZDO global device short address storage
    305            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    306            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    307            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    308          
    309            // Check for manual "Hold Auto Start"
    310          //  ZDAppCheckForHoldKey();
    311          
    312            // Initialize ZDO items and setup the device - type of device to create.
    313            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    314          
    315            // Register the endpoint description with the AF
    316            // This task doesn't have a Simple description, but we still need
    317            // to register the endpoint.
    318            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    319          
    320          #if defined( ZDO_USERDESC_RESPONSE )
    321            ZDApp_InitUserDesc();
    322          #endif // ZDO_USERDESC_RESPONSE
    323          
    324            // Start the device?
    325            if ( devState != DEV_HOLD )
   \   000026   90....       MOV       DPTR,#devState
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6006         JZ        ??ZDApp_Init_0
    326            {
    327              ZDOInitDevice( 0 );
   \   00002C                ; Setup parameters for call to function ZDOInitDevice
   \   00002C   7A00         MOV       R2,#0x0
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   8004         SJMP      ??ZDApp_Init_1
    328            }
    329            else
    330            {
    331              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7AFF         MOV       R2,#-0x1
   \   000034   7BFF         MOV       R3,#-0x1
   \                     ??ZDApp_Init_1:
   \   000036   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    332              // Blink LED to indicate HOLD_START
    333          //    HalLedBlink ( HAL_LED_4, 0, 50, 500 );
    334            }
    335          
    336            // Initialize the ZDO callback function pointers zdoCBFunc[]
    337            ZDApp_InitZdoCBFunc();
   \   000039                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000039   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    338          
    339            ZDApp_RegisterCBs();
   \   00003C                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00003C   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    340          
    341          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    342          #if defined ( REFLECTOR )
    343            ZDApp_InitPendingBind();
   \   00003F                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   00003F   12....       LCALL     `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    344          #endif
    345          #endif
    346          } /* ZDApp_Init() */
   \   000042   02....       LJMP      ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    347          
    348          /*********************************************************************
    349           * @fn          ZDApp_SecInit
    350           *
    351           * @brief       ZDApp initialize security.
    352           *
    353           * @param       state - device initialization state
    354           *
    355           * @return      none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    358          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    359            uint8 zgPreConfigKey[SEC_KEY_LEN];
    360          
    361            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    362            {
    363              // Set the Trust Center bit
    364              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    365            }
    366          
    367            // Initialize ZigBee Device Security Manager
    368            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    369          
    370            if ( ZG_SECURE_ENABLED )
    371            {
    372              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV       A,?V0
   \   000011   6045         JZ        ??ZDApp_SecInit_0
    373              {
    374                nwkFrameCounter = 0;
   \   000013   90....       MOV       DPTR,#nwkFrameCounter
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    375          
    376                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001E   90....       MOV       DPTR,#_NIB + 61
   \   000021   E0           MOVX      A,@DPTR
   \   000022   7034         JNZ       ??ZDApp_SecInit_0
    377                {
    378                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    379                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000024   90....       MOV       DPTR,#zgSecurityMode
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6401         XRL       A,#0x1
   \   00002A   702C         JNZ       ??ZDApp_SecInit_0
   \   00002C   90....       MOV       DPTR,#zgPreConfigKeys
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6026         JZ        ??ZDApp_SecInit_0
    380                  {
    381                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000032                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000032   AC..         MOV       R4,?XSP + 0
   \   000034   AD..         MOV       R5,?XSP + 1
   \   000036   7A62         MOV       R2,#0x62
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    382                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   00003D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00003D   7900         MOV       R1,#0x0
   \   00003F   AA..         MOV       R2,?XSP + 0
   \   000041   AB..         MOV       R3,?XSP + 1
   \   000043   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    383                      SSP_SwitchNwkKey( 0 );
   \   000046                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000046   7900         MOV       R1,#0x0
   \   000048   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    384          
    385                      // clear local copy of key
    386                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00004B                ; Setup parameters for call to function osal_memset
   \   00004B   7C10         MOV       R4,#0x10
   \   00004D   7D00         MOV       R5,#0x0
   \   00004F   7900         MOV       R1,#0x0
   \   000051   AA..         MOV       R2,?XSP + 0
   \   000053   AB..         MOV       R3,?XSP + 1
   \   000055   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    387                  }
    388                }
    389              }
    390          
    391              // clean the new devices list when Security module is initialized
    392              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000058   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00005B   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00005E   6021         JZ        ??ZDApp_SecInit_1
    393              {
    394                ZDAppNewDevice_t *pNewDeviceNext;
    395          
    396                while ( ZDApp_NewDeviceList )
    397                {
    398                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000060   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000063   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000066   FE           MOV       R6,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   FF           MOV       R7,A
    399                  osal_mem_free( ZDApp_NewDeviceList );
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00006D   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000070   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    400                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000073   EF           MOV       A,R7
   \   000074   F9           MOV       R1,A
   \   000075   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000078   EE           MOV       A,R6
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   EF           MOV       A,R7
   \   00007C   F0           MOVX      @DPTR,A
    401                }
   \   00007D   EE           MOV       A,R6
   \   00007E   49           ORL       A,R1
   \   00007F   70DF         JNZ       ??ZDApp_SecInit_2
    402              }
    403            }
    404          }
   \                     ??ZDApp_SecInit_1:
   \   000081   7410         MOV       A,#0x10
   \   000083   02....       LJMP      ??Subroutine63_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine57_0
   \   000001                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   80..         SJMP      ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    405          
    406          /*********************************************************************
    407           * @fn      ZDApp_event_loop()
    408           *
    409           * @brief   Main event loop for Zigbee device objects task. This function
    410           *          should be called at periodic intervals.
    411           *
    412           * @param   task_id - Task ID
    413           * @param   events  - Bitmap of events
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    419            uint8 *msg_ptr;
    420          
    421            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL       A,#0x80
   \   00000D   702D         JNZ       ??ZDApp_event_loop_0
    422            {
    423              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    424              {
    425                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    426          
    427                // Release the memory
    428                osal_msg_deallocate( msg_ptr );
    429              }
    430          
    431              // Return unprocessed events
    432              return (events ^ SYS_EVENT_MSG);
    433            }
    434          
    435            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EA           MOV       A,R2
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5040         JNC       ??ZDApp_event_loop_1
    436            {
    437              // Initialize apps and start the network
    438              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    439          
    440              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    441                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV       R4,#0xf
   \   00001B   7B0F         MOV       R3,#0xf
   \   00001D   90....       MOV       DPTR,#devStartMode
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    442          
    443              // Return unprocessed events
    444              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV       A,R6
   \   00002D   6401         XRL       A,#0x1
   \   00002F   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    445            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV       R2,?V0
   \   000037   AB..         MOV       R3,?V1
   \   000039   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV       DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV       ?V0,R2
   \   000046   8B..         MOV       ?V1,R3
   \   000048   EA           MOV       A,R2
   \   000049   4B           ORL       A,R3
   \   00004A   70E6         JNZ       ??ZDApp_event_loop_3
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   6480         XRL       A,#0x80
   \   000051   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    446          
    447            if ( ZSTACK_ROUTER_BUILD )
    448            {
    449              if ( events & ZDO_NETWORK_START )
    450              {
    451                ZDApp_NetworkStartEvt();
    452          
    453                // Return unprocessed events
    454                return (events ^ ZDO_NETWORK_START);
    455              }
    456          
    457              if ( events & ZDO_ROUTER_START )
    458              {
    459                if ( nwkStatus == ZSuccess )
    460                {
    461                  if ( devState == DEV_END_DEVICE )
    462                  {
    463                    ZDApp_ChangeState( DEV_ROUTER );
    464                  }
    465          
    466                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    467          
    468                  if ( zgChildAgingEnable == TRUE )
    469                  {
    470                    // Once the device has changed its state to a ROUTER set the timer to send
    471                    // Parent annce
    472                    ZDApp_SetParentAnnceTimer();
    473                  }
    474                }
    475                else
    476                {
    477                  // remain as end device
    478                }
    479                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    480          
    481                // Return unprocessed events
    482                return (events ^ ZDO_ROUTER_START);
    483              }
    484          
    485              if ( events & ZDO_PARENT_ANNCE_EVT )
    486              {
    487                ZDApp_SendParentAnnce();
    488          
    489                // Return unprocessed events
    490                return (events ^ ZDO_PARENT_ANNCE_EVT);
    491              }
    492            }
    493          
    494            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_1:
   \   000054   EB           MOV       A,R3
   \   000055   5420         ANL       A,#0x20
   \   000057   6034         JZ        ??ZDApp_event_loop_5
    495            {
    496              if( devState == DEV_NWK_BACKOFF )
   \   000059   90....       MOV       DPTR,#devState
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   640C         XRL       A,#0xc
   \   00005F   700D         JNZ       ??ZDApp_event_loop_6
    497              {
    498                ZDApp_ChangeState(DEV_NWK_DISC);
   \   000061                ; Setup parameters for call to function ZDApp_ChangeState
   \   000061   7902         MOV       R1,#0x2
   \   000063   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    499                // Restart scan for rejoin
    500                ZDApp_StartJoiningCycle();
   \   000066                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   000066   12....       LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    501                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   000069                ; Setup parameters for call to function osal_start_timerEx
   \   000069   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   00006C   800B         SJMP      ??ZDApp_event_loop_7
    502              }
    503              else
    504              {
    505                // Rejoin backoff, silent period
    506                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_6:
   \   00006E                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006E   790C         MOV       R1,#0xc
   \   000070   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    507                ZDApp_StopJoiningCycle();
   \   000073                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000073   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    508                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   000076                ; Setup parameters for call to function osal_start_timerEx
   \   000076   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_7:
   \   000079   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007C   7A00         MOV       R2,#0x0
   \   00007E   7B20         MOV       R3,#0x20
    509              }
   \   000080   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
    510          
    511              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   000086   EE           MOV       A,R6
   \   000087   FA           MOV       R2,A
   \   000088   EF           MOV       A,R7
   \   000089   6420         XRL       A,#0x20
   \   00008B   8060         SJMP      ??ZDApp_event_loop_4
    512            }
    513          
    514            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_5:
   \   00008D   EA           MOV       A,R2
   \   00008E   5410         ANL       A,#0x10
   \   000090   602A         JZ        ??ZDApp_event_loop_8
    515            {
    516              ZDO_UpdateNwkStatus( devState );
   \   000092                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000092   90....       MOV       DPTR,#devState
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F9           MOV       R1,A
   \   000097   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    517          
    518              // At start up, do one MTO route discovery if the device is a concentrator
    519              if ( zgConcentratorEnable == TRUE )
   \   00009A   90....       MOV       DPTR,#zgConcentratorEnable
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   6401         XRL       A,#0x1
   \   0000A0   7013         JNZ       ??ZDApp_event_loop_9
    520              {
    521                // Start next event
    522                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000A2                ; Setup parameters for call to function osal_start_timerEx
   \   0000A2   90....       MOV       DPTR,#__Constant_64
   \   0000A5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A8   7A00         MOV       R2,#0x0
   \   0000AA   7B08         MOV       R3,#0x8
   \   0000AC   90....       MOV       DPTR,#NWK_TaskID
   \   0000AF   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    523              }
   \                     ??CrossCallReturnLabel_86:
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
    524          
    525              // Return unprocessed events
    526              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_9:
   \   0000B5   EE           MOV       A,R6
   \   0000B6   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000B8   FA           MOV       R2,A
   \   0000B9   EF           MOV       A,R7
   \   0000BA   8031         SJMP      ??ZDApp_event_loop_4
    527            }
    528          
    529            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_8:
   \   0000BC   EA           MOV       A,R2
   \   0000BD   5408         ANL       A,#0x8
   \   0000BF   6006         JZ        ??ZDApp_event_loop_10
    530            {
    531              // User defined logic
    532          
    533              // Return unprocessed events
    534              return (events ^ ZDO_COMMAND_CNF);
   \   0000C1   EA           MOV       A,R2
   \   0000C2   6408         XRL       A,#0x8
   \   0000C4   FA           MOV       R2,A
   \   0000C5   8032         SJMP      ??ZDApp_event_loop_11
    535            }
    536          
    537            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_10:
   \   0000C7   EB           MOV       A,R3
   \   0000C8   5401         ANL       A,#0x1
   \   0000CA   6005         JZ        ??ZDApp_event_loop_12
    538            {
    539              // Save only in valid state
    540              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
    541              {
    542                ZDApp_SaveNetworkStateEvt();
    543              }
    544          
    545              // Return unprocessed events
    546              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000CC   EB           MOV       A,R3
   \   0000CD   6401         XRL       A,#0x1
   \   0000CF   801C         SJMP      ??ZDApp_event_loop_4
    547            }
    548          
    549            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   0000D1   EA           MOV       A,R2
   \   0000D2   5404         ANL       A,#0x4
   \   0000D4   600A         JZ        ??ZDApp_event_loop_13
    550            {
    551          #ifdef ZBA_FALLBACK_NWKKEY
    552              if ( devState == DEV_END_DEVICE_UNAUTH )
    553              {
    554                ZDSecMgrFallbackNwkKey();
    555              }
    556              else
    557          #endif
    558              {
    559                // Set the NV startup option to force a "new" join.
    560                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000D6                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000D6   7A02         MOV       R2,#0x2
   \   0000D8   79FF         MOV       R1,#-0x1
   \   0000DA   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    561          
    562                // The device has been in the UNAUTH state, so reset
    563                // Note: there will be no return from this call
    564                SystemResetSoft();
   \   0000DD                ; Setup parameters for call to function Onboard_soft_reset
   \   0000DD   12....       LCALL     Onboard_soft_reset & 0xFFFF
    565              }
    566            }
    567          
    568          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    569            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_13:
   \   0000E0   EF           MOV       A,R7
   \   0000E1   5410         ANL       A,#0x10
   \   0000E3   600B         JZ        ??ZDApp_event_loop_14
    570            {
    571          #if defined ( REFLECTOR )
    572              ZDApp_AgeOutPendingBindEntry();
   \   0000E5                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000E5   12....       LCALL     `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    573          #endif
    574              // Return unprocessed events
    575              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   0000E8   EE           MOV       A,R6
   \   0000E9   FA           MOV       R2,A
   \   0000EA   EF           MOV       A,R7
   \   0000EB   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   0000ED   FB           MOV       R3,A
   \   0000EE   8009         SJMP      ??ZDApp_event_loop_11
    576            }
    577          #endif
    578          
    579            if ( ZG_SECURE_ENABLED )
    580            {
    581              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_14:
   \   0000F0                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   0000F0   EE           MOV       A,R6
   \   0000F1   FA           MOV       R2,A
   \   0000F2   EF           MOV       A,R7
   \   0000F3   FB           MOV       R3,A
   \   0000F4   A9..         MOV       R1,?V2
   \   0000F6   12....       LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    582            }
   \                     ??ZDApp_event_loop_11:
   \   0000F9   02....       LJMP      ?Subroutine1 & 0xFFFF
    583            else
    584            {
    585              // Discard or make more handlers
    586              return 0;
    587            }
    588          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    589          
    590          /*********************************************************************
    591           * @fn      ZDApp_ProcessSecEvent()
    592           *
    593           * @brief   Process incoming security events.
    594           *
    595           * @param   task_id - Task ID
    596           * @param   events  - Bitmap of events
    597           *
    598           * @return  none
    599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    601          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    602            (void)task_id;  // Intentionally unreferenced parameter
    603          
    604            if ( ZSTACK_ROUTER_BUILD )
    605            {
    606              if ( events & ZDO_NEW_DEVICE )
    607              {
    608                // process the new device event
    609                if ( ZDApp_NewDeviceList )
    610                {
    611                  ZDAppNewDevice_t *pNewDevice;
    612                  uint16 timeDelta;
    613          
    614                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    615          
    616                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    617                  osal_mem_free( ZDApp_NewDeviceList );
    618                  ZDApp_NewDeviceList = pNewDevice;
    619          
    620                  if ( pNewDevice )
    621                  {
    622                    timeDelta = pNewDevice->timeDelta;
    623                    pNewDevice = pNewDevice->next;
    624          
    625                    while ( pNewDevice )
    626                    {
    627                      pNewDevice->timeDelta -= timeDelta;
    628                      pNewDevice = pNewDevice->next;
    629                    }
    630          
    631                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    632                  }
    633                }
    634          
    635                // Return unprocessed events
    636                return (events ^ ZDO_NEW_DEVICE);
    637              }
    638            }
    639          
    640            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EA           MOV       A,R2
   \   00000A   5480         ANL       A,#0x80
   \   00000C   600A         JZ        ??ZDApp_ProcessSecEvent_0
    641            {
    642              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    643          
    644              // Return unprocessed events
    645              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   EE           MOV       A,R6
   \   000012   6480         XRL       A,#0x80
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   8026         SJMP      ??ZDApp_ProcessSecEvent_1
    646            }
    647          
    648            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000018   EB           MOV       A,R3
   \   000019   5402         ANL       A,#0x2
   \   00001B   600A         JZ        ??ZDApp_ProcessSecEvent_2
    649            {
    650              ZDApp_SaveNwkKey();
   \   00001D                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001D   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    651          
    652              // Return unprocessed events
    653              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   000020   EE           MOV       A,R6
   \   000021   FA           MOV       R2,A
   \   000022   EF           MOV       A,R7
   \   000023   6402         XRL       A,#0x2
   \   000025   8017         SJMP      ??ZDApp_ProcessSecEvent_1
    654            }
    655          
    656            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000027   EB           MOV       A,R3
   \   000028   5408         ANL       A,#0x8
   \   00002A   6005         JZ        ??ZDApp_ProcessSecEvent_3
    657            {
    658          #if defined (NV_RESTORE)
    659              ZDSecMgrSaveApsLinkKey();
    660          #endif // (NV_RESTORE)
    661          
    662              // Return unprocessed events
    663              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00002C   EB           MOV       A,R3
   \   00002D   6408         XRL       A,#0x8
   \   00002F   800D         SJMP      ??ZDApp_ProcessSecEvent_1
    664            }
    665          
    666            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000031   EB           MOV       A,R3
   \   000032   5404         ANL       A,#0x4
   \   000034   600B         JZ        ??ZDApp_ProcessSecEvent_4
    667            {
    668              ZDSecMgrSaveTCLinkKey();
   \   000036                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000036   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    669          
    670              // Return unprocessed events
    671              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000039   EE           MOV       A,R6
   \   00003A   FA           MOV       R2,A
   \   00003B   EF           MOV       A,R7
   \   00003C   6404         XRL       A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00003E   FB           MOV       R3,A
   \   00003F   8004         SJMP      ??ZDApp_ProcessSecEvent_5
    672            }
    673          
    674            // Discard or make more handlers
    675            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000041   7A00         MOV       R2,#0x0
   \   000043   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000045   02....       LJMP      ??Subroutine64_0 & 0xFFFF
    676          }
    677          
    678          /*********************************************************************
    679           * Application Functions
    680           */
    681          
    682          /*********************************************************************
    683           * @fn      ZDOInitDevice
    684           *
    685           * @brief   Start the device in the network.  This function will read
    686           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    687           *   restore the network state of the device.
    688           *
    689           * @param   startDelay - timeDelay to start device (in milliseconds).
    690           *                       There is a jitter added to this delay:
    691           *                       ((NWK_START_DELAY + startDelay)
    692           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    693           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    694           *                       this function will hold the network init. Application
    695           *                       can start the device.
    696           *
    697           * NOTE:    If the application would like to force a "new" join, the
    698           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    699           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    700           *          this function. "new" join means to not restore the network
    701           *          state of the device. Use zgWriteStartupOptions() to set these
    702           *          options.
    703           *
    704           * @return
    705           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    706           *          restored.
    707           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    708           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    709           *          it could mean that there was no network state to restore.
    710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    712          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    713            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    714            uint16 extendedDelay = 0;
    715          
    716            if ( devState == DEV_HOLD )
   \   000009   90....       MOV       DPTR,#devState
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   7005         JNZ       ??ZDOInitDevice_0
    717            {
    718              // Initialize the RAM items table, in case an NV item has been updated.
    719              zgInitItems( FALSE );
   \   00000F                ; Setup parameters for call to function zgInitItems
   \   00000F   7900         MOV       R1,#0x0
   \   000011   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    720            }
    721          
    722            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000014                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000014   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    723            //devtag.071807.todo - fix this temporary solution
    724            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000017   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   90....       MOV       DPTR,#_NIB + 14
   \   00001E   F0           MOVX      @DPTR,A
    725          
    726          #if defined ( NV_RESTORE )
    727            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    728            // while booting to skip past NV Restore.
    729          //  if ( zdappHoldKeys == SW_BYPASS_NV )
    730          //  {
    731          //    zdappHoldKeys = 0;   // Only once
    732          //    networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    733          //  }
    734          //  else
    735          //  {
    736          //    // Determine if NV should be restored
    737          //    networkStateNV = ZDApp_ReadNetworkRestoreState();
    738          //  }
    739            networkStateNV = ZDApp_ReadNetworkRestoreState();
    740          
    741            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    742            {
    743              networkStateNV = ZDApp_RestoreNetworkState();
    744              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    745            }
    746            else
    747            {
    748              // Wipe out the network state in NV
    749              NLME_InitNV();
    750              NLME_SetDefaultNV();
    751              // clear NWK key values
    752              ZDSecMgrClearNVKeyValues();
    753            }
    754          #endif
    755          
    756            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    757            {
    758              ZDAppDetermineDeviceType();
   \   00001F                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00001F   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    759          
    760              // Only delay if joining network - not restoring network state
    761              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    762                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000022                ; Setup parameters for call to function osal_rand
   \   000022   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000025   EA           MOV       A,R2
   \   000026   547F         ANL       A,#0x7f
   \   000028   F8           MOV       R0,A
   \   000029   E5..         MOV       A,?V0
   \   00002B   28           ADD       A,R0
   \   00002C   F8           MOV       R0,A
   \   00002D   E4           CLR       A
   \   00002E   35..         ADDC      A,?V1
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   2464         ADD       A,#0x64
   \   000034   FE           MOV       R6,A
   \   000035   E4           CLR       A
   \   000036   39           ADDC      A,R1
   \   000037   FF           MOV       R7,A
    763          
    764              runtimeChannel = zgDefaultChannelList;
   \   000038   90....       MOV       DPTR,#zgDefaultChannelList
   \   00003B   12....       LCALL     ?XLOAD_R0123
   \   00003E   90....       MOV       DPTR,#runtimeChannel
   \   000041   12....       LCALL     ?XSTORE_R0123
    765            }
    766          
    767            // Initialize the security for type of device
    768            ZDApp_SecInit( networkStateNV );
   \   000044                ; Setup parameters for call to function ZDApp_SecInit
   \   000044   7901         MOV       R1,#0x1
   \   000046   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    769          
    770            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000049   74FF         MOV       A,#-0x1
   \   00004B   65..         XRL       A,?V0
   \   00004D   7004         JNZ       ??ZDOInitDevice_1
   \   00004F   74FF         MOV       A,#-0x1
   \   000051   65..         XRL       A,?V1
   \                     ??ZDOInitDevice_1:
   \   000053   6010         JZ        ??ZDOInitDevice_2
    771            {
    772              devState = DEV_INIT;    // Remove the Hold state
   \   000055   90....       MOV       DPTR,#devState
   \   000058   7401         MOV       A,#0x1
   \   00005A   F0           MOVX      @DPTR,A
    773          
    774              // Initialize leave control logic
    775              ZDApp_LeaveCtrlInit();
   \   00005B                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00005B   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    776          
    777              // Trigger the network start
    778              ZDApp_NetworkInit( extendedDelay );
   \   00005E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00005E   EE           MOV       A,R6
   \   00005F   FA           MOV       R2,A
   \   000060   EF           MOV       A,R7
   \   000061   FB           MOV       R3,A
   \   000062   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    779            }
    780          
    781            // set broadcast address mask to support broadcast filtering
    782            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_2:
   \   000065                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000065   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F9           MOV       R1,A
   \   00006A   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    783          
    784            return ( networkStateNV );
   \   00006D   7901         MOV       R1,#0x1
   \   00006F   02....       LJMP      ??Subroutine72_0 & 0xFFFF
    785          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    786          
    787          /*********************************************************************
    788           * @fn      ZDApp_ReadNetworkRestoreState
    789           *
    790           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    791           *          or not to restore the network state.
    792           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    793           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    794           *
    795           * @param   none
    796           *
    797           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    798           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    799           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    800           *          ZCD_NV_STARTUP_OPTION
    801           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    802          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    803          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    804            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    805          
    806            // Look for the New Network State option.
    807            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5002         JNC       ??ZDApp_ReadNetworkRestoreState_0
    808            {
    809              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    810            }
    811          
    812            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV       A,R6
   \   000013   F9           MOV       R1,A
   \   000014   02....       LJMP      ??Subroutine64_0 & 0xFFFF
    813          }
    814          
    815          /*********************************************************************
    816           * @fn      ZDAppDetermineDeviceType()
    817           *
    818           * @brief   Determines the type of device to start.
    819           *
    820           *          Looks at zgDeviceLogicalType and determines what type of
    821           *          device to start.  The types are:
    822           *            ZG_DEVICETYPE_COORDINATOR
    823           *            ZG_DEVICETYPE_ROUTER
    824           *            ZG_DEVICETYPE_ENDDEVICE
    825           *
    826           * @param   none
    827           *
    828           * @return  none
    829           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    830          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    831          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    832            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    833            {
    834              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    835              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   8036         SJMP      ??ZDAppDetermineDeviceType_1
    836            }
    837            else
    838            {
    839              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   54F8         ANL       A,#0xf8
   \   00001E   F8           MOV       R0,A
   \   00001F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6401         XRL       A,#0x1
   \   000025   7004         JNZ       ??ZDAppDetermineDeviceType_2
    840                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV       A,#0x1
   \   000029   8007         SJMP      ??ZDAppDetermineDeviceType_3
    841              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7007         JNZ       ??ZDAppDetermineDeviceType_4
    842                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL       A,R0
   \   000033   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX      @DPTR,A
    843          
    844              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    845              // The device shall do rejoin the network. Otherwise, do normal join
    846              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV       A,R1
   \   00003F   90....       MOV       DPTR,#devStartMode
   \   000042   7003         JNZ       ??ZDAppDetermineDeviceType_5
    847              {
    848                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR       A
   \   000045   8007         SJMP      ??ZDAppDetermineDeviceType_1
    849              }
    850              else
    851              {
    852                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV       A,#0x3
   \   000049   F0           MOVX      @DPTR,A
    853                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00004A   90....       MOV       DPTR,#prevDevState
   \   00004D   04           INC       A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004E   F0           MOVX      @DPTR,A
    854              }
    855            }
    856          }
   \   00004F   02....       LJMP      ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    857          
    858          /*********************************************************************
    859           * @fn      ZDApp_NetworkStartEvt()
    860           *
    861           * @brief   Process the Network Start Event
    862           *
    863           * @param   none
    864           *
    865           * @return  none
    866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    867          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    868          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    869            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7024         JNZ       ??ZDApp_NetworkStartEvt_0
    870            {
    871              // Successfully started a ZigBee network
    872              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7012         JNZ       ??ZDApp_NetworkStartEvt_1
    873              {
    874                //save NIB to NV before child joins if NV_RESTORE is defined
    875                ZDApp_NwkWriteNVRequest();
    876                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7909         MOV       R1,#0x9
   \   000014   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    877          
    878                if ( zgChildAgingEnable == TRUE )
   \   000017   90....       MOV       DPTR,#zgChildAgingEnable
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   6401         XRL       A,#0x1
   \   00001D   7008         JNZ       ??CrossCallReturnLabel_69
    879                {
    880                  // Once the device has changed its state to a COORDINATOR set the timer to send
    881                  // Parent annce
    882                  ZDApp_SetParentAnnceTimer();
   \   00001F                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   00001F   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000022   8003         SJMP      ??CrossCallReturnLabel_69
    883                }
    884              }
    885              else
    886              {
    887                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   12....       LCALL     ?Subroutine19 & 0xFFFF
    888              }
    889          
    890              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??CrossCallReturnLabel_69:
   \   000027                ; Setup parameters for call to function osal_pwrmgr_device
   \   000027   7900         MOV       R1,#0x0
   \   000029   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   00002C   8030         SJMP      ??ZDApp_NetworkStartEvt_2
    891            }
    892            else
    893            {
    894              // Try again with a higher energy threshold
    895              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00002E                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00002E   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000031   E9           MOV       A,R1
   \   000032   7900         MOV       R1,#0x0
   \   000034   2410         ADD       A,#0x10
   \   000036   5001         JNC       ??ZDApp_NetworkStartEvt_3
   \   000038   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000039   C3           CLR       C
   \   00003A   94FF         SUBB      A,#-0x1
   \   00003C   E9           MOV       A,R1
   \   00003D   9400         SUBB      A,#0x0
   \   00003F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000041   65D0         XRL       A,PSW
   \   000043   33           RLC       A
   \   000044   5013         JNC       ??ZDApp_NetworkStartEvt_4
    896              {
    897                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000046                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000046   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000049   E9           MOV       A,R1
   \   00004A   F8           MOV       R0,A
   \   00004B                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00004B   7410         MOV       A,#0x10
   \   00004D   29           ADD       A,R1
   \   00004E   F9           MOV       R1,A
   \   00004F   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    898                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000052                ; Setup parameters for call to function osal_set_event
   \   000052   7A01         MOV       R2,#0x1
   \   000054   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    899              }
   \                     ??CrossCallReturnLabel_74:
   \   000057   8005         SJMP      ??ZDApp_NetworkStartEvt_2
    900              else
    901              {
    902                // Failed to start network. Enter a dormant state (until user intervenes)
    903                ZDApp_ChangeState( DEV_INIT );
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000059                ; Setup parameters for call to function ZDApp_ChangeState
   \   000059   7901         MOV       R1,#0x1
   \   00005B   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    904              }
    905            }
    906          }
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00005E   02....       LJMP      ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine51_0
   \   000002                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#ZDAppTaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET
    907          
    908          /*********************************************************************
    909           * @fn      ZDApp_DeviceAuthEvt()
    910           *
    911           * @brief   Process the Device Authentic Event
    912           *
    913           * @param   none
    914           *
    915           * @return  none
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    918          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    919            // received authentication from trust center
    920            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   7021         JNZ       ??ZDApp_DeviceAuthEvt_0
    921            {
    922              // Stop the reset timer so it doesn't reset
    923              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    924          
    925              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV       R1,#0x6
   \   000011   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    926          
    927              // Set the Power Manager Device
    928          #if defined ( POWER_SAVING )
    929              osal_pwrmgr_device( PWRMGR_BATTERY );
    930          #endif
    931          
    932              if ( ZSTACK_ROUTER_BUILD )
    933              {
    934                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    935                {
    936                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    937                  NLME_StartRouterRequest( 0, 0, false );
    938                }
    939              }
    940          
    941              // Notify to save info into NV
    942              ZDApp_NVUpdate();
    943          
    944              // Save off the security
    945              ZDApp_SaveNwkKey();
   \   000014                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000014   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    946          
    947              ZDApp_AnnounceNewAddress();
   \   000017                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000017   12....       LCALL     ?Subroutine40 & 0xFFFF
    948          
    949              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    950                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    951                    && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_53:
   \   00001A   5008         JNC       ??ZDApp_DeviceAuthEvt_1
   \   00001C   90....       MOV       DPTR,#zgChildAgingEnable
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6401         XRL       A,#0x1
   \   000022   7009         JNZ       ??ZDApp_DeviceAuthEvt_0
    952              {
    953                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000024                ; Setup parameters for call to function NLME_SetPollRate
   \   000024   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000027   12....       LCALL     ?XLOAD_R2345
   \   00002A   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    954              }
    955            }
    956            else
    957            {
    958              ZDApp_NVUpdate();
    959            }
    960          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00002D   02....       LJMP      ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   000003   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000006   E0           MOVX      A,@DPTR
   \   000007   A2E3         MOV       C,0xE0 /* A   */.3
   \   000009   22           RET
    961          
    962          /*********************************************************************
    963           * @fn      ZDApp_SaveNetworkStateEvt()
    964           *
    965           * @brief   Process the Save the Network State Event
    966           *
    967           * @param   none
    968           *
    969           * @return  none
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    972          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    973          #if defined ( NV_RESTORE )
    974           #if defined ( NV_TURN_OFF_RADIO )
    975            // Turn off the radio's receiver during an NV update
    976            uint8 RxOnIdle;
    977            uint8 x = false;
    978            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    979            ZMacSetReq( ZMacRxOnIdle, &x );
    980           #endif
    981          
    982            // Update the Network State in NV
    983            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    984                           NWK_NV_DEVICELIST_ENABLE |
    985                           NWK_NV_BINDING_ENABLE    |
    986                           NWK_NV_ADDRMGR_ENABLE );
    987          
    988            // Reset the NV startup option to resume from NV by
    989            // clearing the "New" join option.
    990            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    991          
    992           #if defined ( NV_TURN_OFF_RADIO )
    993            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    994           #endif
    995          #endif // NV_RESTORE
    996          }
   \   000000   02....       LJMP      ?BRET
    997          
    998          #if defined ( NV_RESTORE )
    999          /*********************************************************************
   1000           * @fn      ZDApp_RestoreNetworkState()
   1001           *
   1002           * @brief   This function will restore the network state of the
   1003           *          device if the network state is stored in NV.
   1004           *
   1005           * @param   none
   1006           *
   1007           * @return
   1008           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1009           *          restored.
   1010           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1011           *          This could mean that zgStartupOption said to not restore, or
   1012           *          it could mean that there was no network state to restore.
   1013           *
   1014           */
   1015          uint8 ZDApp_RestoreNetworkState( void )
   1016          {
   1017            uint8 nvStat;
   1018          
   1019            // Initialize NWK NV items
   1020            nvStat = NLME_InitNV();
   1021          
   1022            if ( nvStat != NV_OPER_FAILED )
   1023            {
   1024              if ( NLME_RestoreFromNV() )
   1025              {
   1026                // Are we a coordinator
   1027                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   1028                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   1029                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   1030                devStartMode = MODE_RESUME;
   1031                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1032              }
   1033              else
   1034                nvStat = NV_ITEM_UNINIT;
   1035          
   1036              if ( ZG_SECURE_ENABLED )
   1037              {
   1038                nwkFrameCounterChanges = 0;
   1039          
   1040                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1041                {
   1042                  ZDApp_RestoreNwkKey( TRUE );
   1043                }
   1044              }
   1045          
   1046              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1047              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1048              // other than default.
   1049            }
   1050          
   1051            if ( nvStat == ZSUCCESS )
   1052              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   1053            else
   1054              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   1055          }
   1056          #endif // NV_RESTORE
   1057          
   1058          /*********************************************************************
   1059           * @fn      ZDApp_InitUserDesc()
   1060           *
   1061           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1062           *          when needed.  If you want to initialize the User descriptor to
   1063           *          something other than all zero, do it here.
   1064           *
   1065           * @param   none
   1066           *
   1067           * @return  none
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1070          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1071            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1072          
   1073            // Initialize the User Descriptor, the descriptor is read from NV
   1074            // when needed.  If you want to initialize the User descriptor to something
   1075            // other than all zero, do it here.
   1076            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   12....       LCALL     ?Subroutine33 & 0xFFFF
   1077            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1078                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_33:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV       R4,#0x11
   \   000014   7D00         MOV       R5,#0x0
   \   000016   7A81         MOV       R2,#-0x7f
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001D   7402         MOV       A,#0x2
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   702F         JNZ       ??ZDApp_InitUserDesc_0
   1079            {
   1080              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1081                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV       ?V0,#0x11
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A81         MOV       R2,#-0x7f
   \   00003B   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7010         JNZ       ??ZDApp_InitUserDesc_0
   1082              {
   1083                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6007         JZ        ??ZDApp_InitUserDesc_0
   1084                {
   1085                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00004D   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000050   E0           MOVX      A,@DPTR
   \   000051   D2E4         SETB      0xE0 /* A   */.4
   \   000053   F0           MOVX      @DPTR,A
   1086                }
   1087              }
   1088            }
   1089          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000054   7411         MOV       A,#0x11
   \   000056   02....       LJMP      ??Subroutine67_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   7900         MOV       R1,#0x0
   \   000004   AA..         MOV       R2,?XSP + 0
   \   000006   AB..         MOV       R3,?XSP + 1
   \   000008   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   78..         MOV       R0,#?V0
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine68_0
   \   000003                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1090          
   1091          /*********************************************************************
   1092           * @fn      ZDAppCheckForHoldKey()
   1093           *
   1094           * @brief   Check for key to set the device into Hold Auto Start
   1095           *
   1096           * @param   none
   1097           *
   1098           * @return  none
   1099           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1100          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1101          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1102          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1103          
   1104            // Get Keypad directly to see if a HOLD is needed
   1105            zdappHoldKeys = HalKeyRead();
   1106          
   1107            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1108            // while booting to avoid starting up the device.
   1109            if ( zdappHoldKeys == SW_BYPASS_START )
   1110            {
   1111              // Change the device state to HOLD on start up
   1112              devState = DEV_HOLD;
   1113            }
   1114          #endif // HAL_KEY
   1115          }
   \   000000   02....       LJMP      ?BRET
   1116          
   1117          /*********************************************************************
   1118           * @fn      ZDApp_ProcessOSALMsg()
   1119           *
   1120           * @brief   Process the incoming task message.
   1121           *
   1122           * @param   msgPtr - message to process
   1123           *
   1124           * @return  none
   1125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1126          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1127          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1128            // Data Confirmation message fields
   1129            uint8 sentEP;       // This should always be 0
   1130            uint8 sentStatus;
   1131            afDataConfirm_t *afDataConfirm;
   1132            uint8 tmp;
   1133          
   1134            switch ( msgPtr->event )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   14           DEC       A
   \   000010   602A         JZ        ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC       A
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC       A
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD       A,#-0x17
   \   000020   600E         JZ        ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD       A,#0x47
   \   000024   6010         JZ        ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD       A,#-0x2a
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   \   00002D   02....       LJMP      ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1135            {
   1136              // Incoming ZDO Message
   1137              case AF_INCOMING_MSG_CMD:
   1138                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000030                ; Setup parameters for call to function ZDP_IncomingData
   \   000030   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1139                break;
   \   000033   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1140          
   1141              case ZDO_CB_MSG:
   1142                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000036                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000036   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1143                break;
   \   000039   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1144          
   1145              case AF_DATA_CONFIRM_CMD:
   1146                // This message is received as a confirmation of a data packet sent.
   1147                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1148                // The message fields are defined in AF.h
   1149                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1150                sentEP = afDataConfirm->endpoint;
   1151                sentStatus = afDataConfirm->hdr.status;
   1152          
   1153                // Action taken when confirmation is received.
   1154          #if defined ( ZIGBEE_FREQ_AGILITY )
   1155                if ( pZDNwkMgr_ProcessDataConfirm )
   1156                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1157          #endif
   1158                (void)sentEP;
   1159                (void)sentStatus;
   1160                break;
   1161          
   1162              case ZDO_NWK_DISC_CNF:
   1163                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00003C   90....       MOV       DPTR,#devState
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   6402         XRL       A,#0x2
   \   000042   6003         JZ        $+5
   \   000044   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1164                  break;
   1165          
   1166                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000047   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6401         XRL       A,#0x1
   \   00004D   6008         JZ        ??ZDApp_ProcessOSALMsg_7
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6402         XRL       A,#0x2
   \   000052   6003         JZ        $+5
   \   000054   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1167                {
   1168                  // Process the network discovery scan results and choose a parent
   1169                  // device to join/rejoin itself
   1170                  networkDesc_t *pChosenNwk;
   1171                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000057                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000057   12....       LCALL     `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   00005A   8A..         MOV       ?V0,R2
   \   00005C   8B..         MOV       ?V1,R3
   \   00005E   EA           MOV       A,R2
   \   00005F   4B           ORL       A,R3
   \   000060   7003         JNZ       $+5
   \   000062   02....       LJMP      ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   \   000065   90....       MOV       DPTR,#zdoDiscCounter
   \   000068   E0           MOVX      A,@DPTR
   \   000069   C3           CLR       C
   \   00006A   9403         SUBB      A,#0x3
   \   00006C   5003         JNC       $+5
   \   00006E   02....       LJMP      ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
   1172                  {
   1173                    if ( devStartMode == MODE_JOIN )
   \   000071   EA           MOV       A,R2
   \   000072   2402         ADD       A,#0x2
   \   000074   F8           MOV       R0,A
   \   000075   E4           CLR       A
   \   000076   35..         ADDC      A,?V1
   \   000078   F9           MOV       R1,A
   \   000079   E8           MOV       A,R0
   \   00007A   FE           MOV       R6,A
   \   00007B   E9           MOV       A,R1
   \   00007C   FF           MOV       R7,A
   \   00007D   90....       MOV       DPTR,#devStartMode
   \   000080   E0           MOVX      A,@DPTR
   \   000081   706E         JNZ       ??ZDApp_ProcessOSALMsg_9
   1174                    {
   1175                      ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000083                ; Setup parameters for call to function ZDApp_ChangeState
   \   000083   7903         MOV       R1,#0x3
   \   000085   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1176          
   1177                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   000088                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000088   85..82       MOV       DPL,?V0
   \   00008B   85..83       MOV       DPH,?V1
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1178          
   1179                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1180                                            pChosenNwk->logicalChannel,
   1181                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1182                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   000099                ; Setup parameters for call to function NLME_JoinRequest
   \   000099   85..82       MOV       DPL,?V0
   \   00009C   85..83       MOV       DPH,?V1
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   F5..         MOV       ?V2,A
   \   0000AC   78..         MOV       R0,#?V2
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000C1   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F5..         MOV       ?V2,A
   \   0000C7   78..         MOV       R0,#?V2
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CC   8E82         MOV       DPL,R6
   \   0000CE   8F83         MOV       DPH,R7
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   F9           MOV       R1,A
   \   0000D2   85..82       MOV       DPL,?V0
   \   0000D5   85..83       MOV       DPH,?V1
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   FC           MOV       R4,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   FD           MOV       R5,A
   \   0000DD   E5..         MOV       A,?V0
   \   0000DF   240B         ADD       A,#0xb
   \   0000E1   FA           MOV       R2,A
   \   0000E2   E4           CLR       A
   \   0000E3   35..         ADDC      A,?V1
   \   0000E5   FB           MOV       R3,A
   \   0000E6   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000E9   7404         MOV       A,#0x4
   \   0000EB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EE   02....       LJMP      ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
   1183                      {
   1184                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1185                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1186                      }
   1187                    } // if ( devStartMode == MODE_JOIN )
   1188                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   0000F1   6403         XRL       A,#0x3
   \   0000F3   6003         JZ        $+5
   \   0000F5   02....       LJMP      ??CrossCallReturnLabel_35 & 0xFFFF
   1189                    {
   1190                      ZStatus_t rejoinStatus;
   1191          
   1192                      // Transition state machine to correct rejoin state based on previous state before network discovery
   1193                      if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   0000F8                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000F8   7900         MOV       R1,#0x0
   \   0000FA   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000FD   E9           MOV       A,R1
   \   0000FE   6401         XRL       A,#0x1
   \   000100   90....       MOV       DPTR,#prevDevState
   \   000103   700D         JNZ       ??ZDApp_ProcessOSALMsg_11
   1194                      {
   1195                        if ( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   000105   E0           MOVX      A,@DPTR
   \   000106   6404         XRL       A,#0x4
   \   000108   7004         JNZ       ??ZDApp_ProcessOSALMsg_12
   1196                        {
   1197                          ZDApp_ChangeState(DEV_NWK_SEC_REJOIN_ALL_CHANNEL);
   \   00010A                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010A   790D         MOV       R1,#0xd
   \   00010C   800F         SJMP      ??ZDApp_ProcessOSALMsg_13
   1198                        }
   1199                        else
   1200                        {
   1201                          ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   00010E                ; Setup parameters for call to function ZDApp_ChangeState
   \   00010E   7904         MOV       R1,#0x4
   \   000110   800B         SJMP      ??ZDApp_ProcessOSALMsg_13
   1202                        }
   1203                      }
   1204                      else
   1205                      {
   1206                        if( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   000112   E0           MOVX      A,@DPTR
   \   000113   640D         XRL       A,#0xd
   \   000115   7004         JNZ       ??ZDApp_ProcessOSALMsg_14
   1207                        {
   1208                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \   000117                ; Setup parameters for call to function ZDApp_ChangeState
   \   000117   790E         MOV       R1,#0xe
   \   000119   8002         SJMP      ??ZDApp_ProcessOSALMsg_13
   1209                        }
   1210                        else
   1211                        {
   1212                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_ALL_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00011B                ; Setup parameters for call to function ZDApp_ChangeState
   \   00011B   790F         MOV       R1,#0xf
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00011D   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1213                        }
   1214                      }
   1215          
   1216                      // Before trying to do rejoin, check if the device has a valid short address
   1217                      // If not, generate a random short address for itself
   1218                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000120   90....       MOV       DPTR,#_NIB + 20
   \   000123   E0           MOVX      A,@DPTR
   \   000124   64FE         XRL       A,#0xfe
   \   000126   7003         JNZ       ??ZDApp_ProcessOSALMsg_15
   \   000128   A3           INC       DPTR
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00012B   7061         JNZ       ??ZDApp_ProcessOSALMsg_16
   1219                      {
   1220                        uint16 commNwkAddr;
   1221          
   1222                        // Verify if the Network address has been commissioned by external tool
   1223                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1224                                           sizeof(commNwkAddr),
   1225                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1226                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   00012D                ; Setup parameters for call to function osal_nv_read
   \   00012D   7401         MOV       A,#0x1
   \   00012F   12....       LCALL     ?XSTACK_DISP100_8
   \   000132   88..         MOV       ?V2,R0
   \   000134   89..         MOV       ?V3,R1
   \   000136   78..         MOV       R0,#?V2
   \   000138   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013B   75..02       MOV       ?V2,#0x2
   \   00013E   75..00       MOV       ?V3,#0x0
   \   000141   78..         MOV       R0,#?V2
   \   000143   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000146   7C00         MOV       R4,#0x0
   \   000148   7D00         MOV       R5,#0x0
   \   00014A   7A49         MOV       R2,#0x49
   \   00014C   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00014F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000152   E9           MOV       A,R1
   \   000153   7025         JNZ       ??ZDApp_ProcessOSALMsg_17
   \   000155   7401         MOV       A,#0x1
   \   000157   12....       LCALL     ?XSTACK_DISP0_8
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   64FE         XRL       A,#0xfe
   \   00015D   7003         JNZ       ??ZDApp_ProcessOSALMsg_18
   \   00015F   A3           INC       DPTR
   \   000160   E0           MOVX      A,@DPTR
   \   000161   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   000162   6016         JZ        ??ZDApp_ProcessOSALMsg_17
   1227                        {
   1228                          _NIB.nwkDevAddress = commNwkAddr;
   \   000164   7401         MOV       A,#0x1
   \   000166   12....       LCALL     ?XSTACK_DISP0_8
   \   000169   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00016C   90....       MOV       DPTR,#_NIB + 20
   \   00016F   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   1229          
   1230                          // clear Allocate address bit because device has a commissioned address
   1231                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \                     ??CrossCallReturnLabel_99:
   \   000172   90....       MOV       DPTR,#_NIB + 14
   \   000175   E0           MOVX      A,@DPTR
   \   000176   C2E7         CLR       0xE0 /* A   */.7
   \   000178   800A         SJMP      ??ZDApp_ProcessOSALMsg_19
   1232                        }
   1233                        else
   1234                        {
   1235                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   00017A                ; Setup parameters for call to function osal_rand
   \   00017A   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00017D   90....       MOV       DPTR,#_NIB + 20
   \   000180   EA           MOV       A,R2
   \   000181   F0           MOVX      @DPTR,A
   \   000182   A3           INC       DPTR
   \   000183   EB           MOV       A,R3
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   000184   F0           MOVX      @DPTR,A
   1236                        }
   1237          
   1238                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   000185                ; Setup parameters for call to function ZMacSetReq
   \   000185   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   000187   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   000189   7953         MOV       R1,#0x53
   \   00018B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1239                      }
   1240          
   1241                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1242                      if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00018E   90....       MOV       DPTR,#_NIB + 33
   \   000191   E0           MOVX      A,@DPTR
   \   000192   F4           CPL       A
   \   000193   7003         JNZ       ??ZDApp_ProcessOSALMsg_20
   \   000195   A3           INC       DPTR
   \   000196   E0           MOVX      A,@DPTR
   \   000197   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   000198   7018         JNZ       ??ZDApp_ProcessOSALMsg_21
   1243                      {
   1244                        _NIB.nwkPanId = pChosenNwk->panId;
   \   00019A   85..82       MOV       DPL,?V0
   \   00019D   85..83       MOV       DPH,?V1
   \   0001A0   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0001A3   90....       MOV       DPTR,#_NIB + 33
   \   0001A6   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   1245                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \                     ??CrossCallReturnLabel_100:
   \   0001A9                ; Setup parameters for call to function ZMacSetReq
   \   0001A9   7A..         MOV       R2,#(_NIB + 33) & 0xff
   \   0001AB   7B..         MOV       R3,#((_NIB + 33) >> 8) & 0xff
   \   0001AD   7950         MOV       R1,#0x50
   \   0001AF   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1246                      }
   1247          
   1248                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   0001B2   85..82       MOV       DPL,?XSP + 0
   \   0001B5   85..83       MOV       DPH,?XSP + 1
   \   0001B8   7401         MOV       A,#0x1
   \   0001BA   F0           MOVX      @DPTR,A
   1249                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   0001BB                ; Setup parameters for call to function ZMacSetReq
   \   0001BB   AA..         MOV       R2,?XSP + 0
   \   0001BD   AB..         MOV       R3,?XSP + 1
   \   0001BF   7952         MOV       R1,#0x52
   \   0001C1   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1250          
   1251                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1252                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   0001C4                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0001C4   7901         MOV       R1,#0x1
   \   0001C6   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0001C9   E9           MOV       A,R1
   \   0001CA   6401         XRL       A,#0x1
   \   0001CC   8E82         MOV       DPL,R6
   \   0001CE   8F83         MOV       DPH,R7
   \   0001D0   700B         JNZ       ??ZDApp_ProcessOSALMsg_22
   1253                      {
   1254                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   0001D2                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0001D2   E0           MOVX      A,@DPTR
   \   0001D3   F9           MOV       R1,A
   \   0001D4   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0001D6   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001D8   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   0001DB   8009         SJMP      ??ZDApp_ProcessOSALMsg_10
   1255                      }
   1256                      else
   1257                      {
   1258                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   0001DD                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   F9           MOV       R1,A
   \   0001DF   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0001E1   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001E3   12....       LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0001E6   E9           MOV       A,R1
   1259                      }
   1260          
   1261                      if ( rejoinStatus != ZSuccess )
   \   0001E7   6003         JZ        ??CrossCallReturnLabel_35
   1262                      {
   1263                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1264                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001E9                ; Setup parameters for call to function osal_rand
   \   0001E9   12....       LCALL     ?Subroutine34 & 0xFFFF
   1265                      }
   1266                    } // else if ( devStartMode == MODE_REJOIN )
   1267          
   1268                    // The receiver is on, turn network layer polling off.
   1269                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_35:
   \   0001EC   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001F2   501E         JNC       ??ZDApp_ProcessOSALMsg_23
   1270                    {
   1271                      // for an End Device with NO Child Table Management process or for a Router
   1272                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1273                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001F4   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001F7   E0           MOVX      A,@DPTR
   \   0001F8   600D         JZ        ??ZDApp_ProcessOSALMsg_24
   \   0001FA   6401         XRL       A,#0x1
   \   0001FC   6009         JZ        ??ZDApp_ProcessOSALMsg_24
   \   0001FE   90....       MOV       DPTR,#zgChildAgingEnable
   \   000201   E0           MOVX      A,@DPTR
   \   000202   6003         JZ        $+5
   \   000204   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1274                      {
   1275                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   000207                ; Setup parameters for call to function NLME_SetPollRate
   \   000207   90....       MOV       DPTR,#__Constant_0
   \   00020A   12....       LCALL     ?XLOAD_R2345
   \   00020D   12....       LCALL     ?Subroutine36 & 0xFFFF
   1276                        NLME_SetQueuedPollRate( 0 );
   1277                        NLME_SetResponseRate( 0 );
   1278                      }
   1279                    }
   \                     ??CrossCallReturnLabel_40:
   \   000210   8079         SJMP      ??ZDApp_ProcessOSALMsg_5
   1280                    else
   1281                    {
   1282                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   000212   90....       MOV       DPTR,#devStartMode
   \   000215   E0           MOVX      A,@DPTR
   \   000216   7073         JNZ       ??ZDApp_ProcessOSALMsg_5
   1283                      {
   1284                        ZDApp_SavedPollRate = zgPollRate;
   \   000218   90....       MOV       DPTR,#zgPollRate
   \   00021B   12....       LCALL     ?XLOAD_R0123
   \   00021E   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000221   12....       LCALL     ?XSTORE_R0123
   1285                        NLME_SetPollRate( zgRejoinPollRate );
   \   000224                ; Setup parameters for call to function NLME_SetPollRate
   \   000224   90....       MOV       DPTR,#zgRejoinPollRate
   \   000227   E0           MOVX      A,@DPTR
   \   000228   F5..         MOV       ?V0,A
   \   00022A   A3           INC       DPTR
   \   00022B   E0           MOVX      A,@DPTR
   \   00022C   AA..         MOV       R2,?V0
   \   00022E   FB           MOV       R3,A
   \   00022F   E4           CLR       A
   \   000230   FC           MOV       R4,A
   \   000231   FD           MOV       R5,A
   \   000232   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000235   8054         SJMP      ??ZDApp_ProcessOSALMsg_5
   1286                      }
   1287                    }
   1288                  }
   1289                  else
   1290                  {
   1291                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000237   90....       MOV       DPTR,#continueJoining
   \   00023A   E0           MOVX      A,@DPTR
   \   00023B   604E         JZ        ??ZDApp_ProcessOSALMsg_5
   1292                    {
   1293          #if defined ( MANAGED_SCAN )
   1294                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1295          #else
   1296                      zdoDiscCounter++;
   \   00023D   90....       MOV       DPTR,#zdoDiscCounter
   \   000240   E0           MOVX      A,@DPTR
   \   000241   04           INC       A
   \   000242   F0           MOVX      @DPTR,A
   1297                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1298                                                  + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000243                ; Setup parameters for call to function osal_rand
   \   000243   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000246                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000246   EA           MOV       A,R2
   \   000247   2464         ADD       A,#0x64
   \   000249   FA           MOV       R2,A
   \   00024A   E4           CLR       A
   \   00024B   3400         ADDC      A,#0x0
   \   00024D   FB           MOV       R3,A
   \   00024E   8033         SJMP      ??ZDApp_ProcessOSALMsg_25
   1299          #endif
   1300                    }
   1301                  }
   1302                }
   1303                break;
   1304          
   1305              case ZDO_NWK_JOIN_IND:
   1306                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000250   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000253   E0           MOVX      A,@DPTR
   \   000254   6401         XRL       A,#0x1
   \   000256   6005         JZ        ??ZDApp_ProcessOSALMsg_26
   \   000258   E0           MOVX      A,@DPTR
   \   000259   6402         XRL       A,#0x2
   \   00025B   702E         JNZ       ??ZDApp_ProcessOSALMsg_5
   1307                {
   1308                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_26:
   \   00025D                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00025D   12....       LCALL     `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000260   8029         SJMP      ??ZDApp_ProcessOSALMsg_5
   1309                }
   1310                break;
   1311          
   1312              case ZDO_NWK_JOIN_REQ:
   1313                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000262   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000265   E0           MOVX      A,@DPTR
   \   000266   6401         XRL       A,#0x1
   \   000268   6005         JZ        ??ZDApp_ProcessOSALMsg_27
   \   00026A   E0           MOVX      A,@DPTR
   \   00026B   6402         XRL       A,#0x2
   \   00026D   701C         JNZ       ??ZDApp_ProcessOSALMsg_5
   1314                {
   1315                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_27:
   \   00026F   90....       MOV       DPTR,#retryCnt
   \   000272   E4           CLR       A
   \   000273   12....       LCALL     ?Subroutine14 & 0xFFFF
   1316                  devStartMode = MODE_RESUME;
   1317                  _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_4:
   \   000276   12....       LCALL     ?Subroutine11 & 0xFFFF
   1318                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1319                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \                     ??CrossCallReturnLabel_2:
   \   000279   90....       MOV       DPTR,#zgDefaultStartingScanDuration
   \   00027C   7402         MOV       A,#0x2
   \   00027E   F0           MOVX      @DPTR,A
   1320                  ZDApp_NetworkInit( 0 );
   \   00027F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00027F   7A00         MOV       R2,#0x0
   \   000281   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000283   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000286   8003         SJMP      ??ZDApp_ProcessOSALMsg_5
   1321                }
   1322                break;
   1323          
   1324              default:
   1325                if ( ZG_SECURE_ENABLED )
   1326                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000288                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000288   12....       LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1327                break;
   1328            }
   1329          
   1330          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   00028B   7403         MOV       A,#0x3
   \   00028D   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003   7A00         MOV       R2,#0x0
   \   000005   7B00         MOV       R3,#0x0
   \   000007   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   \   00000A                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000A                ; Setup parameters for call to function NLME_SetResponseRate
   \   00000A   7A00         MOV       R2,#0x0
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000003                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000003                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000003                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000003   EA           MOV       A,R2
   \   000004   547F         ANL       A,#0x7f
   \   000006   2464         ADD       A,#0x64
   \   000008   FA           MOV       R2,A
   \   000009   7B00         MOV       R3,#0x0
   \   00000B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#devStartMode
   \   000004   04           INC       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   90....       MOV       DPTR,#_tmpRejoinState
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0
   1331          
   1332          /*********************************************************************
   1333           * @fn      ZDApp_ProcessMsgCBs()
   1334           *
   1335           * @brief   Process response messages
   1336           *
   1337           * @param   none
   1338           *
   1339           * @return  none
   1340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1341          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1342          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1343            switch ( inMsg->clusterID )
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F5..         MOV       ?V1,A
   \   000017   85..82       MOV       DPL,?V0
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V2,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V3,A
   \   000023   78..         MOV       R0,#?V2
   \   000025   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000028   0200         DW        2
   \   00002A   2100         DW        33
   \   00002C   2200         DW        34
   \   00002E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000030   0080         DW        32768
   \   000032   0180         DW        32769
   \   000034   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000036   0000         DW        0
   \   000038   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1344            {
   1345          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1346              case NWK_addr_rsp:
   1347              case IEEE_addr_rsp:
   1348                {
   1349                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1350          
   1351                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003A   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00003D   8A..         MOV       ?V2,R2
   \   00003F   8B..         MOV       ?V3,R3
   1352                  if ( pAddrRsp )
   \   000041   EA           MOV       A,R2
   \   000042   4B           ORL       A,R3
   \   000043   604A         JZ        ??ZDApp_ProcessMsgCBs_2
   1353                  {
   1354                    if ( pAddrRsp->status == ZSuccess )
   \   000045   EA           MOV       A,R2
   \   000046   2403         ADD       A,#0x3
   \   000048   FE           MOV       R6,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V3
   \   00004C   FF           MOV       R7,A
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   E0           MOVX      A,@DPTR
   \   000052   700A         JNZ       ??ZDApp_ProcessMsgCBs_3
   1355                    {
   1356                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000054                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000054   EE           MOV       A,R6
   \   000055   FC           MOV       R4,A
   \   000056   EF           MOV       A,R7
   \   000057   FD           MOV       R5,A
   \   000058   12....       LCALL     ?Subroutine22 & 0xFFFF
   1357                    }
   \                     ??CrossCallReturnLabel_120:
   \   00005B   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1358          
   1359          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1360                    // look for pending bind entry for NWK_addr_rsp Only
   1361                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00005E   85..82       MOV       DPL,?V0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   7004         JNZ       ??ZDApp_ProcessMsgCBs_4
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   6480         XRL       A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00006B   7007         JNZ       ??ZDApp_ProcessMsgCBs_5
   1362                    {
   1363          #if defined ( REFLECTOR )
   1364                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00006D                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00006D   EE           MOV       A,R6
   \   00006E   FA           MOV       R2,A
   \   00006F   EF           MOV       A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1365          #endif
   1366                    }
   1367          #endif
   1368          
   1369                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000074                ; Setup parameters for call to function osal_mem_free
   \   000074   AA..         MOV       R2,?V2
   \   000076   AB..         MOV       R3,?V3
   \   000078   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00007B   8012         SJMP      ??ZDApp_ProcessMsgCBs_2
   1370                  }
   1371                }
   1372                break;
   1373          #endif
   1374          
   1375          #if defined ( REFLECTOR )
   1376              case Bind_req:
   1377              case Unbind_req:
   1378                {
   1379                  ZDO_BindUnbindReq_t bindReq;
   1380                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00007D                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00007D   AC..         MOV       R4,?XSP + 0
   \   00007F   AD..         MOV       R5,?XSP + 1
   \   000081   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1381                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000084                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000084   AC..         MOV       R4,?XSP + 0
   \   000086   AD..         MOV       R5,?XSP + 1
   \   000088   EE           MOV       A,R6
   \   000089   FA           MOV       R2,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FB           MOV       R3,A
   \   00008C   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1382                }
   1383                break;
   1384          #endif
   1385          
   1386          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1387              case Bind_rsp:
   1388              case Unbind_rsp:
   1389                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1390                {
   1391                  ZDMatchSendState(
   1392                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1393                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1394                }
   1395                break;
   1396          
   1397              case End_Device_Bind_req:
   1398                if (ZG_DEVICE_COORDINATOR_TYPE)
   1399                {
   1400                  ZDEndDeviceBind_t bindReq;
   1401                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1402                  ZDO_MatchEndDeviceBind( &bindReq );
   1403          
   1404                  // Freeing the cluster lists - if allocated.
   1405                  if ( bindReq.numInClusters )
   1406                    osal_mem_free( bindReq.inClusters );
   1407                  if ( bindReq.numOutClusters )
   1408                    osal_mem_free( bindReq.outClusters );
   1409                }
   1410                break;
   1411          #endif
   1412            }
   1413          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00008F   7415         MOV       A,#0x15
   \   000091   12....       LCALL     ?DEALLOC_XSTACK8
   \   000094   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine65_0
   \   000001                ; // Fall through to label ??Subroutine65_0
   1414          
   1415          /*********************************************************************
   1416           * @fn      ZDApp_RegisterCBs()
   1417           *
   1418           * @brief   Process response messages
   1419           *
   1420           * @param   none
   1421           *
   1422           * @return  none
   1423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1424          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1425          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1426          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1427            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   12....       LCALL     ?Subroutine27 & 0xFFFF
   1428          #endif
   1429          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1430            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_65:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   12....       LCALL     ?Subroutine27 & 0xFFFF
   1431          #endif
   1432          #if ZG_BUILD_COORDINATOR_TYPE
   1433            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1434            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1435            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1436          #endif
   1437          #if defined ( REFLECTOR )
   1438            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_66:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV       R2,#0x21
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1439            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_67:
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A22         MOV       R2,#0x22
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1440          #endif
   1441          }
   \                     ??CrossCallReturnLabel_68:
   \   00001C   02....       LJMP      ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7B80         MOV       R3,#-0x80
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000008   22           RET
   1442          
   1443          /*********************************************************************
   1444           * @fn      ZDApp_ProcessSecMsg()
   1445           *
   1446           * @brief   Process the incoming security message.
   1447           *
   1448           * @param   msgPtr - message to process
   1449           *
   1450           * @return  none
   1451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1452          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1453          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1454            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   24FC         ADD       A,#-0x4
   \   00000B   6006         JZ        ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD       A,#-0x4
   \   00000F   6014         JZ        ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP      ??ZDApp_ProcessSecMsg_2
   1455            {
   1456              case ZDO_TRANSPORT_KEY_IND:
   1457                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6401         XRL       A,#0x1
   \   000019   6005         JZ        ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6402         XRL       A,#0x2
   \   00001E   7015         JNZ       ??ZDApp_ProcessSecMsg_2
   1458                {
   1459                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL     `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP      ??ZDApp_ProcessSecMsg_2
   1460                }
   1461                break;
   1462          
   1463              case ZDO_UPDATE_DEVICE_IND:
   1464                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1465                {
   1466                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1467                }
   1468                break;
   1469          
   1470              case ZDO_REMOVE_DEVICE_IND:
   1471                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1472                {
   1473                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1474                }
   1475                break;
   1476          
   1477              case ZDO_REQUEST_KEY_IND:
   1478                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1479                {
   1480                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1481                  {
   1482                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1483                  }
   1484                }
   1485                break;
   1486          
   1487              case ZDO_SWITCH_KEY_IND:
   1488                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6401         XRL       A,#0x1
   \   00002B   6005         JZ        ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6402         XRL       A,#0x2
   \   000030   7003         JNZ       ??ZDApp_ProcessSecMsg_2
   1489                {
   1490                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL     `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1491                }
   1492                break;
   1493          
   1494              default:
   1495                // Unsupported messages
   1496                break;
   1497            }
   1498          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   1499          
   1500          /*********************************************************************
   1501           * @fn      ZDApp_ProcessNetworkJoin()
   1502           *
   1503           * @brief
   1504           *
   1505           *   Save off the Network key information.
   1506           *
   1507           * @param   none
   1508           *
   1509           * @return  none
   1510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1511          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1512          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1513            if ( (devState == DEV_NWK_JOINING) ||
   1514                ((devState == DEV_NWK_ORPHAN)  &&
   1515                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6403         XRL       A,#0x3
   \   000010   6015         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX      A,@DPTR
   \   000013   640A         XRL       A,#0xa
   \   000015   6003         JZ        $+5
   \   000017   02....       LJMP      ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   5407         ANL       A,#0x7
   \   000020   6401         XRL       A,#0x1
   \   000022   6003         JZ        $+5
   \   000024   02....       LJMP      ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1516            {
   1517              // Result of a Join attempt by this device.
   1518              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV       DPTR,#nwkStatus
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   7021         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1519              {
   1520                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   12....       LCALL     ?Subroutine19 & 0xFFFF
   1521          
   1522          #if defined ( POWER_SAVING )
   1523                osal_pwrmgr_device( PWRMGR_BATTERY );
   1524          #endif
   1525          
   1526                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \                     ??CrossCallReturnLabel_70:
   \   000030                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000030   7901         MOV       R1,#0x1
   \   000032   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000035   E9           MOV       A,R1
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1527                {
   1528                  // wait for auth from trust center
   1529                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   1530          
   1531                  // Start the reset timer for MAX UNAUTH time
   1532                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1533                }
   1534                else
   1535                {
   1536                  if ( ZSTACK_ROUTER_BUILD )
   1537                  {
   1538                    if ( devState == DEV_NWK_ORPHAN
   1539                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1540                    {
   1541                      // Change NIB state to router for restore
   1542                      _NIB.nwkState = NWK_ROUTER;
   1543                    }
   1544                  }
   1545          
   1546                  if ( devState == DEV_NWK_JOINING )
   \   00003B   90....       MOV       DPTR,#devState
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6403         XRL       A,#0x3
   \   000041   7003         JNZ       ??ZDApp_ProcessNetworkJoin_5
   1547                  {
   1548                    ZDApp_AnnounceNewAddress();
   \   000043                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000043   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1549                  }
   1550          
   1551                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000046                ; Setup parameters for call to function ZDApp_ChangeState
   \   000046   7906         MOV       R1,#0x6
   \   000048   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1552          
   1553                  if ( ZSTACK_ROUTER_BUILD )
   \   00004B   02....       LJMP      ??CrossCallReturnLabel_71 & 0xFFFF
   1554                  {
   1555                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1556                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1557                    {
   1558                      NLME_StartRouterRequest( 0, 0, false );
   1559                    }
   1560                  }
   1561                }
   1562              }
   1563              else
   1564              {
   1565                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00004E   90....       MOV       DPTR,#devStartMode
   \   000051   E0           MOVX      A,@DPTR
   \   000052   6401         XRL       A,#0x1
   \   000054   7026         JNZ       ??ZDApp_ProcessNetworkJoin_6
   \   000056   90....       MOV       DPTR,#retryCnt
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   04           INC       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   C3           CLR       C
   \   00005D   9403         SUBB      A,#0x3
   \   00005F   401B         JC        ??ZDApp_ProcessNetworkJoin_6
   1566                {
   1567                  if ( _NIB.nwkPanId == 0xFFFF )
   \   000061   90....       MOV       DPTR,#_NIB + 33
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F4           CPL       A
   \   000066   7003         JNZ       ??ZDApp_ProcessNetworkJoin_7
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00006B   90....       MOV       DPTR,#devStartMode
   \   00006E   7003         JNZ       ??ZDApp_ProcessNetworkJoin_8
   1568                    devStartMode = MODE_JOIN;
   \   000070   E4           CLR       A
   \   000071   8008         SJMP      ??ZDApp_ProcessNetworkJoin_9
   1569                  else
   1570                  {
   1571                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000073   7403         MOV       A,#0x3
   \   000075   F0           MOVX      @DPTR,A
   1572                    _tmpRejoinState = true;
   \   000076   90....       MOV       DPTR,#_tmpRejoinState
   \   000079   7401         MOV       A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00007B   F0           MOVX      @DPTR,A
   1573                  }
   1574                }
   1575          
   1576                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1577                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00007C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007C   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00007F   74FE         MOV       A,#-0x2
   \   000081   6A           XRL       A,R2
   \   000082   7003         JNZ       ??ZDApp_ProcessNetworkJoin_10
   \   000084   74FF         MOV       A,#-0x1
   \   000086   6B           XRL       A,R3
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   000087   700D         JNZ       ??ZDApp_ProcessNetworkJoin_11
   \   000089   90....       MOV       DPTR,#_NIB + 20
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   64FE         XRL       A,#0xfe
   \   00008F   7003         JNZ       ??ZDApp_ProcessNetworkJoin_12
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   000094   601D         JZ        ??ZDApp_ProcessNetworkJoin_13
   1578                {
   1579                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   74FE         MOV       A,#-0x2
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   04           INC       A
   \   0000A1   F0           MOVX      @DPTR,A
   1580                  // Invalidate nwk addr so end device does not use in its data reqs.
   1581                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000A2   90....       MOV       DPTR,#_NIB + 20
   \   0000A5   14           DEC       A
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   A3           INC       DPTR
   \   0000A8   04           INC       A
   \   0000A9   F0           MOVX      @DPTR,A
   1582                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000AA                ; Setup parameters for call to function ZMacSetReq
   \   0000AA   AA..         MOV       R2,?XSP + 0
   \   0000AC   AB..         MOV       R3,?XSP + 1
   \   0000AE   7953         MOV       R1,#0x53
   \   0000B0   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1583                }
   1584          
   1585                // Clear the neighbor Table and network discovery tables.
   1586                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000B3                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000B3   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1587                NLME_NwkDiscTerm();
   \   0000B6                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000B6   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1588          
   1589                zdoDiscCounter = 1;
   \   0000B9   90....       MOV       DPTR,#zdoDiscCounter
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   F0           MOVX      @DPTR,A
   1590          
   1591                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1592                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000BF                ; Setup parameters for call to function osal_rand
   \   0000BF   02....       LJMP      ??ZDApp_ProcessNetworkJoin_14 & 0xFFFF
   1593              }
   1594            }
   1595            else if ( devState == DEV_NWK_ORPHAN ||
   1596                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1597                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1598                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1599                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   6404         XRL       A,#0x4
   \   0000C5   6012         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   640E         XRL       A,#0xe
   \   0000CA   600D         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   640F         XRL       A,#0xf
   \   0000CF   6008         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   640D         XRL       A,#0xd
   \   0000D4   6003         JZ        $+5
   \   0000D6   02....       LJMP      ??ZDApp_ProcessNetworkJoin_15 & 0xFFFF
   1600            {
   1601              // results of an orphaning attempt by this device
   1602              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000D9   90....       MOV       DPTR,#nwkStatus
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   705B         JNZ       ??ZDApp_ProcessNetworkJoin_16
   1603              {
   1604                //When the device has successfully rejoined then reset retryCnt
   1605                retryCnt = 0;
   \   0000DF   90....       MOV       DPTR,#retryCnt
   \   0000E2   E4           CLR       A
   \   0000E3   F0           MOVX      @DPTR,A
   1606          
   1607                // Verify NWK key is available before sending Device_annce
   1608                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   0000E4                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000E4   7901         MOV       R1,#0x1
   \   0000E6   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000E9   E9           MOV       A,R1
   \   0000EA   700F         JNZ       ??ZDApp_ProcessNetworkJoin_17
   1609                {
   1610                  // wait for auth from trust center
   1611                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   0000EC                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000EC   7905         MOV       R1,#0x5
   \   0000EE   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1612          
   1613                  // Start the reset timer for MAX UNAUTH time
   1614                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   0000F1                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000F1   7A10         MOV       R2,#0x10
   \   0000F3   7B27         MOV       R3,#0x27
   \   0000F5   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0000F8   02....       LJMP      ??CrossCallReturnLabel_71 & 0xFFFF
   1615                }
   1616                else
   1617                {
   1618                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000FB                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000FB   7906         MOV       R1,#0x6
   \   0000FD   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1619          
   1620                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   000100                ; Setup parameters for call to function osal_stop_timerEx
   \   000100   7A00         MOV       R2,#0x0
   \   000102   7B20         MOV       R3,#0x20
   \   000104   12....       LCALL     ?Subroutine28 & 0xFFFF
   1621          
   1622                  // setup Power Manager Device
   1623          #if defined ( POWER_SAVING )
   1624                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1625          #endif
   1626          
   1627                  // The receiver is on, turn network layer polling off.
   1628                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??CrossCallReturnLabel_88:
   \   000107   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   A2E3         MOV       C,0xE0 /* A   */.3
   \   00010D   500F         JNC       ??CrossCallReturnLabel_41
   1629                  {
   1630                    // if Child Table Management process is not enabled
   1631                    if ( zgChildAgingEnable == FALSE )
   \   00010F   90....       MOV       DPTR,#zgChildAgingEnable
   \   000112   E0           MOVX      A,@DPTR
   \   000113   7009         JNZ       ??CrossCallReturnLabel_41
   1632                    {
   1633                      NLME_SetPollRate( 0 );
   \   000115                ; Setup parameters for call to function NLME_SetPollRate
   \   000115   90....       MOV       DPTR,#__Constant_0
   \   000118   12....       LCALL     ?XLOAD_R2345
   \   00011B   12....       LCALL     ?Subroutine36 & 0xFFFF
   1634                      NLME_SetQueuedPollRate( 0 );
   1635                      NLME_SetResponseRate( 0 );
   1636                    }
   1637                  }
   1638          
   1639                  if ( ZSTACK_ROUTER_BUILD )
   1640                  {
   1641                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1642                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1643                    {
   1644                      NLME_StartRouterRequest( 0, 0, false );
   1645                    }
   1646                  }
   1647          
   1648                  ZDApp_AnnounceNewAddress();
   \                     ??CrossCallReturnLabel_41:
   \   00011E                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00011E   12....       LCALL     ?Subroutine40 & 0xFFFF
   1649          
   1650                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1651                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1652                        && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_54:
   \   000121   500B         JNC       ??ZDApp_ProcessNetworkJoin_18
   \   000123   90....       MOV       DPTR,#zgChildAgingEnable
   \   000126   E0           MOVX      A,@DPTR
   \   000127   6401         XRL       A,#0x1
   \   000129   6003         JZ        $+5
   \   00012B   02....       LJMP      ??CrossCallReturnLabel_71 & 0xFFFF
   1653                  {
   1654                    NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00012E                ; Setup parameters for call to function NLME_SetPollRate
   \   00012E   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000131   12....       LCALL     ?XLOAD_R2345
   \   000134   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000137   02....       LJMP      ??CrossCallReturnLabel_71 & 0xFFFF
   1655                  }
   1656                }
   1657              }
   1658              else
   1659              {
   1660                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00013A   90....       MOV       DPTR,#devStartMode
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   6401         XRL       A,#0x1
   \   000140   7038         JNZ       ??ZDApp_ProcessNetworkJoin_19
   1661                {
   1662                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000142   90....       MOV       DPTR,#retryCnt
   \   000145   E0           MOVX      A,@DPTR
   \   000146   04           INC       A
   \   000147   F0           MOVX      @DPTR,A
   \   000148   C3           CLR       C
   \   000149   9404         SUBB      A,#0x4
   \   00014B   501F         JNC       ??ZDApp_ProcessNetworkJoin_20
   1663                  {
   1664                    if ( _NIB.nwkPanId == 0xFFFF )
   \   00014D   90....       MOV       DPTR,#_NIB + 33
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F4           CPL       A
   \   000152   7003         JNZ       ??ZDApp_ProcessNetworkJoin_21
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000157   601B         JZ        ??ZDApp_ProcessNetworkJoin_22
   1665                      devStartMode = MODE_JOIN;
   1666                    else
   1667                    {
   1668                      devStartMode = MODE_REJOIN;
   \   000159   90....       MOV       DPTR,#devStartMode
   \   00015C   7403         MOV       A,#0x3
   \   00015E   F0           MOVX      @DPTR,A
   1669                      _tmpRejoinState = true;
   \   00015F   90....       MOV       DPTR,#_tmpRejoinState
   \   000162   7401         MOV       A,#0x1
   \   000164   F0           MOVX      @DPTR,A
   1670                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000165   90....       MOV       DPTR,#prevDevState
   \   000168   7404         MOV       A,#0x4
   \   00016A   8068         SJMP      ??ZDApp_ProcessNetworkJoin_23
   1671                    }
   1672                  }
   1673                  // Do a normal join to the network after certain times of rejoin retries
   1674                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00016C   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   6401         XRL       A,#0x1
   \   000172   7061         JNZ       ??ZDApp_ProcessNetworkJoin_24
   1675                  {
   1676                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000174   90....       MOV       DPTR,#devStartMode
   \   000177   E4           CLR       A
   \   000178   805A         SJMP      ??ZDApp_ProcessNetworkJoin_23
   1677                  }
   1678                }
   1679                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   6403         XRL       A,#0x3
   \   00017D   7056         JNZ       ??ZDApp_ProcessNetworkJoin_24
   1680                {
   1681                  if ( ZSTACK_END_DEVICE_BUILD )
   1682                  {
   1683                    devStartMode = MODE_REJOIN;
   1684                    _tmpRejoinState = true;
   \   00017F   90....       MOV       DPTR,#_tmpRejoinState
   \   000182   7401         MOV       A,#0x1
   \   000184   F0           MOVX      @DPTR,A
   1685                    _NIB.nwkState = NWK_INIT;
   \   000185   90....       MOV       DPTR,#_NIB + 35
   \   000188   E4           CLR       A
   \   000189   F0           MOVX      @DPTR,A
   1686          
   1687                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   00018A   90....       MOV       DPTR,#prevDevState
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   6404         XRL       A,#0x4
   \   000190   7007         JNZ       ??ZDApp_ProcessNetworkJoin_25
   1688                    {
   1689                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   000192   12....       LCALL     ?Subroutine10 & 0xFFFF
   1690                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1691                    }
   \                     ??CrossCallReturnLabel_0:
   \   000195   740D         MOV       A,#0xd
   \   000197   803B         SJMP      ??ZDApp_ProcessNetworkJoin_23
   1692                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   640D         XRL       A,#0xd
   \   00019C   702C         JNZ       ??ZDApp_ProcessNetworkJoin_26
   1693                    {
   1694                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1695                      _NIB.nwkKeyLoaded = FALSE;
   \   00019E   90....       MOV       DPTR,#_NIB + 61
   \   0001A1   E4           CLR       A
   \   0001A2   F0           MOVX      @DPTR,A
   1696                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   \   0001A3                ; Setup parameters for call to function ZDApp_ResetNwkKey
   \   0001A3   12....       LCALL     `??ZDApp_ResetNwkKey::?relay`; Banked call to: ZDApp_ResetNwkKey
   1697                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   0001A6   75..01       MOV       ?V0,#0x1
   \   0001A9   75..00       MOV       ?V1,#0x0
   \   0001AC   75..00       MOV       ?V2,#0x0
   \   0001AF   75..00       MOV       ?V3,#0x0
   \   0001B2   90....       MOV       DPTR,#_NIB + 22
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   78..         MOV       R0,#?V0
   \   0001B8   12....       LCALL     ?L_SHL
   \   0001BB   90....       MOV       DPTR,#runtimeChannel
   \   0001BE   78..         MOV       R0,#?V0
   \   0001C0   12....       LCALL     ?L_MOV_TO_X
   1698                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   \   0001C3   90....       MOV       DPTR,#prevDevState
   \   0001C6   740E         MOV       A,#0xe
   \   0001C8   800A         SJMP      ??ZDApp_ProcessNetworkJoin_23
   1699                    }
   1700                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   640E         XRL       A,#0xe
   \   0001CD   7006         JNZ       ??ZDApp_ProcessNetworkJoin_24
   1701                    {
   1702                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0001CF   12....       LCALL     ?Subroutine10 & 0xFFFF
   1703                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1704                    }
   1705          
   1706                  }
   1707                }
   \                     ??CrossCallReturnLabel_1:
   \   0001D2   740F         MOV       A,#0xf
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   0001D4   F0           MOVX      @DPTR,A
   1708          
   1709                // Clear the neighbor Table and network discovery tables.
   1710                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001D5                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001D5   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1711                NLME_NwkDiscTerm();
   \   0001D8                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001D8   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1712          
   1713                // setup a retry for later...
   1714                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1715                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001DB                ; Setup parameters for call to function osal_rand
   1716              }
   1717            }
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0001DB   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0001DE   8009         SJMP      ??CrossCallReturnLabel_71
   1718          #if defined ( ZIGBEEPRO )
   1719            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   6006         JZ        ??CrossCallReturnLabel_71
   1720            {
   1721              // Assume from address conflict
   1722          
   1723              // Notify the network
   1724              ZDApp_AnnounceNewAddress();
   \   0001E3                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001E3   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1725          
   1726              // Notify apps
   1727              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001E6                ; Setup parameters for call to function osal_set_event
   \   0001E6   12....       LCALL     ?Subroutine19 & 0xFFFF
   1728            }
   1729          #endif
   1730          }
   \                     ??CrossCallReturnLabel_71:
   \   0001E9   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#runtimeChannel
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   74F8         MOV       A,#-0x8
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74FF         MOV       A,#-0x1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7407         MOV       A,#0x7
   \   000010   F0           MOVX      @DPTR,A
   \   000011   90....       MOV       DPTR,#prevDevState
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine71_0
   \   000002                ; // Fall through to label ??Subroutine71_0
   1731          
   1732          /*********************************************************************
   1733           * @fn      ZDApp_SaveNwkKey()
   1734           *
   1735           * @brief   Save off the Network key information.
   1736           *
   1737           * @param   none
   1738           *
   1739           * @return  none
   1740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1741          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1743            nwkActiveKeyItems keyItems;
   1744          
   1745            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1746          
   1747            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1748                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV       R0,?XSP + 0
   \   000013   A9..         MOV       R1,?XSP + 1
   \   000015   88..         MOV       ?V0,R0
   \   000017   89..         MOV       ?V1,R1
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV       ?V0,#0x15
   \   000021   75..00       MOV       ?V1,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   1749          
   1750            nwkFrameCounterChanges = 0;
   \   00002F   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   F0           MOVX      @DPTR,A
   1751          
   1752            // Clear copy in RAM before return.
   1753            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C15         MOV       R4,#0x15
   \   000038   FD           MOV       R5,A
   \   000039   F9           MOV       R1,A
   \   00003A   AA..         MOV       R2,?XSP + 0
   \   00003C   AB..         MOV       R3,?XSP + 1
   \   00003E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1754          
   1755          }
   \   000041                REQUIRE ?Subroutine8
   \   000041                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7415         MOV       A,#0x15
   \   000002   02....       LJMP      ??Subroutine67_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A82         MOV       R2,#-0x7e
   \   000006                REQUIRE ??Subroutine52_0
   \   000006                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET
   1756          
   1757          /*********************************************************************
   1758           * @fn      ZDApp_ForceConcentratorChange()
   1759           *
   1760           * @brief   Force a network concentrator change by resetting
   1761           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1762           *          from NV and set nwk event.
   1763           *
   1764           * @param   none
   1765           *
   1766           * @return  none
   1767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1768          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1770            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V0,#0x1
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A32         MOV       R2,#0x32
   \   000021   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000024   12....       LCALL     ?DEALLOC_XSTACK8
   1771            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   000027                ; Setup parameters for call to function osal_nv_read
   \   000027   75....       MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002A   75....       MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..01       MOV       ?V0,#0x1
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A33         MOV       R2,#0x33
   \   000043   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   1772          
   1773            if ( zgConcentratorEnable == TRUE )
   \   000049   90....       MOV       DPTR,#zgConcentratorEnable
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6401         XRL       A,#0x1
   \   00004F   7015         JNZ       ??ZDApp_ForceConcentratorChange_0
   1774            {
   1775              // Start next event
   1776              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000051                ; Setup parameters for call to function osal_start_timerEx
   \   000051   90....       MOV       DPTR,#__Constant_64
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   7A00         MOV       R2,#0x0
   \   000059   7B08         MOV       R3,#0x8
   \   00005B   90....       MOV       DPTR,#NWK_TaskID
   \   00005E   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   1777            }
   \                     ??CrossCallReturnLabel_87:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   800A         SJMP      ??CrossCallReturnLabel_91
   1778            else
   1779            {
   1780              // Stop the next event
   1781              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000066                ; Setup parameters for call to function osal_stop_timerEx
   \   000066   7A00         MOV       R2,#0x0
   \   000068   7B08         MOV       R3,#0x8
   \   00006A   90....       MOV       DPTR,#NWK_TaskID
   \   00006D   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   1782            }
   1783          }
   \                     ??CrossCallReturnLabel_91:
   \   000070   02....       LJMP      ??Subroutine68_0 & 0xFFFF
   1784          
   1785          /*********************************************************************
   1786           * @fn      ZDApp_ResetNwkKey()
   1787           *
   1788           * @brief   Reset the Network key information in NV.
   1789           *
   1790           * @param   none
   1791           *
   1792           * @return  none
   1793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1794          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1795          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1796            nwkActiveKeyItems keyItems;
   1797          
   1798            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   12....       LCALL     ?Subroutine33 & 0xFFFF
   1799            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1800                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_34:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV       ?V0,#0x15
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   1801          }
   \   000023   02....       LJMP      ?Subroutine8 & 0xFFFF
   1802          
   1803          /*********************************************************************
   1804           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1805           *
   1806           * @brief
   1807           *
   1808           *   Save off the Network key information.
   1809           *
   1810           * @param   incrFrmCnt - set to true if we want to increment the network
   1811                      frame counter, else set to false
   1812           *
   1813           * @return  true if restored from NV, false if not
   1814           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1815          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1816          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1817            nwkActiveKeyItems keyItems;
   1818            uint8 ret = FALSE;
   \   00000C   7F00         MOV       R7,#0x0
   1819          
   1820            // Restore the key information
   1821            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1822                == ZSUCCESS )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   A8..         MOV       R0,?XSP + 0
   \   000010   A9..         MOV       R1,?XSP + 1
   \   000012   88..         MOV       ?V0,R0
   \   000014   89..         MOV       ?V1,R1
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75..15       MOV       ?V0,#0x15
   \   00001E   8F..         MOV       ?V1,R7
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7C00         MOV       R4,#0x0
   \   000027   7D00         MOV       R5,#0x0
   \   000029   7A82         MOV       R2,#-0x7e
   \   00002B   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000031   E9           MOV       A,R1
   \   000032   6003         JZ        $+5
   \   000034   02....       LJMP      ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1823            {
   1824              uint8 nullKey[SEC_KEY_LEN];
   1825          
   1826              // initialize default value to compare to
   1827              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000037                ; Setup parameters for call to function osal_memset
   \   000037   7C10         MOV       R4,#0x10
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   7415         MOV       A,#0x15
   \   00003F   12....       LCALL     ?XSTACK_DISP101_8
   \   000042   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1828          
   1829              // if stored key is different than default value, then a key has been established
   1830              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000045                ; Setup parameters for call to function osal_memcmp
   \   000045   7415         MOV       A,#0x15
   \   000047   12....       LCALL     ?XSTACK_DISP100_8
   \   00004A   88..         MOV       ?V0,R0
   \   00004C   89..         MOV       ?V1,R1
   \   00004E   8F..         MOV       ?V2,R7
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000055   7C10         MOV       R4,#0x10
   \   000057   7D00         MOV       R5,#0x0
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   A982         MOV       R1,DPL
   \   000060   AA83         MOV       R2,DPH
   \   000062   7B00         MOV       R3,#0x0
   \   000064   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000067   7403         MOV       A,#0x3
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   E9           MOV       A,R1
   \   00006D   7056         JNZ       ??ZDApp_RestoreNwkKey_0
   1831              {
   1832                if ( incrFrmCnt )
   \   00006F   EE           MOV       A,R6
   \   000070   6044         JZ        ??ZDApp_RestoreNwkKey_1
   1833                {
   1834                  // Increment the frame counter stored in NV
   1835                  keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1836                                            NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000072   90....       MOV       DPTR,#__Constant_4e2
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?L_MOV_X
   \   00007A   7411         MOV       A,#0x11
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?L_ADD_TO_X
   1837          
   1838                  nwkFrameCounter = keyItems.frameCounter;
   \   000084   7411         MOV       A,#0x11
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?XLOAD_R0123
   \   00008C   90....       MOV       DPTR,#nwkFrameCounter
   \   00008F   12....       LCALL     ?XSTORE_R0123
   1839          
   1840                  // Save the updated Frame Counter right away
   1841                  osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1842                                (void *)&keyItems );
   \   000092                ; Setup parameters for call to function osal_nv_write
   \   000092   A8..         MOV       R0,?XSP + 0
   \   000094   A9..         MOV       R1,?XSP + 1
   \   000096   88..         MOV       ?V0,R0
   \   000098   89..         MOV       ?V1,R1
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   75..15       MOV       ?V0,#0x15
   \   0000A2   8F..         MOV       ?V1,R7
   \   0000A4   78..         MOV       R0,#?V0
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000AC   12....       LCALL     ?DEALLOC_XSTACK8
   1843          
   1844                  nwkFrameCounterChanges = 0;
   \   0000AF   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   0000B2   E4           CLR       A
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   F0           MOVX      @DPTR,A
   1845                }
   1846          
   1847                ret = TRUE;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   0000B6   7F01         MOV       R7,#0x1
   1848          
   1849                // Clear copy in RAM before return.
   1850                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000B8                ; Setup parameters for call to function osal_memset
   \   0000B8   7C15         MOV       R4,#0x15
   \   0000BA   7D00         MOV       R5,#0x0
   \   0000BC   7900         MOV       R1,#0x0
   \   0000BE   AA..         MOV       R2,?XSP + 0
   \   0000C0   AB..         MOV       R3,?XSP + 1
   \   0000C2   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1851              }
   1852            }
   1853          
   1854            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000C5   EF           MOV       A,R7
   \   0000C6   F9           MOV       R1,A
   \   0000C7   7425         MOV       A,#0x25
   \   0000C9   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   1855          }
   1856          
   1857          /*********************************************************************
   1858           * @fn      ZDApp_ResetTimerStart
   1859           *
   1860           * @brief   Start the reset timer.
   1861           *
   1862           * @param   delay - delay time(ms) before reset
   1863           *
   1864           * @return  none
   1865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine31 & 0xFFFF
   1868            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \                     ??CrossCallReturnLabel_29:
   \   000008   7012         JNZ       ??ZDApp_ResetTimerStart_0
   1869            {
   1870              // Start the rest timer
   1871              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000014   7A04         MOV       R2,#0x4
   \   000016   12....       LCALL     ?Subroutine18 & 0xFFFF
   1872            }
   \                     ??CrossCallReturnLabel_81:
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   1873          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   00001C   02....       LJMP      ??Subroutine72_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000009   EA           MOV       A,R2
   \   00000A   4B           ORL       A,R3
   \   00000B   4C           ORL       A,R4
   \   00000C   4D           ORL       A,R5
   \   00000D   22           RET
   1874          
   1875          /*********************************************************************
   1876           * @fn      ZDApp_ResetTimerCancel
   1877           *
   1878           * @brief   Cancel the reset timer.
   1879           *
   1880           * @param   none
   1881           *
   1882           * @return  none
   1883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1884          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1885          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1886            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     ?Subroutine28 & 0xFFFF
   1887            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \                     ??CrossCallReturnLabel_89:
   \   00000B                ; Setup parameters for call to function osal_clear_event
   \   00000B   7A04         MOV       R2,#0x4
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   90....       MOV       DPTR,#ZDAppTaskID
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1888          }
   \   000017   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   1889          
   1890          /*********************************************************************
   1891           * @fn      ZDApp_LeaveCtrlInit
   1892           *
   1893           * @brief   Initialize the leave control logic.
   1894           *
   1895           * @param   none
   1896           *
   1897           * @return  none
   1898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1899          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1901            uint8 status;
   1902          
   1903          
   1904            // Initialize control state
   1905            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   1906          
   1907            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1908                                        sizeof(ZDApp_LeaveCtrl),
   1909                                        &ZDApp_LeaveCtrl );
   1910          
   1911            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV       R4,#0x1
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7A85         MOV       R2,#-0x7b
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   E9           MOV       A,R1
   \   000026   701C         JNZ       ??ZDApp_LeaveCtrlInit_0
   1912            {
   1913              // Read saved control
   1914              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1915                            0,
   1916                            sizeof( uint8 ),
   1917                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A85         MOV       R2,#-0x7b
   \   00003E   12....       LCALL     ?Subroutine37 & 0xFFFF
   1918            }
   \                     ??CrossCallReturnLabel_47:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   1919          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000044   02....       LJMP      ??Subroutine68_0 & 0xFFFF
   1920          
   1921          /*********************************************************************
   1922           * @fn      ZDApp_LeaveCtrlSet
   1923           *
   1924           * @brief   Set the leave control logic.
   1925           *
   1926           * @param   ra - reassociate flag
   1927           *
   1928           * @return  none
   1929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1930          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1931          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1932            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   1933          
   1934            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   1935            {
   1936              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   1937            }
   1938          
   1939            // Write the leave control
   1940            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1941                           0,
   1942                           sizeof( uint8 ),
   1943                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP      ?Subroutine4 & 0xFFFF
   1944          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV       R0,#?V0
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV       ?V0,#0x1
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV       R4,#0x0
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A85         MOV       R2,#-0x7b
   \   00001C   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00001F                REQUIRE ??Subroutine67_0
   \   00001F                ; // Fall through to label ??Subroutine67_0
   1945          
   1946          /*********************************************************************
   1947           * @fn      ZDApp_LeaveCtrlReset
   1948           *
   1949           * @brief   Re-initialize the leave control logic.
   1950           *
   1951           * @param   none
   1952           *
   1953           * @return  none
   1954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1955          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1956          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1957            // Set leave control to initialized state
   1958            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   1959          
   1960            // Write initialized control
   1961            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1962                          0,
   1963                          sizeof( uint8 ),
   1964                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP      ?Subroutine4 & 0xFFFF
   1965          }
   1966          
   1967          /*********************************************************************
   1968           * @fn      ZDApp_LeaveCtrlBypass
   1969           *
   1970           * @brief   Check if NV restore should be skipped during a leave reset.
   1971           *
   1972           * @param   none
   1973           *
   1974           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1976          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1977          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1978            uint8 bypass;
   1979          
   1980            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1981            {
   1982              bypass = TRUE;
   1983            }
   1984            else
   1985            {
   1986              bypass = FALSE;
   1987            }
   1988          
   1989            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   80..         SJMP      ??Subroutine56_0
   1990          }
   1991          
   1992          /*********************************************************************
   1993           * @fn      ZDApp_LeaveCtrlStartup
   1994           *
   1995           * @brief   Check for startup conditions during a leave reset.
   1996           *
   1997           * @param   state      - devState_t determined by leave control logic
   1998           * @param   startDelay - startup delay
   1999           *
   2000           * @return  none
   2001           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2002          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2003          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2004            *startDelay = 0;
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   2005          
   2006            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5019         JNC       ??ZDApp_LeaveCtrlStartup_0
   2007            {
   2008              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV       C,0xE0 /* A   */.1
   \   000016   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   2009              {
   2010                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   7488         MOV       A,#-0x78
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   7413         MOV       A,#0x13
   \   000022   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   2011              }
   2012              else
   2013              {
   2014                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX      @DPTR,A
   2015              }
   2016          
   2017              // Reset leave control logic
   2018              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2019            }
   2020          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP      ??Subroutine56_0
   2021          
   2022          /*********************************************************************
   2023           * @fn      ZDApp_LeaveReset
   2024           *
   2025           * @brief   Setup a device reset due to a leave indication/confirm.
   2026           *
   2027           * @param   ra - reassociate flag
   2028           *
   2029           * @return  none
   2030           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2031          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2032          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2033            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2034          
   2035            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV       R2,#-0x78
   \   00000C   7B13         MOV       R3,#0x13
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2036          
   2037            if ( ZSTACK_ROUTER_BUILD )
   2038            {
   2039              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2040              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2041            }
   2042          
   2043            if (ZG_DEVICE_ENDDEVICE_TYPE)
   2044            {
   2045              // Save polling values to be restored after rejoin
   2046              if ( ra == TRUE )
   \   000011   7401         MOV       A,#0x1
   \   000013   6E           XRL       A,R6
   \   000014   7024         JNZ       ??CrossCallReturnLabel_102
   2047              {
   2048                 ZDApp_SavedPollRate = zgPollRate;
   \   000016   90....       MOV       DPTR,#zgPollRate
   \   000019   12....       LCALL     ?XLOAD_R0123
   \   00001C   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00001F   12....       LCALL     ?XSTORE_R0123
   2049                 savedResponseRate = zgResponsePollRate;
   \   000022   90....       MOV       DPTR,#zgResponsePollRate
   \   000025   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000028   90....       MOV       DPTR,#savedResponseRate
   \   00002B   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   2050                 savedQueuedPollRate = zgQueuedPollRate;
   \                     ??CrossCallReturnLabel_101:
   \   00002E   90....       MOV       DPTR,#zgQueuedPollRate
   \   000031   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   2051              }
   \                     ??CrossCallReturnLabel_125:
   \   000034   90....       MOV       DPTR,#savedQueuedPollRate
   \   000037   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   2052          
   2053              // Disable polling
   2054              NLME_SetPollRate(0);
   \                     ??CrossCallReturnLabel_102:
   \   00003A                ; Setup parameters for call to function NLME_SetPollRate
   \   00003A   90....       MOV       DPTR,#__Constant_0
   \   00003D   12....       LCALL     ?XLOAD_R2345
   \   000040   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2055              NLME_SetResponseRate(0);
   \   000043                ; Setup parameters for call to function NLME_SetResponseRate
   \   000043   7A00         MOV       R2,#0x0
   \   000045   7B00         MOV       R3,#0x0
   \   000047   12....       LCALL     ?Subroutine38 & 0xFFFF
   2056              NLME_SetQueuedPollRate(0);
   2057            }
   2058          
   2059            if ( ra == TRUE )
   \                     ??CrossCallReturnLabel_49:
   \   00004A   7401         MOV       A,#0x1
   \   00004C   6E           XRL       A,R6
   \   00004D   7020         JNZ       ??ZDApp_LeaveReset_0
   2060            {
   2061              devState = DEV_NWK_DISC;
   \   00004F   90....       MOV       DPTR,#devState
   \   000052   7402         MOV       A,#0x2
   \   000054   12....       LCALL     ?Subroutine14 & 0xFFFF
   2062              devStartMode = MODE_REJOIN;
   2063              _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_5:
   \   000057   7401         MOV       A,#0x1
   \   000059   12....       LCALL     ?Subroutine11 & 0xFFFF
   2064          
   2065              // For rejoin, specify the extended PANID to look for
   2066              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   2067          
   2068              _NIB.nwkState = NWK_DISC;
   \                     ??CrossCallReturnLabel_3:
   \   00005C   90....       MOV       DPTR,#_NIB + 35
   \   00005F   7402         MOV       A,#0x2
   \   000061   F0           MOVX      @DPTR,A
   2069          
   2070              zdoDiscCounter = 3;
   \   000062   90....       MOV       DPTR,#zdoDiscCounter
   \   000065   04           INC       A
   \   000066   F0           MOVX      @DPTR,A
   2071              NLME_NwkDiscTerm();
   \   000067                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000067   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   2072          
   2073              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   00006A                ; Setup parameters for call to function osal_rand
   \   00006A   12....       LCALL     ?Subroutine34 & 0xFFFF
   2074            }
   \                     ??CrossCallReturnLabel_37:
   \   00006D   8007         SJMP      ??ZDApp_LeaveReset_1
   2075            else
   2076            {
   2077              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_0:
   \   00006F                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00006F   7A88         MOV       R2,#-0x78
   \   000071   7B13         MOV       R3,#0x13
   \   000073   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2078            }
   2079          }
   \                     ??ZDApp_LeaveReset_1:
   \   000076   02....       LJMP      ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003   7A00         MOV       R2,#0x0
   \   000005   7B00         MOV       R3,#0x0
   \   000007   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   \   00000A   22           RET
   2080          
   2081          /*********************************************************************
   2082           * @fn      ZDApp_LeaveUpdate
   2083           *
   2084           * @brief   Update local device data related to leaving device.
   2085           *
   2086           * @param   nwkAddr        - NWK address of leaving device
   2087           * @param   extAddr        - EXT address of leaving device
   2088           * @param   removeChildren - remove children of leaving device
   2089           *
   2090           * @return  none
   2091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2092          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2093                                  uint8 removeChildren )
   2094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2095            // Remove Apps Key for leaving device
   2096            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EC           MOV       A,R4
   \   000013   FA           MOV       R2,A
   \   000014   ED           MOV       A,R5
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2097          
   2098            // Clear SECURITY bit from Address Manager
   2099            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2100          
   2101            if ( pbindRemoveDev )
   \   000020   90....       MOV       DPTR,#pbindRemoveDev
   \   000023   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000026   6032         JZ        ??ZDApp_LeaveUpdate_0
   2102            {
   2103              zAddrType_t devAddr;
   2104          
   2105              // Remove bind entry and all related data
   2106              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV       A,#0x8
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   7403         MOV       A,#0x3
   \   00002F   F0           MOVX      @DPTR,A
   2107              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV       ?V4,R6
   \   000032   8F..         MOV       ?V5,R7
   \   000034   75..00       MOV       ?V6,#0x0
   \   000037   78..         MOV       R0,#?V4
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV       R4,#0x8
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP101_8
   \   000045   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   2108          
   2109              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV       R2,?XSP + 0
   \   00004F   AB..         MOV       R3,?XSP + 1
   \   000051   90....       MOV       DPTR,#pbindRemoveDev
   \   000054   12....       LCALL     ?Subroutine46 & 0xFFFF
   2110            }
   \                     ??CrossCallReturnLabel_94:
   \   000057   12....       LCALL     ?CALL_IND
   2111          
   2112            // Remove if child
   2113            if ( ZSTACK_ROUTER_BUILD )
   2114            {
   2115              // Router shall notify the Trust Center that a child End Device or
   2116              // a neighbor Router (within radius=1) has left the network
   2117              APSME_UpdateDeviceReq_t req;
   2118          
   2119              // forward authorization to the Trust Center
   2120              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   2121              req.devAddr    = nwkAddr;
   2122              req.devExtAddr = extAddr;
   2123              req.status = APSME_UD_DEVICE_LEFT;
   2124          
   2125              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2126              {
   2127                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2128                // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2129                // with legacy Coordinator devices which can only handle one or the other.
   2130                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   2131                {
   2132                  req.apsSecure = FALSE;
   2133          
   2134                  // send and APSME_UPDATE_DEVICE request to the trust center
   2135                  APSME_UpdateDeviceReq( &req );
   2136                }
   2137          
   2138                // send the message APS encrypted
   2139                req.apsSecure = TRUE;
   2140          
   2141                // send and APSME_UPDATE_DEVICE request to the trust center
   2142                APSME_UpdateDeviceReq( &req );
   2143              }
   2144              else
   2145              {
   2146                req.apsSecure = FALSE;
   2147          
   2148                // send and APSME_UPDATE_DEVICE request to the trust center
   2149                APSME_UpdateDeviceReq( &req );
   2150              }
   2151          
   2152              NLME_RemoveChild( extAddr, removeChildren );
   2153            }
   2154          
   2155            // Remove Routing table related entry
   2156            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   AA..         MOV       R2,?V0
   \   00005E   AB..         MOV       R3,?V1
   \   000060   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2157          
   2158            // Remove entry from neighborTable
   2159            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000063                ; Setup parameters for call to function nwkNeighborRemove
   \   000063   90....       MOV       DPTR,#_NIB + 33
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FC           MOV       R4,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FD           MOV       R5,A
   \   00006B   AA..         MOV       R2,?V0
   \   00006D   AB..         MOV       R3,?V1
   \   00006F   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2160          
   2161            // Schedule to save data to NV
   2162            ZDApp_NwkWriteNVRequest();
   2163          }
   \   000072   7409         MOV       A,#0x9
   \   000074                REQUIRE ?Subroutine5
   \   000074                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
   2164          
   2165          /*********************************************************************
   2166           * @fn      ZDApp_NetworkDiscoveryReq
   2167           *
   2168           * @brief   Request a network discovery.
   2169           *
   2170           * @param  scanChannels -
   2171           * @param  scanDuration -
   2172           *
   2173           * @return  ZStatus_t
   2174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2175          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2177            // Setup optional filters - tbd
   2178          
   2179            // Request NLME network discovery
   2180            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   2181          }
   2182          
   2183          /*********************************************************************
   2184           * @fn      ZDApp_JoinReq
   2185           *
   2186           * @brief   Request the device to join a parent in a network.
   2187           *
   2188           * @param   channel -
   2189           * @param   panID -
   2190           *
   2191           * @return  ZStatus_t
   2192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2193          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2194                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2195          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   2196            // Sync up the node with the stack profile (In the case where a pro device
   2197            // joins a non-pro network, or verse versa)
   2198            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV       A,#0xf
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2199          
   2200            // Request NLME Join Request
   2201            return NLME_JoinRequest(extendedPanID, panID,channel,
   2202                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2203                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV       A,#0xe
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V3,A
   \   000021   78..         MOV       R0,#?V3
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V3
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV       R1,?V2
   \   00003B   AC..         MOV       R4,?V0
   \   00003D   AD..         MOV       R5,?V1
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046                REQUIRE ?Subroutine9
   \   000046                ; // Fall through to label ?Subroutine9
   2204          
   2205          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7404         MOV       A,#0x4
   \   000002   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   2206          
   2207          /*********************************************************************
   2208           * @fn      ZDApp_DeviceConfigured
   2209           *
   2210           * @brief   Check to see if the local device is configured (i.e., part
   2211           *          of a network).
   2212           *
   2213           * @param   none
   2214           *
   2215           * @return  TRUE if configured. FALSE, otherwise.
   2216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2217          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2219            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   74FE         MOV       A,#-0x2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   04           INC       A
   \   000015   F0           MOVX      @DPTR,A
   2220          
   2221            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2222                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV       ?V0,#0x2
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV       R4,#0x14
   \   000030   7D00         MOV       R5,#0x0
   \   000032   7A21         MOV       R2,#0x21
   \   000034   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
   2223          
   2224            // Does the NIB have anything more than default?
   2225            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   64FE         XRL       A,#0xfe
   \   000043   7003         JNZ       ??ZDApp_DeviceConfigured_0
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F4           CPL       A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000048   7004         JNZ       ??ZDApp_DeviceConfigured_1
   \   00004A   7900         MOV       R1,#0x0
   \   00004C   8002         SJMP      ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   00004E   7901         MOV       R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000050   7402         MOV       A,#0x2
   \   000052   02....       LJMP      ??Subroutine67_0 & 0xFFFF
   2226          }
   2227          
   2228          /*********************************************************************
   2229           * CALLBACK FUNCTIONS
   2230           */
   2231          
   2232          
   2233          /*********************************************************************
   2234           * @fn      ZDApp_SendEventMsg()
   2235           *
   2236           * @brief
   2237           *
   2238           *   Sends a Network Join message
   2239           *
   2240           * @param  cmd - command ID
   2241           * @param  len - length (in bytes) of the buf field
   2242           * @param  buf - buffer for the rest of the message.
   2243           *
   2244           * @return  none
   2245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2246          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2247          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   2248            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000006                ; Setup parameters for call to function ZDApp_SendMsg
   \   000006   FB           MOV       R3,A
   \   000007   E9           MOV       A,R1
   \   000008   FA           MOV       R2,A
   \   000009   12....       LCALL     ?Subroutine29 & 0xFFFF
   2249          }
   \                     ??CrossCallReturnLabel_23:
   \   00000C   02....       LJMP      ??Subroutine64_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   \   000008   22           RET
   2250          
   2251          /*********************************************************************
   2252           * @fn      ZDApp_SendMsg()
   2253           *
   2254           * @brief   Sends a OSAL message
   2255           *
   2256           * @param  taskID - Where to send the message
   2257           * @param  cmd - command ID
   2258           * @param  len - length (in bytes) of the buf field
   2259           * @param  buf - buffer for the rest of the message.
   2260           *
   2261           * @return  none
   2262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2263          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V5,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   2265            osal_event_hdr_t *msgPtr;
   2266          
   2267            // Send the address to the task
   2268            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV       R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EB           MOV       A,R3
   \   000012   FA           MOV       R2,A
   \   000013   7B00         MOV       R3,#0x0
   \   000015   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   2269            if ( msgPtr )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6035         JZ        ??ZDApp_SendMsg_0
   2270            {
   2271              if ( (len > 0) && (buf != NULL) )
   \   000020   EE           MOV       A,R6
   \   000021   6020         JZ        ??ZDApp_SendMsg_1
   \   000023   E5..         MOV       A,?V2
   \   000025   45..         ORL       A,?V3
   \   000027   601A         JZ        ??ZDApp_SendMsg_1
   2272                osal_memcpy( msgPtr, buf, len );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   85....       MOV       ?V8,?V2
   \   00002C   85....       MOV       ?V9,?V3
   \   00002F   75..00       MOV       ?V10,#0x0
   \   000032   78..         MOV       R0,#?V8
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   EE           MOV       A,R6
   \   000038   FC           MOV       R4,A
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   2273          
   2274              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E5..         MOV       A,?V6
   \   00004B   F0           MOVX      @DPTR,A
   2275              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004C                ; Setup parameters for call to function osal_msg_send
   \   00004C   AA..         MOV       R2,?V0
   \   00004E   AB..         MOV       R3,?V1
   \   000050   A9..         MOV       R1,?V4
   \   000052   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2276            }
   2277          }
   \                     ??ZDApp_SendMsg_0:
   \   000055   7F0B         MOV       R7,#0xb
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA
   2278          
   2279          /*********************************************************************
   2280           * Call Back Functions from NWK  - API
   2281           */
   2282          
   2283          /*********************************************************************
   2284           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2285           *
   2286           * @brief       This function returns a choice of PAN to join.
   2287           *
   2288           * @param       status - return status of the nwk discovery confirm
   2289           *
   2290           * @return      ZStatus_t
   2291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine56_0
   \   000003                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2292          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2293          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2294            osal_event_hdr_t msg;
   2295          
   2296            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2297            // Send ZDO_MGMT_NWK_DISC_RSP back
   2298          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2299            if ( zdappMgmtNwkDiscReqInProgress )
   2300            {
   2301              zdappMgmtNwkDiscReqInProgress = false;
   2302              ZDO_FinishProcessingMgmtNwkDiscReq();
   2303            }
   2304            else
   2305          #endif
   2306            {
   2307              // Pass the confirm to another task if it registers the callback
   2308              // Otherwise, pass the confirm to ZDApp.
   2309              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000017   6009         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   2310              {
   2311                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   \   000020   8012         SJMP      ??CrossCallReturnLabel_24
   2312              }
   2313              else
   2314              {
   2315                // Otherwise, send scan confirm to ZDApp task to proceed
   2316                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   2317                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC       A
   \   00002A   12....       LCALL     ?XSTACK_DISP102_8
   \   00002D   7B02         MOV       R3,#0x2
   \   00002F   7A01         MOV       R2,#0x1
   \   000031   12....       LCALL     ?Subroutine29 & 0xFFFF
   2318              }
   2319            }
   2320            return (ZSuccess);
   \                     ??CrossCallReturnLabel_24:
   \   000034   7900         MOV       R1,#0x0
   \   000036   7403         MOV       A,#0x3
   \   000038   02....       LJMP      ?Subroutine3 & 0xFFFF
   2321          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E582         MOV       A,DPL
   \   00000A   4583         ORL       A,DPH
   \   00000C   22           RET
   2322          
   2323          /*********************************************************************
   2324           * @fn          ZDApp_NwkDescListProcessing
   2325           *
   2326           * @brief       This function process the network discovery result and select
   2327           *              a parent device to join itself.
   2328           *
   2329           * @param       none
   2330           *
   2331           * @return      ZStatus_t
   2332           */
   2333          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2334          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2335          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2336            networkDesc_t *pNwkDesc;
   2337            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   2338            uint8 stackProfile;
   2339            uint8 stackProfilePro;
   2340            uint8 selected;
   2341          
   2342            // Count the number of nwk descriptors in the list
   2343            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V2,R2
   \   00000D   8B..         MOV       ?V3,R3
   \   00000F   AE..         MOV       R6,?V2
   \   000011   AF..         MOV       R7,?V3
   \   000013   8005         SJMP      ??CrossCallReturnLabel_109
   2344            while (pNwkDesc)
   2345            {
   2346              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC       ?V1
   2347              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL     ?Subroutine25 & 0xFFFF
   2348            }
   \                     ??CrossCallReturnLabel_109:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   70F7         JNZ       ??ZDApp_NwkDescListProcessing_0
   2349          
   2350            // process discovery results
   2351            stackProfilePro = FALSE;
   \   00001E   75..00       MOV       ?V0,#0x0
   2352            selected = FALSE;
   2353          
   2354          
   2355            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV       ?V2,#0x0
   2356            {
   2357              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
   2358              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV       ?V3,#0x0
   \   000032   8019         SJMP      ??CrossCallReturnLabel_110
   2359              {
   2360                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2361                {
   2362                  // If the extended Pan ID is commissioned to a non zero value
   2363                  // Only join the Pan that has match EPID
   2364                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2365                    continue;
   2366          
   2367                }
   2368                else if ( zgConfigPANID != 0xFFFF )
   2369                {
   2370                  // PAN Id is preconfigured. check if it matches
   2371                  if ( pNwkDesc->panId != zgConfigPANID )
   2372                    continue;
   2373                }
   2374          
   2375                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2376                {
   2377                  // check that network is allowing joining
   2378                  if ( ZSTACK_ROUTER_BUILD )
   2379                  {
   2380                    if ( stackProfilePro == FALSE )
   2381                    {
   2382                      if ( !pNwkDesc->routerCapacity )
   2383                      {
   2384                        continue;
   2385                      }
   2386                    }
   2387                    else
   2388                    {
   2389                      if ( !pNwkDesc->deviceCapacity )
   2390                      {
   2391                        continue;
   2392                      }
   2393                    }
   2394                  }
   2395                  else if ( ZSTACK_END_DEVICE_BUILD )
   2396                  {
   2397                    if ( !pNwkDesc->deviceCapacity )
   2398                    {
   2399                      continue;
   2400                    }
   2401                  }
   2402                }
   2403          
   2404                // check version of zigbee protocol
   2405                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2406                  continue;
   2407          
   2408                // check version of stack profile
   2409                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2410                {
   2411                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2412                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6402         XRL       A,#0x2
   \   000037   7008         JNZ       ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV       A,#0x1
   \   00003B   68           XRL       A,R0
   \   00003C   7003         JNZ       ??ZDApp_NwkDescListProcessing_3
   2413                  {
   2414                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV       ?V0,#0x1
   2415                  }
   2416          
   2417                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV       A,?V2
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC       ?V3
   \   00004A   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00004D   E5..         MOV       A,?V3
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V1
   \   000052   4003         JC        $+5
   \   000054   02....       LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV       A,R1
   \   00005F   6401         XRL       A,#0x1
   \   000061   7013         JNZ       ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV       A,R6
   \   000064   240B         ADD       A,#0xb
   \   000066   FC           MOV       R4,A
   \   000067   E4           CLR       A
   \   000068   3F           ADDC      A,R7
   \   000069   FD           MOV       R5,A
   \   00006A   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV       A,R1
   \   000072   701D         JNZ       ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV       DPTR,#zgConfigPANID
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F4           CPL       A
   \   00007B   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ        ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000085   90....       MOV       DPTR,#zgConfigPANID
   \   000088   E0           MOVX      A,@DPTR
   \   000089   68           XRL       A,R0
   \   00008A   7003         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ       ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV       DPTR,#_NIB + 23
   \   000094   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   68           XRL       A,R0
   \   00009A   7003         JNZ       ??ZDApp_NwkDescListProcessing_12
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   00009F   700A         JNZ       ??ZDApp_NwkDescListProcessing_13
   \   0000A1   74FE         MOV       A,#-0x2
   \   0000A3   68           XRL       A,R0
   \   0000A4   7003         JNZ       ??ZDApp_NwkDescListProcessing_14
   \   0000A6   74FF         MOV       A,#-0x1
   \   0000A8   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000A9   700B         JNZ       ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AB   8E82         MOV       DPL,R6
   \   0000AD   8F83         MOV       DPH,R7
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   6092         JZ        ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   F8           MOV       R0,A
   \   0000C1   90....       MOV       DPTR,#_NIB + 17
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   68           XRL       A,R0
   \   0000C6   7080         JNZ       ??ZDApp_NwkDescListProcessing_6
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   F8           MOV       R0,A
   \   0000D4   90....       MOV       DPTR,#zgStackProfile
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   68           XRL       A,R0
   \   0000D9   6032         JZ        ??ZDApp_NwkDescListProcessing_5
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   6401         XRL       A,#0x1
   \   0000DE   6003         JZ        $+5
   \   0000E0   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   68           XRL       A,R0
   \   0000E6   6003         JZ        $+5
   \   0000E8   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000EB   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2418                  {
   2419                    continue;
   2420                  }
   2421                }
   2422          
   2423                break;
   2424              }
   2425          
   2426              if (i < ResultCount)
   2427              {
   2428               selected = TRUE;
   2429                break;
   2430              }
   2431          
   2432              // break if selected or stack profile pro wasn't found
   2433              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   600C         JZ        ??ZDApp_NwkDescListProcessing_16
   2434              {
   2435                break;
   2436              }
   2437            }
   \   0000F2   05..         INC       ?V2
   \   0000F4   E5..         MOV       A,?V2
   \   0000F6   C3           CLR       C
   \   0000F7   9402         SUBB      A,#0x2
   \   0000F9   5003         JNC       $+5
   \   0000FB   02....       LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2438          
   2439            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000FE   E5..         MOV       A,?V1
   \   000100   65..         XRL       A,?V3
   \   000102   7009         JNZ       ??ZDApp_NwkDescListProcessing_5
   2440            {
   2441              nwk_desc_list_free();
   \   000104                ; Setup parameters for call to function nwk_desc_list_free
   \   000104   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2442              return (NULL);   // couldn't find appropriate PAN to join !
   \   000107   7A00         MOV       R2,#0x0
   \   000109   7B00         MOV       R3,#0x0
   \   00010B   8004         SJMP      ??ZDApp_NwkDescListProcessing_17
   2443            }
   2444            else
   2445            {
   2446              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010D   EE           MOV       A,R6
   \   00010E   FA           MOV       R2,A
   \   00010F   EF           MOV       A,R7
   \   000110   FB           MOV       R3,A
   2447            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000111                REQUIRE ?Subroutine1
   \   000111                ; // Fall through to label ?Subroutine1
   2448          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine61_0
   \   000009                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine66_0
   \   000004                ; // Fall through to label ??Subroutine66_0
   2449          
   2450          /*********************************************************************
   2451           * @fn          ZDO_NetworkFormationConfirmCB
   2452           *
   2453           * @brief       This function reports the results of the request to
   2454           *              initialize a coordinator in a network.
   2455           *
   2456           * @param       Status - Result of NLME_NetworkFormationRequest()
   2457           *
   2458           * @return      none
   2459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2460          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2461          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2462            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2463          
   2464            if ( Status == ZSUCCESS )
   \   00000A   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_0
   2465            {
   2466              // LED on shows Coordinator started
   2467          //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2468          
   2469              // LED off forgets HOLD_AUTO_START
   2470          //    HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2471          
   2472          #if defined ( ZBIT )
   2473              SIM_SetColor(0xd0ffd0);
   2474          #endif
   2475          
   2476              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_0
   2477              {
   2478                // Began with HOLD_AUTO_START
   2479                ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7908         MOV       R1,#0x8
   \   000014   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2480              }
   2481            }
   2482          #if defined(BLINK_LEDS)
   2483            else
   2484            {
   2485          //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2486            }
   2487          #endif
   2488          
   2489            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A02         MOV       R2,#0x2
   \   000019   02....       LJMP      ?Subroutine0 & 0xFFFF
   2490          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0
   2491          
   2492          /****************************************************************************
   2493           * @fn          ZDApp_beaconIndProcessing
   2494           *
   2495           * @brief       This function processes the incoming beacon indication.
   2496           *
   2497           *              When another task (MT or App) is registered to process
   2498           *              beacon indication themselves, this function will parse the
   2499           *              beacon payload and pass the beacon descriptor to that task
   2500           *              If no other tasks registered, this function will process
   2501           *              the beacon payload and generate the network descriptor link
   2502           *              list.
   2503           *
   2504           * @param
   2505           *
   2506           * @return      none
   2507           *
   2508           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2509          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2510          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2511            // Pass the beacon Indication to another task if it registers the callback
   2512            // Otherwise, process the beacon notification here.
   2513            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   6006         JZ        ??ZDO_beaconNotifyIndCB_0
   2514            {
   2515              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL     ?CALL_IND
   \   000014   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2516            }
   2517            else
   2518            {
   2519              networkDesc_t *pNwkDesc;
   2520              networkDesc_t *pLastNwkDesc;
   2521              uint8 found = false;
   2522          
   2523              // Add the network to the Network Descriptor List
   2524              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV       DPTR,#NwkDescList
   \   00001A   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   2525              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_106:
   \   00001D   90....       MOV       DPTR,#NwkDescList
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V2,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V3,A
   \   000027   EA           MOV       A,R2
   \   000028   2404         ADD       A,#0x4
   \   00002A   F5..         MOV       ?V6,A
   \   00002C   E4           CLR       A
   \   00002D   35..         ADDC      A,?V1
   \   00002F   F5..         MOV       ?V7,A
   \   000031   EA           MOV       A,R2
   \   000032   2402         ADD       A,#0x2
   \   000034   F5..         MOV       ?V4,A
   \   000036   E4           CLR       A
   \   000037   35..         ADDC      A,?V1
   \   000039   F5..         MOV       ?V5,A
   \   00003B   802B         SJMP      ??CrossCallReturnLabel_111
   2526              while (pNwkDesc)
   2527              {
   2528                if ((pNwkDesc->panId == pBeacon->panID) &&
   2529                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000040   85..82       MOV       DPL,?V4
   \   000043   85..83       MOV       DPH,?V5
   \   000046   E0           MOVX      A,@DPTR
   \   000047   68           XRL       A,R0
   \   000048   7003         JNZ       ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F8           MOV       R0,A
   \   000057   85..82       MOV       DPL,?V6
   \   00005A   85..83       MOV       DPH,?V7
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   68           XRL       A,R0
   \   00005F   6067         JZ        ??ZDO_beaconNotifyIndCB_5
   2530                {
   2531                  found = true;
   2532                  break;
   2533                }
   2534                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV       ?V2,R6
   \   000063   8F..         MOV       ?V3,R7
   2535                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL     ?Subroutine25 & 0xFFFF
   2536              }
   \                     ??CrossCallReturnLabel_111:
   \   000068   EE           MOV       A,R6
   \   000069   4F           ORL       A,R7
   \   00006A   70D1         JNZ       ??ZDO_beaconNotifyIndCB_2
   2537          
   2538              // If no existing descriptor found, make a new one and add to the list
   2539              if (found == false)
   2540              {
   2541                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV       R2,#0x16
   \   00006E   7B00         MOV       R3,#0x0
   \   000070   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV       ?V8,R2
   \   000075   8B..         MOV       ?V9,R3
   \   000077   AE..         MOV       R6,?V8
   \   000079   AF..         MOV       R7,?V9
   2542                if ( !pNwkDesc )
   \   00007B   EA           MOV       A,R2
   \   00007C   4F           ORL       A,R7
   \   00007D   7003         JNZ       $+5
   \   00007F   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2543                {
   2544                  // Memory alloc failed, discard this beacon
   2545                  return;
   2546                }
   2547          
   2548                // Clear the network descriptor
   2549                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV       R4,#0x16
   \   000084   7D00         MOV       R5,#0x0
   \   000086   7900         MOV       R1,#0x0
   \   000088   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2550          
   2551                // Initialize the descriptor
   2552                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   74FE         MOV       A,#-0x2
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   04           INC       A
   \   00009B   F0           MOVX      @DPTR,A
   2553                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV       DPL,R6
   \   00009E   8F83         MOV       DPH,R7
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   F0           MOVX      @DPTR,A
   2554          
   2555                // Save new entry into the descriptor list
   2556                if ( !NwkDescList )
   \   0000AB   90....       MOV       DPTR,#NwkDescList
   \   0000AE   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000B1   7005         JNZ       ??ZDO_beaconNotifyIndCB_6
   2557                {
   2558                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV       DPTR,#NwkDescList
   \   0000B6   800B         SJMP      ??ZDO_beaconNotifyIndCB_7
   2559                }
   2560                else
   2561                {
   2562                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV       A,?V2
   \   0000BA   2414         ADD       A,#0x14
   \   0000BC   F582         MOV       DPL,A
   \   0000BE   E4           CLR       A
   \   0000BF   35..         ADDC      A,?V3
   \   0000C1   F583         MOV       DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   EF           MOV       A,R7
   \   0000C7   F0           MOVX      @DPTR,A
   2563                }
   2564              }
   2565          
   2566              // Update the descriptor with the incoming beacon
   2567              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV       DPL,?V0
   \   0000CB   85..83       MOV       DPH,?V1
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000DA   A3           INC       DPTR
   \   0000DB   F0           MOVX      @DPTR,A
   2568              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV       A,?V0
   \   0000DE   2408         ADD       A,#0x8
   \   0000E0   F8           MOV       R0,A
   \   0000E1   E4           CLR       A
   \   0000E2   35..         ADDC      A,?V1
   \   0000E4   F9           MOV       R1,A
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000EC   F0           MOVX      @DPTR,A
   2569              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV       DPL,?V6
   \   0000F0   85..83       MOV       DPH,?V7
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   8E82         MOV       DPL,R6
   \   0000F6   8F83         MOV       DPH,R7
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   F0           MOVX      @DPTR,A
   2570              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV       DPL,?V4
   \   0000FE   85..83       MOV       DPH,?V5
   \   000101   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000104   8E82         MOV       DPL,R6
   \   000106   8F83         MOV       DPH,R7
   \   000108   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2571              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_141:
   \   00010B   E5..         MOV       A,?V0
   \   00010D   240C         ADD       A,#0xc
   \   00010F   F582         MOV       DPL,A
   \   000111   E4           CLR       A
   \   000112   35..         ADDC      A,?V1
   \   000114   F583         MOV       DPH,A
   \   000116   E0           MOVX      A,@DPTR
   \   000117   C0E0         PUSH      A
   \   000119   EE           MOV       A,R6
   \   00011A   2413         ADD       A,#0x13
   \   00011C   F582         MOV       DPL,A
   \   00011E   E4           CLR       A
   \   00011F   3F           ADDC      A,R7
   \   000120   F583         MOV       DPH,A
   \   000122   D0E0         POP       A
   \   000124   F0           MOVX      @DPTR,A
   2572          
   2573              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2574              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV       A,R6
   \   000126   240B         ADD       A,#0xb
   \   000128   FA           MOV       R2,A
   \   000129   E4           CLR       A
   \   00012A   3F           ADDC      A,R7
   \   00012B   FB           MOV       R3,A
   \   00012C   8882         MOV       DPL,R0
   \   00012E   8983         MOV       DPH,R1
   \   000130   E0           MOVX      A,@DPTR
   \   000131   6401         XRL       A,#0x1
   \   000133   600E         JZ        ??ZDO_beaconNotifyIndCB_8
   2575              {
   2576                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV       A,?V0
   \   000137   240D         ADD       A,#0xd
   \   000139   FC           MOV       R4,A
   \   00013A   E4           CLR       A
   \   00013B   35..         ADDC      A,?V1
   \   00013D   FD           MOV       R5,A
   \   00013E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP      ??ZDO_beaconNotifyIndCB_9
   2577              }
   2578              else
   2579              {
   2580                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV       R4,#0x8
   \   000145   7D00         MOV       R5,#0x0
   \   000147   79FF         MOV       R1,#-0x1
   \   000149   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2581              }
   2582          
   2583              // check if this device is a better choice to join...
   2584              // ...dont bother checking assocPermit flag is doing a rejoin
   2585              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2586                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV       A,?V0
   \   00014E   240A         ADD       A,#0xa
   \   000150   F8           MOV       R0,A
   \   000151   E4           CLR       A
   \   000152   35..         ADDC      A,?V1
   \   000154   F9           MOV       R1,A
   \   000155   8882         MOV       DPL,R0
   \   000157   F583         MOV       DPH,A
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F5..         MOV       ?V4,A
   \   00015C   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   C3           CLR       C
   \   000161   95..         SUBB      A,?V4
   \   000163   4003         JC        $+5
   \   000165   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000168   85..82       MOV       DPL,?V0
   \   00016B   85..83       MOV       DPH,?V1
   \   00016E   A3           INC       DPTR
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   E0           MOVX      A,@DPTR
   \   000174   6401         XRL       A,#0x1
   \   000176   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   000178   90....       MOV       DPTR,#_tmpRejoinState
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   7003         JNZ       $+5
   \   00017E   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2587              {
   2588                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000181   C2F0         CLR       B.0
   2589                uint8 capacity = FALSE;
   2590          
   2591          #if defined ( ZIGBEEPRO )
   2592                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2593                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2594                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2595                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000183   EE           MOV       A,R6
   \   000184   2409         ADD       A,#0x9
   \   000186   FA           MOV       R2,A
   \   000187   E4           CLR       A
   \   000188   3F           ADDC      A,R7
   \   000189   FB           MOV       R3,A
   \   00018A   8A82         MOV       DPL,R2
   \   00018C   F583         MOV       DPH,A
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   F5..         MOV       ?V5,A
   \   000191   EE           MOV       A,R6
   \   000192   240A         ADD       A,#0xa
   \   000194   FC           MOV       R4,A
   \   000195   E4           CLR       A
   \   000196   3F           ADDC      A,R7
   \   000197   FD           MOV       R5,A
   \   000198   E5..         MOV       A,?V0
   \   00019A   240B         ADD       A,#0xb
   \   00019C   F5..         MOV       ?V2,A
   \   00019E   E4           CLR       A
   \   00019F   35..         ADDC      A,?V1
   \   0001A1   F5..         MOV       ?V3,A
   \   0001A3   E5..         MOV       A,?V5
   \   0001A5   C3           CLR       C
   \   0001A6   95..         SUBB      A,?V4
   \   0001A8   500E         JNC       ??ZDO_beaconNotifyIndCB_11
   \   0001AA   85..82       MOV       DPL,?V2
   \   0001AD   85..83       MOV       DPH,?V3
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   C3           CLR       C
   \   0001B2   9414         SUBB      A,#0x14
   \   0001B4   401B         JC        ??ZDO_beaconNotifyIndCB_12
   \   0001B6   801B         SJMP      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001B8   E5..         MOV       A,?V5
   \   0001BA   65..         XRL       A,?V4
   \   0001BC   7015         JNZ       ??ZDO_beaconNotifyIndCB_13
   \   0001BE   8C82         MOV       DPL,R4
   \   0001C0   8D83         MOV       DPH,R5
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   F5..         MOV       ?V4,A
   \   0001C5   85..82       MOV       DPL,?V2
   \   0001C8   85..83       MOV       DPH,?V3
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   C3           CLR       C
   \   0001CD   95..         SUBB      A,?V4
   \   0001CF   5002         JNC       ??ZDO_beaconNotifyIndCB_13
   2596                {
   2597                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D1   D2F0         SETB      B.0
   2598                }
   2599          #else
   2600                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2601                {
   2602                  selected = TRUE;
   2603                }
   2604          #endif
   2605          
   2606                if ( ZSTACK_ROUTER_BUILD )
   2607                {
   2608                  capacity = pBeacon->routerCapacity;
   2609                }
   2610                else if ( ZSTACK_END_DEVICE_BUILD )
   2611                {
   2612                  capacity = pBeacon->deviceCapacity;
   2613                }
   2614          
   2615                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D3   E5..         MOV       A,?V0
   \   0001D5   2407         ADD       A,#0x7
   \   0001D7   F5..         MOV       ?V4,A
   \   0001D9   E4           CLR       A
   \   0001DA   35..         ADDC      A,?V1
   \   0001DC   F5..         MOV       ?V5,A
   \   0001DE   85..82       MOV       DPL,?V4
   \   0001E1   F583         MOV       DPH,A
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   701B         JNZ       ??ZDO_beaconNotifyIndCB_14
   \   0001E6   85..82       MOV       DPL,?V0
   \   0001E9   85..83       MOV       DPH,?V1
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   F5..         MOV       ?V6,A
   \   0001EF   A3           INC       DPTR
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   F5..         MOV       ?V7,A
   \   0001F3   90....       MOV       DPTR,#_NIB + 23
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   65..         XRL       A,?V6
   \   0001F9   7004         JNZ       ??ZDO_beaconNotifyIndCB_15
   \   0001FB   A3           INC       DPTR
   \   0001FC   E0           MOVX      A,@DPTR
   \   0001FD   65..         XRL       A,?V7
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001FF   7048         JNZ       ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000201   A2F0         MOV       C,B.0
   \   000203   5030         JNC       ??ZDO_beaconNotifyIndCB_17
   2616                {
   2617                  // this is the new chosen router for joining...
   2618                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000205   85..82       MOV       DPL,?V0
   \   000208   85..83       MOV       DPH,?V1
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   F5..         MOV       ?V6,A
   \   00020E   A3           INC       DPTR
   \   00020F   E0           MOVX      A,@DPTR
   \   000210   F5..         MOV       ?V7,A
   \   000212   8E82         MOV       DPL,R6
   \   000214   8F83         MOV       DPH,R7
   \   000216   A3           INC       DPTR
   \   000217   A3           INC       DPTR
   \   000218   A3           INC       DPTR
   \   000219   A3           INC       DPTR
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   E5..         MOV       A,?V6
   \   00021F   F0           MOVX      @DPTR,A
   \   000220   A3           INC       DPTR
   \   000221   E5..         MOV       A,?V7
   \   000223   F0           MOVX      @DPTR,A
   2619                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   000224   8882         MOV       DPL,R0
   \   000226   8983         MOV       DPH,R1
   \   000228   E0           MOVX      A,@DPTR
   \   000229   8A82         MOV       DPL,R2
   \   00022B   8B83         MOV       DPH,R3
   \   00022D   12....       LCALL     ?Subroutine15 & 0xFFFF
   2620                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   2621                }
   \                     ??CrossCallReturnLabel_6:
   \   000230   8C82         MOV       DPL,R4
   \   000232   8D83         MOV       DPH,R5
   \   000234   F0           MOVX      @DPTR,A
   2622          
   2623                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000235   85..82       MOV       DPL,?V4
   \   000238   85..83       MOV       DPH,?V5
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   600B         JZ        ??ZDO_beaconNotifyIndCB_16
   2624                  pNwkDesc->deviceCapacity = 1;
   \   00023E   8E82         MOV       DPL,R6
   \   000240   8F83         MOV       DPH,R7
   \   000242   A3           INC       DPTR
   \   000243   A3           INC       DPTR
   \   000244   A3           INC       DPTR
   \   000245   A3           INC       DPTR
   \   000246   7401         MOV       A,#0x1
   \   000248   F0           MOVX      @DPTR,A
   2625          
   2626                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   000249   85..82       MOV       DPL,?V0
   \   00024C   85..83       MOV       DPH,?V1
   \   00024F   A3           INC       DPTR
   \   000250   A3           INC       DPTR
   \   000251   A3           INC       DPTR
   \   000252   A3           INC       DPTR
   \   000253   A3           INC       DPTR
   \   000254   A3           INC       DPTR
   \   000255   E0           MOVX      A,@DPTR
   \   000256   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2627                  pNwkDesc->routerCapacity = 1;
   \   000258   8E82         MOV       DPL,R6
   \   00025A   8F83         MOV       DPH,R7
   \   00025C   A3           INC       DPTR
   \   00025D   A3           INC       DPTR
   \   00025E   A3           INC       DPTR
   \   00025F   7401         MOV       A,#0x1
   \   000261   F0           MOVX      @DPTR,A
   2628              }
   2629            }
   2630          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000262   7F0A         MOV       R7,#0xa
   \   000264   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   2631          
   2632          /*********************************************************************
   2633           * @fn          ZDO_StartRouterConfirmCB
   2634           *
   2635           * @brief       This function reports the results of the request to
   2636           *              start functioning as a router in a network.
   2637           *
   2638           * @param       Status - Result of NLME_StartRouterRequest()
   2639           *
   2640           * @return      none
   2641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2642          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2643          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2644            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2645          
   2646            if ( Status == ZSUCCESS )
   \   00000A   700B         JNZ       ??ZDO_StartRouterConfirmCB_0
   2647            {
   2648              // LED on shows Router started
   2649          //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2650              // LED off forgets HOLD_AUTO_START
   2651          //    HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2652              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7005         JNZ       ??ZDO_StartRouterConfirmCB_0
   2653              {
   2654                // Began with HOLD_AUTO_START
   2655                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7906         MOV       R1,#0x6
   \   000014   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2656              }
   2657            }
   2658          #if defined(BLINK_LEDS)
   2659            else
   2660            {
   2661          //    HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2662            }
   2663          #endif
   2664          
   2665            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A20         MOV       R2,#0x20
   \   000019   02....       LJMP      ?Subroutine0 & 0xFFFF
   2666          }
   2667          
   2668          /*********************************************************************
   2669           * @fn          ZDO_JoinConfirmCB
   2670           *
   2671           * @brief       This function allows the next higher layer to be notified
   2672           *              of the results of its request to join itself or another
   2673           *              device to a network.
   2674           *
   2675           * @param       Status - Result of NLME_JoinRequest()
   2676           *
   2677           * @return      none
   2678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2679          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   2681            (void)PanId;  // remove if this parameter is used.
   2682          
   2683            nwkStatus = (byte)Status;
   \   00000C   E9           MOV       A,R1
   \   00000D   90....       MOV       DPTR,#nwkStatus
   \   000010   F0           MOVX      @DPTR,A
   2684          
   2685            if ( Status == ZSUCCESS )
   \   000011   7072         JNZ       ??ZDO_JoinConfirmCB_0
   2686            {
   2687              if ( ZSTACK_END_DEVICE_BUILD
   2688                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2689              {
   2690                neighborEntry_t *pItem;
   2691          
   2692                // We don't need the neighbor table entries.
   2693                // Clear the neighbor Table to remove beacon information
   2694                nwkNeighborInitTable();
   \   000013                ; Setup parameters for call to function nwkNeighborInitTable
   \   000013   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2695          
   2696                // Force a neighbor table entry for the parent
   2697                pItem = nwkNeighborFindEmptySlot();
   \   000016                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000016   12....       LCALL     `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000019   8A..         MOV       ?V2,R2
   \   00001B   8B..         MOV       ?V3,R3
   \   00001D   AE..         MOV       R6,?V2
   \   00001F   AF..         MOV       R7,?V3
   2698                if ( pItem != NULL )
   \   000021   EA           MOV       A,R2
   \   000022   4F           ORL       A,R7
   \   000023   6055         JZ        ??ZDO_JoinConfirmCB_1
   2699                {
   2700                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000025                ; Setup parameters for call to function osal_memset
   \   000025   7C17         MOV       R4,#0x17
   \   000027   7D00         MOV       R5,#0x0
   \   000029   7900         MOV       R1,#0x0
   \   00002B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2701                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   00002E   90....       MOV       DPTR,#_NIB + 23
   \   000031   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   2702                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \                     ??CrossCallReturnLabel_103:
   \   00003B                ; Setup parameters for call to function sAddrExtCpy
   \   00003B   7C..         MOV       R4,#(_NIB + 25) & 0xff
   \   00003D   7D..         MOV       R5,#((_NIB + 25) >> 8) & 0xff
   \   00003F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000042   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2703                  pItem->panId = _NIB. nwkPanId;
   \   000045   90....       MOV       DPTR,#_NIB + 33
   \   000048   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00004B   12....       LCALL     ?Subroutine12 & 0xFFFF
   2704                  pItem->linkInfo.rxLqi = DEF_LQI;
   \                     ??CrossCallReturnLabel_104:
   \   00004E   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000051   74AA         MOV       A,#-0x56
   \   000053   F0           MOVX      @DPTR,A
   2705                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   000054   90....       MOV       DPTR,#gLINK_DOWN_TRIGGER
   \   000057   E4           CLR       A
   \   000058   93           MOVC      A,@A+DPTR
   \   000059   7900         MOV       R1,#0x0
   \   00005B   2401         ADD       A,#0x1
   \   00005D   F8           MOV       R0,A
   \   00005E   5001         JNC       ??ZDO_JoinConfirmCB_2
   \   000060   09           INC       R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000061   7A02         MOV       R2,#0x2
   \   000063   7B00         MOV       R3,#0x0
   \   000065   12....       LCALL     ?S_DIV_MOD
   \   000068   EE           MOV       A,R6
   \   000069   240D         ADD       A,#0xd
   \   00006B   F582         MOV       DPL,A
   \   00006D   E4           CLR       A
   \   00006E   3F           ADDC      A,R7
   \   00006F   F583         MOV       DPH,A
   \   000071   E8           MOV       A,R0
   \   000072   F0           MOVX      @DPTR,A
   2706                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   000073   EE           MOV       A,R6
   \   000074   12....       LCALL     ?Subroutine45 & 0xFFFF
   2707                }
   2708              }
   \                     ??CrossCallReturnLabel_59:
   \   000077   7401         MOV       A,#0x1
   \   000079   F0           MOVX      @DPTR,A
   2709          
   2710              // LED on shows device joined
   2711          //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2712              // LED off forgets HOLD_AUTO_START
   2713          //    HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2714              if ( (devState == DEV_HOLD) )
   \                     ??ZDO_JoinConfirmCB_1:
   \   00007A   90....       MOV       DPTR,#devState
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   7005         JNZ       ??ZDO_JoinConfirmCB_0
   2715              {
   2716                // Began with HOLD_AUTO_START
   2717                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000080                ; Setup parameters for call to function ZDApp_ChangeState
   \   000080   7903         MOV       R1,#0x3
   \   000082   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2718              }
   2719          
   2720              if ( !ZG_SECURE_ENABLED )
   2721              {
   2722                // Notify to save info into NV
   2723                ZDApp_NVUpdate();
   2724              }
   2725            }
   2726            else
   2727            {
   2728          #if defined(BLINK_LEDS)
   2729          //    HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2730          #endif
   2731            }
   2732          
   2733            // Pass the join confirm to higher layer if callback registered
   2734            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   000085   90....       MOV       DPTR,#zdoCBFunc + 8
   \   000088   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00008B   6030         JZ        ??ZDO_JoinConfirmCB_3
   2735            {
   2736              zdoJoinCnf_t joinCnf;
   2737          
   2738              joinCnf.status = Status;
   \   00008D   85..82       MOV       DPL,?XSP + 0
   \   000090   85..83       MOV       DPH,?XSP + 1
   \   000093   E5..         MOV       A,?V0
   \   000095   F0           MOVX      @DPTR,A
   2739              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000096   90....       MOV       DPTR,#_NIB + 20
   \   000099   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00009C   7401         MOV       A,#0x1
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2740              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_142:
   \   0000A4   90....       MOV       DPTR,#_NIB + 23
   \   0000A7   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000AA   7403         MOV       A,#0x3
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2741          
   2742              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_143:
   \   0000B2                ; Setup parameters for indirect call
   \   0000B2   AA..         MOV       R2,?XSP + 0
   \   0000B4   AB..         MOV       R3,?XSP + 1
   \   0000B6   8882         MOV       DPL,R0
   \   0000B8   8983         MOV       DPH,R1
   \   0000BA   12....       LCALL     ?CALL_IND
   2743            }
   2744          
   2745            // Notify ZDApp
   2746            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000BD                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000BD   7C00         MOV       R4,#0x0
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   7B02         MOV       R3,#0x2
   \   0000C3   7A02         MOV       R2,#0x2
   \   0000C5   12....       LCALL     ?Subroutine29 & 0xFFFF
   2747          
   2748          }
   \                     ??CrossCallReturnLabel_25:
   \   0000C8   7405         MOV       A,#0x5
   \   0000CA   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine59_0
   \   000001                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3F           ADDC      A,R7
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine60_0
   \   000004                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   2749          
   2750          /*********************************************************************
   2751           * @fn          ZDO_PermitJoinCB
   2752           *
   2753           * @brief      This function is called when there is a change in the
   2754           *             device's permit join status.
   2755           *
   2756           * @param       duration - the new duration
   2757           *
   2758           * @return      none
   2759           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2760          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2761          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2762            // Pass the Permit Join status to higher layer if callback registered
   2763            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000017   6007         JZ        ??ZDO_PermitJoinCB_0
   2764            {
   2765              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   2766            }
   2767          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV       A,#0x1
   \   000022   02....       LJMP      ?Subroutine3 & 0xFFFF
   2768          
   2769          /*********************************************************************
   2770           * @fn          ZDO_AddrChangeIndicationCB
   2771           *
   2772           * @brief       This function notifies the application that this
   2773           *              device's address has changed.  Could happen in
   2774           *              a network with stochastic addressing (PRO).
   2775           *
   2776           * @param       newAddr - the new address
   2777           *
   2778           * @return      none
   2779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2780          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2781          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2782            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2783            epList_t *pItem = epList;
   \   000009   90....       MOV       DPTR,#epList
   \   00000C   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   2784          
   2785            // Notify to save info into NV
   2786            ZDApp_NVUpdate();
   2787          
   2788            // Notify the applications
   2789            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_107:
   \   00000F                ; Setup parameters for call to function osal_set_event
   \   00000F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000012   8042         SJMP      ??CrossCallReturnLabel_108
   2790          
   2791            while (pItem != NULL)
   2792            {
   2793              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000014   EE           MOV       A,R6
   \   000015   2402         ADD       A,#0x2
   \   000017   F8           MOV       R0,A
   \   000018   E4           CLR       A
   \   000019   3F           ADDC      A,R7
   \   00001A   88..         MOV       ?V2,R0
   \   00001C   F5..         MOV       ?V3,A
   \   00001E   8882         MOV       DPL,R0
   \   000020   F583         MOV       DPH,A
   \   000022   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000025   6028         JZ        ??ZDO_AddrChangeIndicationCB_1
   2794              {
   2795                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000027                ; Setup parameters for call to function osal_msg_allocate
   \   000027   7A04         MOV       R2,#0x4
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2796                if (pZDOAddrChangeMsg != NULL)
   \   00002E   EA           MOV       A,R2
   \   00002F   4B           ORL       A,R3
   \   000030   601D         JZ        ??ZDO_AddrChangeIndicationCB_1
   2797                {
   2798                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   74D6         MOV       A,#-0x2a
   \   000038   F0           MOVX      @DPTR,A
   2799                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E5..         MOV       A,?V0
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   E5..         MOV       A,?V1
   \   000041   12....       LCALL     ?Subroutine15 & 0xFFFF
   2800                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2801                }
   2802              }
   \                     ??CrossCallReturnLabel_7:
   \   000044   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000047   A3           INC       DPTR
   \   000048   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2803              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   2804            }
   \                     ??CrossCallReturnLabel_108:
   \   000056   EE           MOV       A,R6
   \   000057   4F           ORL       A,R7
   \   000058   70BA         JNZ       ??ZDO_AddrChangeIndicationCB_0
   2805          
   2806            // Send out a device announce
   2807            ZDApp_AnnounceNewAddress();
   \   00005A                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005A   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2808          }
   \   00005D   02....       LJMP      ?Subroutine1 & 0xFFFF
   2809          
   2810          /*********************************************************************
   2811           * @fn          ZDO_JoinIndicationCB
   2812           *
   2813           * @brief       This function allows the next higher layer of a
   2814           *              coordinator to be notified of a remote join request.
   2815           *
   2816           * @param       ShortAddress - 16-bit address
   2817           * @param       ExtendedAddress - IEEE (64-bit) address
   2818           * @param       CapabilityFlags - Association Capability Flags
   2819           * @param       type - of joining -
   2820           *                          NWK_ASSOC_JOIN
   2821           *                          NWK_ASSOC_REJOIN_UNSECURE
   2822           *                          NWK_ASSOC_REJOIN_SECURE
   2823           *
   2824           * @return      ZStatus_t
   2825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2827                                          uint8 CapabilityFlags, uint8 type)
   2828          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine31 & 0xFFFF
   2829            (void)ExtendedAddress;
   2830            //check if the device is leaving before responding to rejoin request
   2831            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \                     ??CrossCallReturnLabel_30:
   \   000008   6005         JZ        ??ZDO_JoinIndicationCB_0
   2832            {
   2833              return ZFailure; // device leaving , hence do not allow rejoin
   \   00000A   7901         MOV       R1,#0x1
   \   00000C   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2834            }
   \                     ??ZDO_JoinIndicationCB_0:
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   2835          
   2836          #if ZDO_NV_SAVE_RFDs
   2837              (void)CapabilityFlags;
   2838          
   2839          #else  // if !ZDO_NV_SAVE_RFDs
   2840              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2841          #endif
   2842              {
   2843                ZDApp_NVUpdate();  // Notify to save info into NV.
   2844              }
   2845          
   2846              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2847              {
   2848                if ( type == NWK_ASSOC_JOIN ||
   2849                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   2850                      type == NWK_ASSOC_REJOIN_SECURE )
   \   000016   600D         JZ        ??ZDO_JoinIndicationCB_2
   \   000018   7401         MOV       A,#0x1
   \   00001A   68           XRL       A,R0
   \   00001B   6008         JZ        ??ZDO_JoinIndicationCB_2
   \   00001D   7402         MOV       A,#0x2
   \   00001F   68           XRL       A,R0
   \   000020   6003         JZ        $+5
   \   000022   02....       LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2851                {
   2852                  uint16 timeToFire;
   2853                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2854          
   2855                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   7A06         MOV       R2,#0x6
   \   000027   7B00         MOV       R3,#0x0
   \   000029   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002C   8A..         MOV       ?V2,R2
   \   00002E   8B..         MOV       ?V3,R3
   \   000030   AE..         MOV       R6,?V2
   \   000032   AF..         MOV       R7,?V3
   2856          
   2857                  if ( pNewDevice == NULL )
   \   000034   EA           MOV       A,R2
   \   000035   4F           ORL       A,R7
   \   000036   7004         JNZ       ??ZDO_JoinIndicationCB_4
   2858                  {
   2859                    // Memory alloc failed
   2860                    return ZMemError;
   \   000038   7910         MOV       R1,#0x10
   \   00003A   8077         SJMP      ??ZDO_JoinIndicationCB_1
   2861                  }
   2862          
   2863                  // Add the new device to the New Device List
   2864                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   00003C   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00003F   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000042   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000045   7006         JNZ       ??ZDO_JoinIndicationCB_5
   2865                  {
   2866                    // The list is empty, add the first element
   2867                    ZDApp_NewDeviceList = pNewDevice;
   \   000047   EA           MOV       A,R2
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   EB           MOV       A,R3
   \   00004B   801B         SJMP      ??ZDO_JoinIndicationCB_6
   2868                  }
   2869                  else
   2870                  {
   2871                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FA           MOV       R2,A
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   8003         SJMP      ??ZDO_JoinIndicationCB_7
   2872          
   2873                    // Walk the list to last element
   2874                    while ( pDeviceList->next )
   2875                    {
   2876                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000053   E8           MOV       A,R0
   \   000054   FA           MOV       R2,A
   \   000055   E9           MOV       A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   000056   FB           MOV       R3,A
   2877                    }
   \   000057   8A82         MOV       DPL,R2
   \   000059   8B83         MOV       DPH,R3
   \   00005B   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00005E   70F3         JNZ       ??ZDO_JoinIndicationCB_8
   2878          
   2879                    // Add new device at the end
   2880                    pDeviceList->next = pNewDevice;
   \   000060   8A82         MOV       DPL,R2
   \   000062   8B83         MOV       DPH,R3
   \   000064   EE           MOV       A,R6
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   EF           MOV       A,R7
   \                     ??ZDO_JoinIndicationCB_6:
   \   000068   F0           MOVX      @DPTR,A
   2881                  }
   2882          
   2883                  // get the remaining time of the timer
   2884                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000069                ; Setup parameters for call to function osal_get_timeoutEx
   \   000069   7A40         MOV       R2,#0x40
   \   00006B   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00006E   8A..         MOV       ?V4,R2
   \   000070   8B..         MOV       ?V5,R3
   2885          
   2886                  pNewDevice->next = NULL;
   \   000072   8E82         MOV       DPL,R6
   \   000074   8F83         MOV       DPH,R7
   \   000076   E4           CLR       A
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   F0           MOVX      @DPTR,A
   2887                  pNewDevice->shortAddr = ShortAddress;
   \   00007A   8E82         MOV       DPL,R6
   \   00007C   8F83         MOV       DPH,R7
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E5..         MOV       A,?V0
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   E5..         MOV       A,?V1
   \   000086   F0           MOVX      @DPTR,A
   2888                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   000087   7458         MOV       A,#0x58
   \   000089   C3           CLR       C
   \   00008A   95..         SUBB      A,?V4
   \   00008C   F8           MOV       R0,A
   \   00008D   7402         MOV       A,#0x2
   \   00008F   95..         SUBB      A,?V5
   \   000091   F9           MOV       R1,A
   \   000092   8E82         MOV       DPL,R6
   \   000094   8F83         MOV       DPH,R7
   \   000096   12....       LCALL     ?Subroutine12 & 0xFFFF
   2889          
   2890                  // Start the timer only if there is no pending timer
   2891                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_105:
   \   000099   7458         MOV       A,#0x58
   \   00009B   68           XRL       A,R0
   \   00009C   7003         JNZ       ??ZDO_JoinIndicationCB_9
   \   00009E   7402         MOV       A,#0x2
   \   0000A0   69           XRL       A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000A1   700E         JNZ       ??ZDO_JoinIndicationCB_3
   2892                  {
   2893                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000A3                ; Setup parameters for call to function osal_start_timerEx
   \   0000A3   90....       MOV       DPTR,#__Constant_258
   \   0000A6   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A9   7A40         MOV       R2,#0x40
   \   0000AB   12....       LCALL     ?Subroutine18 & 0xFFFF
   2894                  }
   2895                }
   2896              }
   \                     ??CrossCallReturnLabel_82:
   \   0000AE   12....       LCALL     ?DEALLOC_XSTACK8
   2897          
   2898              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000B1   7900         MOV       R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000B3   7F08         MOV       R7,#0x8
   \   0000B5   02....       LJMP      ?BANKED_LEAVE_XDATA
   2899          
   2900          }
   2901          
   2902          /*********************************************************************
   2903           * @fn          ZDO_ConcentratorIndicationCB
   2904           *
   2905           * @brief       This function allows the next higher layer of a
   2906           *              device to be notified of existence of the concentrator.
   2907           *
   2908           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2909           * @param       extAddr - pointer to extended Address
   2910           *                        NULL if not available
   2911           * @param       pktCost - PktCost from RREQ
   2912           *
   2913           * @return      void
   2914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2915          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2916          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2917            zdoConcentratorInd_t conInd;
   2918          
   2919            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine13 & 0xFFFF
   2920            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_146:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   2921            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   2922          
   2923            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000024   6007         JZ        ??ZDO_ConcentratorIndicationCB_0
   2924            {
   2925              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ?CALL_IND
   2926            }
   2927          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D                REQUIRE ?Subroutine6
   \   00002D                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7405         MOV       A,#0x5
   \   000002                REQUIRE ??Subroutine63_0
   \   000002                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine70_0
   \   000006                ; // Fall through to label ??Subroutine70_0
   2928          
   2929          /*********************************************************************
   2930           * @fn          ZDO_LeaveCnf
   2931           *
   2932           * @brief       This function allows the next higher layer to be
   2933           *              notified of the results of its request for this or
   2934           *              a child device to leave the network.
   2935           *
   2936           * @param       cnf - NLME_LeaveCnf_t
   2937           *
   2938           * @return      none
   2939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2940          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2942            // Check for this device
   2943            if ( osal_ExtAddrEqual( cnf->extAddr,
   2944                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000017   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV       A,R1
   \   00001B   6401         XRL       A,#0x1
   \   00001D   7019         JNZ       ??ZDO_LeaveCnf_0
   2945            {
   2946              // Pass the leave confirm to higher layer if callback registered
   2947              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2948                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000025   600B         JZ        ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     ?CALL_IND
   \   00002E   EA           MOV       A,R2
   \   00002F   4B           ORL       A,R3
   \   000030   7006         JNZ       ??ZDO_LeaveCnf_0
   2949              {
   2950                // Prepare to leave with reset
   2951                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000032                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000032   12....       LCALL     ?Subroutine39 & 0xFFFF
   2952              }
   2953            }
   \                     ??CrossCallReturnLabel_51:
   \   000035   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   2954            else if ( ZSTACK_ROUTER_BUILD )
   2955            {
   2956              // Remove device address(optionally descendents) from data
   2957              ZDApp_LeaveUpdate( cnf->dstAddr,
   2958                                 cnf->extAddr,
   2959                                 cnf->removeChildren );
   2960            }
   2961          }
   \                     ??ZDO_LeaveCnf_0:
   \   000038   02....       LJMP      ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET
   2962          
   2963          /*********************************************************************
   2964           * @fn          ZDO_LeaveInd
   2965           *
   2966           * @brief       This function allows the next higher layer of a
   2967           *              device to be notified of a remote leave request or
   2968           *              indication.
   2969           *
   2970           * @param       ind - NLME_LeaveInd_t
   2971           *
   2972           * @return      none
   2973           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2974          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2975          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2976            uint8 leave;
   2977          
   2978          
   2979            // Parent is requesting the leave - NWK layer filters out illegal
   2980            // requests
   2981            if ( ind->request == TRUE )
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F8           MOV       R0,A
   \   000012   E4           CLR       A
   \   000013   3F           ADDC      A,R7
   \   000014   88..         MOV       ?V0,R0
   \   000016   F5..         MOV       ?V1,A
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6401         XRL       A,#0x1
   \   000029   702E         JNZ       ??ZDO_LeaveInd_0
   2982            {
   2983              // Only respond if we are not rejoining the network
   2984              if ( ind->rejoin == FALSE )
   \   00002B   8882         MOV       DPL,R0
   \   00002D   85..83       MOV       DPH,?V1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   701B         JNZ       ??ZDO_LeaveInd_1
   2985              {
   2986                // Notify network of leave
   2987                NLME_LeaveRsp_t rsp;
   2988                rsp.rejoin = ind->rejoin;
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
   2989          
   2990                if ( ZSTACK_ROUTER_BUILD )
   2991                {
   2992                  rsp.removeChildren = ind->removeChildren;
   2993                }
   2994                else if ( ZSTACK_END_DEVICE_BUILD )
   2995                {
   2996                  NLME_SetResponseRate(0);
   \   00003A                ; Setup parameters for call to function NLME_SetResponseRate
   \   00003A   FA           MOV       R2,A
   \   00003B   FB           MOV       R3,A
   \   00003C   12....       LCALL     ?Subroutine38 & 0xFFFF
   2997                  NLME_SetQueuedPollRate(0);
   2998                  rsp.removeChildren = 0;
   \                     ??CrossCallReturnLabel_50:
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   2999                }
   3000          
   3001                NLME_LeaveRsp( &rsp );
   \   000047                ; Setup parameters for call to function NLME_LeaveRsp
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   3002              }
   3003          
   3004              if ( ZSTACK_END_DEVICE_BUILD )
   3005              {
   3006                // Stop polling and get ready to reset
   3007                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   00004E                ; Setup parameters for call to function NLME_SetPollRate
   \   00004E   90....       MOV       DPTR,#__Constant_0
   \   000051   12....       LCALL     ?XLOAD_R2345
   \   000054   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   3008              }
   3009          
   3010              // Prepare to leave with reset
   3011              ZDApp_LeaveReset( ind->rejoin );
   \   000057                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000057   8033         SJMP      ??ZDO_LeaveInd_2
   3012            }
   3013            else
   3014            {
   3015              leave = FALSE;
   3016          
   3017              // Check if this device needs to leave as a child or descendent
   3018              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000059                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000059   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00005C   8A..         MOV       ?V2,R2
   \   00005E   8B..         MOV       ?V3,R3
   \   000060   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00006A   E5..         MOV       A,?V2
   \   00006C   6A           XRL       A,R2
   \   00006D   7003         JNZ       ??ZDO_LeaveInd_3
   \   00006F   E5..         MOV       A,?V3
   \   000071   6B           XRL       A,R3
   \                     ??ZDO_LeaveInd_3:
   \   000072   7025         JNZ       ??ZDO_LeaveInd_4
   3019              {
   3020                if ( ( ind->removeChildren == TRUE )   )
   \   000074   7401         MOV       A,#0x1
   \   000076   69           XRL       A,R1
   \   000077   6013         JZ        ??ZDO_LeaveInd_2
   3021                {
   3022                  leave = TRUE;
   3023                }
   3024                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   000079   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   5407         ANL       A,#0x7
   \   00007F   6402         XRL       A,#0x2
   \   000081   7016         JNZ       ??ZDO_LeaveInd_4
   3025                {
   3026                  // old parents is leaving the network, child needs to search for a new parent
   3027                  ind->rejoin = TRUE;
   \   000083   85..82       MOV       DPL,?V0
   \   000086   85..83       MOV       DPH,?V1
   \   000089   7401         MOV       A,#0x1
   \   00008B   F0           MOVX      @DPTR,A
   3028                  leave = TRUE;
   3029                }
   3030          
   3031              }
   3032              else if ( ind->removeChildren == TRUE )
   3033              {
   3034                // Check NWK address allocation algorithm
   3035                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3036              }
   3037          
   3038              if ( leave == TRUE )
   3039              {
   3040                // Prepare to leave with reset
   3041                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_2:
   \   00008C                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00008C   85..82       MOV       DPL,?V0
   \   00008F   85..83       MOV       DPH,?V1
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F9           MOV       R1,A
   \   000094   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000097   800A         SJMP      ??ZDO_LeaveInd_5
   3042              }
   3043              else
   3044              {
   3045                // Remove device address(optionally descendents) from data
   3046                ZDApp_LeaveUpdate( ind->srcAddr,
   3047                                   ind->extAddr,
   3048                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_4:
   \   000099                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000099   EE           MOV       A,R6
   \   00009A   2402         ADD       A,#0x2
   \   00009C   FC           MOV       R4,A
   \   00009D   E4           CLR       A
   \   00009E   3F           ADDC      A,R7
   \   00009F   FD           MOV       R5,A
   \   0000A0   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   3049              }
   3050            }
   3051          
   3052            // Pass the leave indication to higher layer if callback registered.
   3053            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_5:
   \   0000A3   90....       MOV       DPTR,#zdoCBFunc + 12
   \   0000A6   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000A9   6007         JZ        ??ZDO_LeaveInd_6
   3054            {
   3055              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000AB                ; Setup parameters for indirect call
   \   0000AB   EE           MOV       A,R6
   \   0000AC   FA           MOV       R2,A
   \   0000AD   EF           MOV       A,R7
   \   0000AE   FB           MOV       R3,A
   \   0000AF   12....       LCALL     ?CALL_IND
   3056            }
   3057          }
   \                     ??ZDO_LeaveInd_6:
   \   0000B2   02....       LJMP      ?Subroutine2 & 0xFFFF
   3058          
   3059          /*********************************************************************
   3060           * @fn          ZDO_SyncIndicationCB
   3061           *
   3062           * @brief       This function allows the next higher layer of a
   3063           *              coordinator to be notified of a loss of synchronization
   3064           *                          with the parent/child device.
   3065           *
   3066           * @param       type: 0 - child; 1 - parent
   3067           *
   3068           *
   3069           * @return      none
   3070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3071          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3072          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3073            (void)shortAddr;  // Remove this line if this parameter is used.
   3074          
   3075            if ( ZSTACK_END_DEVICE_BUILD
   3076              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3077            {
   3078              if ( type == 1 && retryCnt == 0 )
   \   000007   7401         MOV       A,#0x1
   \   000009   6E           XRL       A,R6
   \   00000A   7031         JNZ       ??CrossCallReturnLabel_26
   \   00000C   90....       MOV       DPTR,#retryCnt
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   702B         JNZ       ??CrossCallReturnLabel_26
   3079              {
   3080                // We lost contact with our parent.  Clear the neighbor Table.
   3081                nwkNeighborInitTable();
   \   000012                ; Setup parameters for call to function nwkNeighborInitTable
   \   000012   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3082          
   3083                runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   000015   75..01       MOV       ?V0,#0x1
   \   000018   75..00       MOV       ?V1,#0x0
   \   00001B   75..00       MOV       ?V2,#0x0
   \   00001E   75..00       MOV       ?V3,#0x0
   \   000021   90....       MOV       DPTR,#_NIB + 22
   \   000024   E0           MOVX      A,@DPTR
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?L_SHL
   \   00002A   90....       MOV       DPTR,#runtimeChannel
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?L_MOV_TO_X
   3084          
   3085                // Start the rejoin process.
   3086                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000032                ; Setup parameters for call to function ZDApp_SendMsg
   \   000032   7C00         MOV       R4,#0x0
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7B02         MOV       R3,#0x2
   \   000038   7A03         MOV       R2,#0x3
   \   00003A   12....       LCALL     ?Subroutine29 & 0xFFFF
   3087              }
   3088            }
   3089          }
   \                     ??CrossCallReturnLabel_26:
   \   00003D   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   3090          
   3091          /*********************************************************************
   3092           * @fn          ZDO_ManytoOneFailureIndicationCB
   3093           *
   3094           * @brief       This function allows the next higher layer of a
   3095           *              concentrator to be notified of a many-to-one route
   3096           *              failure.
   3097           *
   3098           * @param       none
   3099           *
   3100           *
   3101           * @return      none
   3102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3103          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3104          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3105            // By default, the concentrator automatically redo many-to-one route
   3106            // discovery to update all many-to-one routes in the network
   3107            // If you want anything processing other than the default,
   3108            // please replace the following code.
   3109          
   3110            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3111          }
   \   000007   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3112          
   3113          /*********************************************************************
   3114           * @fn          ZDO_PollConfirmCB
   3115           *
   3116           * @brief       This function allows the next higher layer to be
   3117           *              notified of a Poll Confirm.
   3118           *
   3119           * @param       none
   3120           *
   3121           * @return      none
   3122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3123          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3124          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3125            (void)status;  // Remove this line if this parameter is used.
   3126            return;
   \   000000   02....       LJMP      ?BRET
   3127          }
   3128          
   3129          /*********************************************************************
   3130           * @fn          ZDO_NetworkStatusCB
   3131           *
   3132           * @brief       Network Status Callback function
   3133           *
   3134           * @param       nwkDstAddr - message's destination address- used to determine
   3135           *                           if the message was intended for this device or
   3136           *                           a sleeping end device.
   3137           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3138           * @param       dstAddr - the destination address related to the status code
   3139           *
   3140           * @return      none
   3141           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3142          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3143          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3144            (void)dstAddr;     // Remove this line if this parameter is used.
   3145          
   3146            if ( (nwkDstAddr == NLME_GetShortAddr())
   3147                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3148            {
   3149              // Routing error for dstAddr, this is informational and a Route
   3150              // Request should happen automatically.
   3151            }
   3152          }
   \   000007   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3153          
   3154          /******************************************************************************
   3155           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3156           *
   3157           * @brief       Stub routine implemented by NHLE. NHLE should call
   3158           *              <AddrMgrWriteNV> when appropriate.
   3159           *
   3160           * @param       none
   3161           *
   3162           * @return      none
   3163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3164          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3165          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3166          #if defined ( NV_RESTORE )
   3167            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   3168            {
   3169              // Trigger to save info into NV
   3170              ZDApp_NVUpdate();
   3171            }
   3172          #endif
   3173          }
   \   000000   02....       LJMP      ?BRET
   3174          
   3175          /*********************************************************************
   3176           * Call Back Functions from Security  - API
   3177           */
   3178          
   3179           /*********************************************************************
   3180           * @fn          ZDO_UpdateDeviceIndication
   3181           *
   3182           * @brief       This function notifies the "Trust Center" of a
   3183           *              network when a device joins or leaves the network.
   3184           *
   3185           * @param       extAddr - pointer to 64 bit address of new device
   3186           * @param       status  - 0 if a new device joined securely
   3187           *                      - 1 if a new device joined un-securely
   3188           *                      - 2 if a device left the network
   3189           *
   3190           * @return      true if newly joined device should be allowed to
   3191           *                                              remain on network
   3192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3193          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3194          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3195            // can implement a network access policy based on the
   3196            // IEEE address of newly joining devices...
   3197            (void)extAddr;
   3198            (void)status;
   3199          
   3200            return ZSuccess;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   3201          }
   3202          
   3203          /*********************************************************************
   3204           * @fn          ZDApp_InMsgCB
   3205           *
   3206           * @brief       This function is called to pass up any message that is
   3207           *              not yet supported.  This allows for the developer to
   3208           *              support features themselves..
   3209           *
   3210           * @return      none
   3211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3212          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3214            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EA           MOV       A,R2
   \   00000A   240C         ADD       A,#0xc
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3F           ADDC      A,R7
   \   000010   F583         MOV       DPH,A
   \   000012   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000015   5480         ANL       A,#0x80
   \   000017   703E         JNZ       ??ZDApp_InMsgCB_0
   3215            {
   3216              // Handle the response message
   3217            }
   3218            else
   3219            {
   3220              // Handle the request message by sending a generic "not supported".
   3221              // Device Announce doesn't have a response.
   3222              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000019   EA           MOV       A,R2
   \   00001A   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00001D   7038         JNZ       ??ZDApp_InMsgCB_0
   \   00001F   7413         MOV       A,#0x13
   \   000021   68           XRL       A,R0
   \   000022   7001         JNZ       ??ZDApp_InMsgCB_1
   \   000024   E9           MOV       A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000025   6030         JZ        ??ZDApp_InMsgCB_0
   3223              {
   3224                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3225                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000027                ; Setup parameters for call to function ZDP_GenericRsp
   \   000027   E8           MOV       A,R0
   \   000028   F5..         MOV       ?V0,A
   \   00002A   E9           MOV       A,R1
   \   00002B   4480         ORL       A,#0x80
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   E4           CLR       A
   \   000035   F5..         MOV       ?V0,A
   \   000037   F5..         MOV       ?V1,A
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   EA           MOV       A,R2
   \   00003F   12....       LCALL     ?Subroutine45 & 0xFFFF
   3226              }
   3227            }
   \                     ??CrossCallReturnLabel_60:
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FD           MOV       R5,A
   \   000044   7C84         MOV       R4,#-0x7c
   \   000046   EA           MOV       A,R2
   \   000047   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00004A   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   3228          }
   \                     ??ZDApp_InMsgCB_0:
   \   000057   02....       LJMP      ??Subroutine68_0 & 0xFFFF
   3229          
   3230          
   3231          /*********************************************************************
   3232           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3233           *
   3234           * @brief   Changes the Match Descriptor Response permission.
   3235           *
   3236           * @param   endpoint - endpoint to allow responses
   3237           * @param   action - true to allow responses, false to not
   3238           *
   3239           * @return  none
   3240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3241          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3242          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3243            // Store the action
   3244            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   3245          }
   \   000008   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3246          
   3247          /*********************************************************************
   3248           * @fn      ZDApp_NetworkInit()
   3249           *
   3250           * @brief   Used to start the network joining process
   3251           *
   3252           * @param   delay - mSec delay to wait before starting
   3253           *
   3254           * @return  none
   3255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3256          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3257          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3258            if ( delay )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6018         JZ        ??ZDApp_NetworkInit_0
   3259            {
   3260              // Wait awhile before starting the device
   3261              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV       ?V0,R2
   \   00000B   8B..         MOV       ?V1,R3
   \   00000D   E4           CLR       A
   \   00000E   F5..         MOV       ?V2,A
   \   000010   F5..         MOV       ?V3,A
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV       R2,#0x1
   \   000019   12....       LCALL     ?Subroutine18 & 0xFFFF
   3262            }
   \                     ??CrossCallReturnLabel_83:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   8005         SJMP      ??CrossCallReturnLabel_76
   3263            else
   3264            {
   3265              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000021                ; Setup parameters for call to function osal_set_event
   \   000021   7A01         MOV       R2,#0x1
   \   000023   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   3266            }
   3267          }
   \                     ??CrossCallReturnLabel_76:
   \   000026   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   3268          
   3269          /*********************************************************************
   3270           * @fn      ZDApp_NwkStateUpdateCB()
   3271           *
   3272           * @brief   This function notifies that this device's network
   3273           *          state info has been changed.
   3274           *
   3275           * @param   none
   3276           *
   3277           * @return  none
   3278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3279          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3280          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3281            // Notify to save info into NV
   3282            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   3283            {
   3284              // Trigger to save info into NV
   3285              ZDApp_NVUpdate();
   3286            }
   3287          }
   \                     ??CrossCallReturnLabel_114:
   \   00000B   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3288          
   3289          /*********************************************************************
   3290           * @fn      ZDApp_NodeProfileSync()
   3291           *
   3292           * @brief   Sync node with stack profile.
   3293           *
   3294           * @param   stackProfile - stack profile of the network to join
   3295           *
   3296           * @return  none
   3297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3298          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3299          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3300            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   501A         JNC       ??ZDApp_NodeProfileSync_0
   3301            {
   3302              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   6013         JZ        ??ZDApp_NodeProfileSync_0
   3303              {
   3304                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   3305                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV       A,#0xc
   \   000024   F0           MOVX      @DPTR,A
   3306                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3307              }
   3308            }
   3309          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3310          
   3311          /*********************************************************************
   3312           * @fn      ZDApp_StartJoiningCycle()
   3313           *
   3314           * @brief   Starts the joining cycle of a device.  This will only
   3315           *          continue an already started (or stopped) joining cycle.
   3316           *
   3317           * @param   none
   3318           *
   3319           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3321          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3322          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3323            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   3324            {
   3325              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   3326              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3327          
   3328              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   3329            }
   3330            else
   3331              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3332          }
   3333          
   3334          /*********************************************************************
   3335           * @fn      ZDApp_StopJoiningCycle()
   3336           *
   3337           * @brief   Stops the joining or rejoining process of a device.
   3338           *
   3339           * @param   none
   3340           *
   3341           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3343          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3344          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3345            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   600A         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX      A,@DPTR
   \   000012   640C         XRL       A,#0xc
   \   000014   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   3346            {
   3347              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV       DPTR,#continueJoining
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
   3348              return ( TRUE );
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   3349            }
   3350            else
   3351              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3352          }
   3353          
   3354          /*********************************************************************
   3355           * @fn      ZDApp_AnnounceNewAddress()
   3356           *
   3357           * @brief   Send Device Announce and hold all transmissions for
   3358           *          new address timeout.
   3359           *
   3360           * @param   none
   3361           *
   3362           * @return  none
   3363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3364          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3366          #if defined ( ZIGBEEPRO )
   3367            // Turn off data request hold
   3368            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV       R2,#0x0
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3369          #endif
   3370          
   3371            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3372                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   AE..         MOV       R6,?V0
   \   00001A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001A   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00001D   75..00       MOV       ?V0,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000025   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   EE           MOV       A,R6
   \   00002B   FC           MOV       R4,A
   \   00002C   AD..         MOV       R5,?V1
   \   00002E   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   3373          
   3374          #if defined ( ZIGBEEPRO )
   3375            // Setup the timeout
   3376            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000036                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3377          #endif
   3378          
   3379            if ( ZSTACK_END_DEVICE_BUILD )
   3380            {
   3381              if ( zgChildAgingEnable == TRUE )
   \   00003D   90....       MOV       DPTR,#zgChildAgingEnable
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6401         XRL       A,#0x1
   \   000043   7027         JNZ       ??ZDApp_AnnounceNewAddress_0
   3382              {
   3383                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3384          
   3385                // Send the message to parent
   3386                NLME_GetCoordExtAddr( coordExtAddr );
   \   000045                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000045   AA..         MOV       R2,?XSP + 0
   \   000047   AB..         MOV       R3,?XSP + 1
   \   000049   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   3387                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3388                                           zgEndDeviceTimeoutValue,
   3389                                           zgEndDeviceConfiguration );
   \   00004C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004C   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00004F                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   00004F   90....       MOV       DPTR,#zgEndDeviceConfiguration
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V0,A
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV       DPTR,#zgEndDeviceTimeoutValue
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   7401         MOV       A,#0x1
   \   000061   12....       LCALL     ?XSTACK_DISP102_8
   \   000064   12....       LCALL     `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
   \   000067   7401         MOV       A,#0x1
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   3390              }
   3391            }
   3392          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   00006C   7408         MOV       A,#0x8
   \   00006E   80..         SJMP      ??Subroutine67_0
   3393          
   3394          /*********************************************************************
   3395           * @fn      ZDApp_SendParentAnnce()
   3396           *
   3397           * @brief   Send Parent Announce message.
   3398           *
   3399           * @param   none
   3400           *
   3401           * @return  none
   3402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3403          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3405            uint8 count;
   3406            uint8 *childInfo;
   3407          
   3408            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   3409          
   3410            if ( childInfo != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6054         JZ        ??ZDApp_SendParentAnnce_0
   3411            {
   3412              if ( count > 0 )
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6044         JZ        ??ZDApp_SendParentAnnce_1
   3413              {
   3414                zAddrType_t dstAddr;
   3415          
   3416                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000022   7409         MOV       A,#0x9
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   740F         MOV       A,#0xf
   \   000029   F0           MOVX      @DPTR,A
   3417                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   74FC         MOV       A,#-0x4
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
   3418          
   3419                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000036                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000036   75..00       MOV       ?V2,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75..1F       MOV       ?V2,#0x1f
   \   000041   75..00       MOV       ?V3,#0x0
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   7406         MOV       A,#0x6
   \   000057   12....       LCALL     ?XSTACK_DISP102_8
   \   00005A   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00005C   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00005E   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   3420              }
   3421          
   3422              // Free the list after the message has been sent
   3423              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   AA..         MOV       R2,?V0
   \   000068   AB..         MOV       R3,?V1
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3424            }
   3425          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006D   740A         MOV       A,#0xa
   \   00006F   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   3426          
   3427          /*********************************************************************
   3428           * @fn          ZDApp_NVUpdate
   3429           *
   3430           * @brief       Set the NV Update Timer.
   3431           *
   3432           * @param       none
   3433           *
   3434           * @return      none
   3435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3436          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3437          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3438          #if defined ( NV_RESTORE )
   3439            if ( (ZSTACK_END_DEVICE_BUILD)
   3440                 || (ZSTACK_ROUTER_BUILD
   3441                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   3442            {
   3443              // No need to wait, set the event to save the state
   3444              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   3445            }
   3446            else
   3447            {
   3448              // To allow for more changes to the network state before saving
   3449              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3450            }
   3451          #endif
   3452          }
   \   000000   02....       LJMP      ?BRET
   3453          
   3454          /*********************************************************************
   3455           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3456           *
   3457           * @brief   Returns a PAN ID for the network layer to use during
   3458           *          a coordinator start and there is another network with
   3459           *          the intended PANID.
   3460           *
   3461           * @param   panid - the intended PAN ID
   3462           *
   3463           * @return  PANID to try
   3464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3465          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3466          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3467            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   3468          }
   3469          
   3470          /*********************************************************************
   3471           * @fn          ZDO_SrcRtgIndCB
   3472           *
   3473           * @brief       This function notifies the ZDO available src route record received.
   3474           *
   3475           * @param       srcAddr - source address of the source route
   3476           * @param       relayCnt - number of devices in the relay list
   3477           * @param       relayList - relay list of the source route
   3478           *
   3479           * @return      none
   3480           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3481          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3482          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3483            zdoSrcRtg_t srcRtg;
   3484          
   3485            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine13 & 0xFFFF
   3486            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_147:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   3487            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   3488          
   3489            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000024   600A         JZ        ??ZDO_SrcRtgIndCB_0
   3490            {
   3491              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   3492            }
   \                     ??CrossCallReturnLabel_92:
   \   00002D   12....       LCALL     ?CALL_IND
   3493          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP      ?Subroutine6 & 0xFFFF
   3494          
   3495          /*********************************************************************
   3496           * @fn          ZDApp_InitZdoCBFunc
   3497           *
   3498           * @brief       Call this function to initialize zdoCBFunc[]
   3499           *
   3500           * @param       none
   3501           *
   3502           * @return      none
   3503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3504          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3505          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3506            uint8 i;
   3507          
   3508            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   3509            {
   3510              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   12....       LCALL     ?Subroutine35 & 0xFFFF
   3511            }
   \                     ??CrossCallReturnLabel_38:
   \   00000C   0A           INC       R2
   \   00000D   EA           MOV       A,R2
   \   00000E   C3           CLR       C
   \   00000F   9409         SUBB      A,#0x9
   \   000011   40F3         JC        ??ZDApp_InitZdoCBFunc_0
   3512          }
   \   000013   02....       LJMP      ??Subroutine56_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#zdoCBFunc & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
   3513          
   3514          /*********************************************************************
   3515           * @fn          ZDO_RegisterForZdoCB
   3516           *
   3517           * @brief       Call this function to register the higher layer (for
   3518           *              example, the Application layer or MT layer) with ZDO
   3519           *              callbacks to get notified of some ZDO indication like
   3520           *              existence of a concentrator or receipt of a source
   3521           *              route record.
   3522           *
   3523           * @param       indID - ZDO Indication ID
   3524           * @param       pFn   - Callback function pointer
   3525           *
   3526           * @return      ZSuccess - successful, ZInvalidParameter if not
   3527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3528          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3529          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3530            // Check the range of the indication ID
   3531            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   500C         JNC       ??ZDO_RegisterForZdoCB_0
   3532            {
   3533              zdoCBFunc[indID] = pFn;
   \   00000A   E9           MOV       A,R1
   \   00000B   29           ADD       A,R1
   \   00000C   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00000F   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   3534              return ZSuccess;
   \                     ??CrossCallReturnLabel_144:
   \   000012   7900         MOV       R1,#0x0
   \   000014   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   3535            }
   3536          
   3537            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3538          }
   3539          
   3540          /*********************************************************************
   3541           * @fn          ZDO_DeregisterForZdoCB
   3542           *
   3543           * @brief       Call this function to de-register the higher layer (for
   3544           *              example, the Application layer or MT layer) with ZDO
   3545           *              callbacks to get notified of some ZDO indication like
   3546           *              existence of a concentrator or receipt of a source
   3547           *              route record.
   3548           *
   3549           * @param       indID - ZDO Indication ID
   3550           *
   3551           * @return      ZSuccess - successful, ZInvalidParameter if not
   3552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3553          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3554          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3555            // Check the range of the indication ID
   3556            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   5008         JNC       ??ZDO_DeregisterForZdoCB_0
   3557            {
   3558              zdoCBFunc[indID] = NULL;
   \   00000A   E9           MOV       A,R1
   \   00000B   29           ADD       A,R1
   \   00000C   12....       LCALL     ?Subroutine35 & 0xFFFF
   3559              return ZSuccess;
   \                     ??CrossCallReturnLabel_39:
   \   00000F   F9           MOV       R1,A
   \   000010   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   3560            }
   3561          
   3562            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000012   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000014   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3563          }
   3564          
   3565          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3566          #if defined ( REFLECTOR )
   3567          /*********************************************************************
   3568           * @fn          ZDApp_SetPendingBindDefault
   3569           *
   3570           * @brief       This function initializes a specific entry of pending
   3571           *              Bind Request.
   3572           *
   3573           * @param       pendBindReq - pointer to the entry in the table
   3574           *
   3575           * @return      none
   3576           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3577          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3578          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3579            // Set it to an initial value
   3580            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV       R4,#0x21
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   79FF         MOV       R1,#-0x1
   \   00000F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3581          
   3582            // We are checking for age 0 for aged-out records
   3583            pendBindReq->age = 0;
   \   000012   EE           MOV       A,R6
   \   000013   2420         ADD       A,#0x20
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   F583         MOV       DPH,A
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   3584          }
   \   00001D   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3585          
   3586          /*********************************************************************
   3587           * @fn          ZDApp_InitPendingBind
   3588           *
   3589           * @brief       This function initializes the buffer that holds
   3590           *              pending Bind Request messages if no valid NWK address
   3591           *              exists in Address Manager and a Network Address Req
   3592           *              has been sent out.
   3593           *
   3594           * @param       none
   3595           *
   3596           * @return      none
   3597           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine69_0
   \   000003                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3598          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3599          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3600            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000008   7030         JNZ       ??ZDApp_InitPendingBind_0
   3601            {
   3602              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV       R2,#0x63
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000017   F9           MOV       R1,A
   \   000018   EA           MOV       A,R2
   \   000019   49           ORL       A,R1
   \   00001A   601E         JZ        ??ZDApp_InitPendingBind_0
   3603              {
   3604                uint8 i;
   3605          
   3606                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV       R6,#0x0
   3607                {
   3608                  // Set to default values
   3609                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV       A,R6
   \   00001F   75F021       MOV       B,#0x21
   \   000022   A4           MUL       AB
   \   000023   F8           MOV       R0,A
   \   000024   A9F0         MOV       R1,B
   \   000026   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   28           ADD       A,R0
   \   00002B   FA           MOV       R2,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   39           ADDC      A,R1
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3610                }
   \   000033   0E           INC       R6
   \   000034   EE           MOV       A,R6
   \   000035   C3           CLR       C
   \   000036   9403         SUBB      A,#0x3
   \   000038   40E4         JC        ??ZDApp_InitPendingBind_1
   3611              }
   3612            }
   3613          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3614          
   3615          /*********************************************************************
   3616           * @fn          ZDApp_GetEmptyPendingBindReq
   3617           *
   3618           * @brief       This function looks for an empty entry.
   3619           *
   3620           * @param       none
   3621           *
   3622           * @return      Pointer to entry
   3623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3624          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3625          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3626            uint8 i;
   3627          
   3628            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000007   6027         JZ        ??ZDApp_GetEmptyPendingBindReq_0
   3629            {
   3630              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7C00         MOV       R4,#0x0
   3631              {
   3632                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EC           MOV       A,R4
   \   00000C   75F021       MOV       B,#0x21
   \   00000F   A4           MUL       AB
   \   000010   F8           MOV       R0,A
   \   000011   A9F0         MOV       R1,B
   \   000013   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000016   E0           MOVX      A,@DPTR
   \   000017   28           ADD       A,R0
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   39           ADDC      A,R1
   \   00001C   FB           MOV       R3,A
   \   00001D   EA           MOV       A,R2
   \   00001E   2420         ADD       A,#0x20
   \   000020   F582         MOV       DPL,A
   \   000022   E4           CLR       A
   \   000023   3B           ADDC      A,R3
   \   000024   F583         MOV       DPH,A
   \   000026   E0           MOVX      A,@DPTR
   \   000027   600B         JZ        ??ZDApp_GetEmptyPendingBindReq_2
   3633                {
   3634                  return ( &ZDAppPendingBindReq[i] );
   3635                }
   3636              }
   \   000029   0C           INC       R4
   \   00002A   EC           MOV       A,R4
   \   00002B   C3           CLR       C
   \   00002C   9403         SUBB      A,#0x3
   \   00002E   40DB         JC        ??ZDApp_GetEmptyPendingBindReq_1
   3637            }
   3638          
   3639            // No empty entry was found
   3640            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000030   7A00         MOV       R2,#0x0
   \   000032   7B00         MOV       R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   000034   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   3641          }
   3642          
   3643          /*********************************************************************
   3644           * @fn          ZDApp_ProcessPendingBindReq
   3645           *
   3646           * @brief       Process pending entry based on EXT address.
   3647           *
   3648           * @param       extAddr - of device to look up
   3649           *
   3650           * @return      none
   3651           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3652          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3653          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   3654            uint8 i;
   3655          
   3656            // Loop through all the pending entries for that Ext Address
   3657            // to create Bind Entries and send Bind Rsp
   3658            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000011   7003         JNZ       $+5
   \   000013   02....       LJMP      ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3659            {
   3660              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV       ?V0,#0x0
   3661              {
   3662                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3663                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019   E5..         MOV       A,?V0
   \   00001B   75F021       MOV       B,#0x21
   \   00001E   A4           MUL       AB
   \   00001F   FE           MOV       R6,A
   \   000020   AFF0         MOV       R7,B
   \   000022                ; Setup parameters for call to function osal_memcmp
   \   000022   85....       MOV       ?V4,?V2
   \   000025   85....       MOV       ?V5,?V3
   \   000028   75..00       MOV       ?V6,#0x0
   \   00002B   78..         MOV       R0,#?V4
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000030   7C08         MOV       R4,#0x8
   \   000032   7D00         MOV       R5,#0x0
   \   000034   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000037   240B         ADD       A,#0xb
   \   000039   F5..         MOV       ?V4,A
   \   00003B   E4           CLR       A
   \   00003C   39           ADDC      A,R1
   \   00003D   A9..         MOV       R1,?V4
   \   00003F   FA           MOV       R2,A
   \   000040   7B00         MOV       R3,#0x0
   \   000042   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000045   7403         MOV       A,#0x3
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   E9           MOV       A,R1
   \   00004B   6401         XRL       A,#0x1
   \   00004D   6003         JZ        $+5
   \   00004F   02....       LJMP      ??CrossCallReturnLabel_21 & 0xFFFF
   3664                {
   3665                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000052   85..82       MOV       DPL,?XSP + 0
   \   000055   85..83       MOV       DPH,?XSP + 1
   \   000058   748C         MOV       A,#-0x74
   \   00005A   F0           MOVX      @DPTR,A
   3666          
   3667                  // Add Bind entry
   3668                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3669                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3670                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3671                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   00005B   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   2E           ADD       A,R6
   \   000060   F5..         MOV       ?V4,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   3F           ADDC      A,R7
   \   000065   F5..         MOV       ?V5,A
   \   000067                ; Setup parameters for call to function APSME_BindRequest
   \   000067   E5..         MOV       A,?V4
   \   000069   2414         ADD       A,#0x14
   \   00006B   F582         MOV       DPL,A
   \   00006D   E4           CLR       A
   \   00006E   35..         ADDC      A,?V5
   \   000070   F583         MOV       DPH,A
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F5..         MOV       ?V1,A
   \   000075   78..         MOV       R0,#?V1
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007A   E5..         MOV       A,?V4
   \   00007C   240B         ADD       A,#0xb
   \   00007E   FC           MOV       R4,A
   \   00007F   E4           CLR       A
   \   000080   35..         ADDC      A,?V5
   \   000082   FD           MOV       R5,A
   \   000083   85..82       MOV       DPL,?V4
   \   000086   85..83       MOV       DPH,?V5
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000094   85..82       MOV       DPL,?V4
   \   000097   85..83       MOV       DPH,?V5
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F9           MOV       R1,A
   \   0000A4   12....       LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000A7   7401         MOV       A,#0x1
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AC   E9           MOV       A,R1
   \   0000AD   7008         JNZ       ??ZDApp_ProcessPendingBindReq_2
   3672                  {
   3673                    // valid entry
   3674                    bindStat = ZDP_SUCCESS;
   \   0000AF   85..82       MOV       DPL,?XSP + 0
   \   0000B2   85..83       MOV       DPH,?XSP + 1
   \   0000B5   E4           CLR       A
   \   0000B6   F0           MOVX      @DPTR,A
   3675          
   3676                    // Notify to save info into NV
   3677                    ZDApp_NVUpdate();
   3678                  }
   3679          
   3680                  // Send back a response message
   3681                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3682                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000B7   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000BA   F5..         MOV       ?V1,A
   \   0000BC   78..         MOV       R0,#?V1
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C1   7401         MOV       A,#0x1
   \   0000C3   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C6   88..         MOV       ?V4,R0
   \   0000C8   89..         MOV       ?V5,R1
   \   0000CA   78..         MOV       R0,#?V4
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   75..21       MOV       ?V4,#0x21
   \   0000D2   75..80       MOV       ?V5,#-0x80
   \   0000D5   78..         MOV       R0,#?V4
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DA   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000DD   5001         JNC       ??ZDApp_ProcessPendingBindReq_3
   \   0000DF   0B           INC       R3
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000E0   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000E3   7405         MOV       A,#0x5
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
   3683          
   3684                  // Set the pending request entry to default values
   3685                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000E8                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000E8   12....       LCALL     ?Subroutine26 & 0xFFFF
   3686                }
   3687              }
   \                     ??CrossCallReturnLabel_21:
   \   0000EB   05..         INC       ?V0
   \   0000ED   E5..         MOV       A,?V0
   \   0000EF   C3           CLR       C
   \   0000F0   9403         SUBB      A,#0x3
   \   0000F2   5003         JNC       $+5
   \   0000F4   02....       LJMP      ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3688            }
   3689          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7901         MOV       R1,#0x1
   \   000002   EA           MOV       A,R2
   \   000003   2415         ADD       A,#0x15
   \   000005   FC           MOV       R4,A
   \   000006   E4           CLR       A
   \   000007   3B           ADDC      A,R3
   \   000008   FD           MOV       R5,A
   \   000009   EA           MOV       A,R2
   \   00000A   241F         ADD       A,#0x1f
   \   00000C   FA           MOV       R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   F9           MOV       R1,A
   \   00000A   E8           MOV       A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   FB           MOV       R3,A
   \   00000A   12....       LCALL     `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   FB           MOV       R3,A
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A   EA           MOV       A,R2
   \   00000B   241E         ADD       A,#0x1e
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   3B           ADDC      A,R3
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
   3690          
   3691          /*********************************************************************
   3692           * @fn          ZDApp_AgeOutPendingBindEntry
   3693           *
   3694           * @brief       Age out pending Bind Req entries.
   3695           *
   3696           * @param       none
   3697           *
   3698           * @return      none
   3699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3700          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3701          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3702            uint8 i;
   3703            bool entryFound = FALSE;
   \   00000A   75..00       MOV       ?V0,#0x0
   3704          
   3705            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3706            {
   3707              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV       ?V1,#0x0
   3708              {
   3709                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV       A,?V1
   \   00001A   75F021       MOV       B,#0x21
   \   00001D   A4           MUL       AB
   \   00001E   FE           MOV       R6,A
   \   00001F   AFF0         MOV       R7,B
   \   000021   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000024   2420         ADD       A,#0x20
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   39           ADDC      A,R1
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FA           MOV       R2,A
   \   00002E   C3           CLR       C
   \   00002F   9402         SUBB      A,#0x2
   \   000031   4009         JC        ??ZDApp_AgeOutPendingBindEntry_2
   3710                {
   3711                  ZDAppPendingBindReq[i].age--;
   \   000033   E0           MOVX      A,@DPTR
   \   000034   14           DEC       A
   \   000035   F0           MOVX      @DPTR,A
   3712          
   3713                  entryFound = TRUE;
   \   000036   75..01       MOV       ?V0,#0x1
   \   000039   02....       LJMP      ??CrossCallReturnLabel_22 & 0xFFFF
   3714                }
   3715                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00003C   7401         MOV       A,#0x1
   \   00003E   6A           XRL       A,R2
   \   00003F   707C         JNZ       ??CrossCallReturnLabel_22
   3716                {
   3717                  // The record has aged out and has valid data
   3718                  AddrMgrEntry_t entry;
   3719                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000041   85..82       MOV       DPL,?XSP + 0
   \   000044   85..83       MOV       DPH,?XSP + 1
   \   000047   748C         MOV       A,#-0x74
   \   000049   F0           MOVX      @DPTR,A
   3720          
   3721                  entry.user = ADDRMGR_USER_BINDING;
   \   00004A   7401         MOV       A,#0x1
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   7404         MOV       A,#0x4
   \   000051   F0           MOVX      @DPTR,A
   3722          
   3723                  // Remove the entry in address manager so we do not keep entries
   3724                  // with invalid addresses
   3725                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000052                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000052   E8           MOV       A,R0
   \   000053   240B         ADD       A,#0xb
   \   000055   FC           MOV       R4,A
   \   000056   E4           CLR       A
   \   000057   39           ADDC      A,R1
   \   000058   FD           MOV       R5,A
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   AA82         MOV       R2,DPL
   \   000060   AB83         MOV       R3,DPH
   \   000062   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3726          
   3727                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000065                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000065   7401         MOV       A,#0x1
   \   000067   12....       LCALL     ?XSTACK_DISP101_8
   \   00006A   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00006D   E9           MOV       A,R1
   \   00006E   6401         XRL       A,#0x1
   \   000070   7017         JNZ       ??ZDApp_AgeOutPendingBindEntry_3
   3728                  {
   3729                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000072   7402         MOV       A,#0x2
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E0           MOVX      A,@DPTR
   \   000078   64FE         XRL       A,#0xfe
   \   00007A   7003         JNZ       ??ZDApp_AgeOutPendingBindEntry_4
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F4           CPL       A
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   00007F   7008         JNZ       ??ZDApp_AgeOutPendingBindEntry_3
   3730                    {
   3731                      // Release the entry that contains an invalid NWK address
   3732                      AddrMgrEntryRelease( &entry );
   \   000081                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000081   7401         MOV       A,#0x1
   \   000083   12....       LCALL     ?XSTACK_DISP101_8
   \   000086   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3733                    }
   3734                  }
   3735          
   3736                  // Send the Bind Response with failure status
   3737                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3738                               &(ZDAppPendingBindReq[i].srcAddr),
   3739                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   000089   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00008C   F5..         MOV       ?V2,A
   \   00008E   78..         MOV       R0,#?V2
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000093   7401         MOV       A,#0x1
   \   000095   12....       LCALL     ?XSTACK_DISP100_8
   \   000098   88..         MOV       ?V2,R0
   \   00009A   89..         MOV       ?V3,R1
   \   00009C   78..         MOV       R0,#?V2
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   75..21       MOV       ?V2,#0x21
   \   0000A4   75..80       MOV       ?V3,#-0x80
   \   0000A7   78..         MOV       R0,#?V2
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000AF   5001         JNC       ??ZDApp_AgeOutPendingBindEntry_5
   \   0000B1   0B           INC       R3
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   0000B2   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000B5   7405         MOV       A,#0x5
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   3740          
   3741                  // Clear the record and set to default values
   3742                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000BA                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000BA   12....       LCALL     ?Subroutine26 & 0xFFFF
   3743                }
   3744              }
   \                     ??CrossCallReturnLabel_22:
   \   0000BD   05..         INC       ?V1
   \   0000BF   E5..         MOV       A,?V1
   \   0000C1   C3           CLR       C
   \   0000C2   9403         SUBB      A,#0x3
   \   0000C4   5003         JNC       $+5
   \   0000C6   02....       LJMP      ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3745            }
   3746          
   3747            if ( entryFound == FALSE )
   \   0000C9   E5..         MOV       A,?V0
   \   0000CB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CD   4009         JC        ??ZDApp_AgeOutPendingBindEntry_6
   3748            {
   3749              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000CF                ; Setup parameters for call to function osal_stop_timerEx
   \   0000CF   7A00         MOV       R2,#0x0
   \   0000D1   7B10         MOV       R3,#0x10
   \   0000D3   12....       LCALL     ?Subroutine28 & 0xFFFF
   3750            }
   \                     ??CrossCallReturnLabel_90:
   \   0000D6   8010         SJMP      ??ZDApp_AgeOutPendingBindEntry_7
   3751            else
   3752            {
   3753              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3754                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   90....       MOV       DPTR,#__Constant_3e8
   \   0000DB   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000DE   7A00         MOV       R2,#0x0
   \   0000E0   7B10         MOV       R3,#0x10
   \   0000E2   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   3755            }
   \                     ??CrossCallReturnLabel_85:
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
   3756          }
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000E8   740E         MOV       A,#0xe
   \   0000EA   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   3757          #endif
   3758          #endif
   3759          
   3760          /*********************************************************************
   3761           * @fn          ZDO_ChangeState
   3762           *
   3763           * @brief       Chance the device state
   3764           *
   3765           * @param       state - new state
   3766           *
   3767           * @return      none
   3768           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3769          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3770          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3771            if ( devState != state )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   6005         JZ        ??CrossCallReturnLabel_73
   3772            {
   3773              devState = state;
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
   3774              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   12....       LCALL     ?Subroutine19 & 0xFFFF
   3775            }
   3776          }
   \                     ??CrossCallReturnLabel_73:
   \   000013   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3777          
   3778          /*********************************************************************
   3779           * @fn      ZDApp_SetRejoinScanDuration()
   3780           *
   3781           * @brief   Sets scan duration for rejoin for an end device
   3782           *
   3783           * @param   rejoinScanDuration - milliseconds
   3784           *
   3785           * @return  none
   3786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3787          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3789            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine7
   \   000010                ; // Fall through to label ?Subroutine7
   3790          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?L_MOV_TO_X
   \   000005   80..         SJMP      ??Subroutine72_0
   3791          
   3792          /*********************************************************************
   3793           * @fn      ZDApp_SetRejoinBackoffDuration()
   3794           *
   3795           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3796           *
   3797           * @param   rejoinBackoffDuration - milliseconds
   3798           *
   3799           * @return  none
   3800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3801          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   3802          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3803            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP      ?Subroutine7
   3804          }
   3805          
   3806          /*********************************************************************
   3807           * @fn          ZDApp_SetParentAnnceTimer
   3808           *
   3809           * @brief       This function sets up the link status timer.
   3810           *
   3811           * @param       none
   3812           *
   3813           * @return      none
   3814           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3815          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   3816          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3817            // Parent Announce shall be sent no earlier than 10 seconds
   3818            uint32 timeout = 10000;
   3819          
   3820            // Add with jitter of up to 10 seconds
   3821            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   3822          
   3823            // Set timer to send the message
   3824            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   5410         ANL       A,#0x10
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   EB           MOV       A,R3
   \   00000E   5427         ANL       A,#0x27
   \   000010   F5..         MOV       ?V1,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   90....       MOV       DPTR,#__Constant_2710
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_ADD_X
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B40         MOV       R3,#0x40
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP      ?Subroutine9 & 0xFFFF
   3825          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   3826          
   3827          /*********************************************************************
   3828          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      0      0   ZDAppCheckForHoldKey
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     26   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     24   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     41   ZDApp_LeaveUpdate
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      0      0   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     31   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     24   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     29   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> osal_get_timeoutEx
      0     50   ZDApp_ProcessMsgCBs
        0     35   -> ZDApp_ProcessPendingBindReq
        0     35   -> ZDO_ParseAddrRsp
        0     35   -> ZDO_ParseBindUnbindReq
        0     35   -> ZDO_ProcessBindUnbindReq
        0     35   -> ZDO_UpdateAddrManager
        0     35   -> osal_mem_free
      0     29   ZDApp_ProcessNetworkJoin
        0     14   -> NLME_GetShortAddr
        0     14   -> NLME_NwkDiscTerm
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkInit
        0     14   -> ZDApp_ResetNwkKey
        0     14   -> ZDApp_ResetTimerStart
        0     14   -> ZDApp_RestoreNwkKey
        0     14   -> ZMacSetReq
        0     14   -> nwkNeighborInitTable
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     14   -> osal_stop_timerEx
      0     33   ZDApp_ProcessOSALMsg
        0     19   -> NLME_JoinRequest
        0     15   -> NLME_ReJoinRequest
        0     15   -> NLME_ReJoinRequestUnsecure
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_ChangeState
        0     15   -> ZDApp_NetworkInit
        0     15   -> ZDApp_NodeProfileSync
        0     15   -> ZDApp_NwkDescListProcessing
        0     15   -> ZDApp_ProcessMsgCBs
        0     15   -> ZDApp_ProcessNetworkJoin
        0     15   -> ZDApp_ProcessSecMsg
        0     15   -> ZDApp_RestoreNwkKey
        0     15   -> ZDP_IncomingData
        0     15   -> ZMacSetReq
        0     19   -> osal_nv_read
        0     15   -> osal_rand
        0     15   -> sAddrExtCpy
      0     56   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
      2     15   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     49   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     30   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     68   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      0      0   ZDApp_SaveNetworkStateEvt
      0     44   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     37   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     39   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     27   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     16   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     21   ZDOInitDevice
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_SecInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> osal_rand
        0     12   -> zgInitItems
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> ZDApp_ChangeState
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      0     14   ZDO_LeaveInd
        0     14   -> NLME_GetCoordShortAddr
        0     14   -> NLME_LeaveRsp
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     14   -> ZDApp_LeaveReset
        0     14   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0     12   ZDO_SyncIndicationCB
        0     12   -> ZDApp_SendMsg
        0     12   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devState>
       1  ?<Initializer for prevDevState>
       1  ?<Initializer for zdoDiscCounter>
       9  ??Subroutine50_0
      11  ??Subroutine51_0
       8  ??Subroutine52_0
       3  ??Subroutine53_0
       8  ??Subroutine54_0
       6  ??Subroutine55_0
       7  ??Subroutine56_0
       2  ??Subroutine57_0
       6  ??Subroutine58_0
       7  ??Subroutine59_0
       6  ??Subroutine60_0
       6  ??Subroutine61_0
       9  ??Subroutine62_0
       5  ??Subroutine63_0
       5  ??Subroutine64_0
       6  ??Subroutine65_0
       6  ??Subroutine66_0
       3  ??Subroutine67_0
       5  ??Subroutine68_0
       8  ??Subroutine69_0
       6  ??Subroutine70_0
       3  ??Subroutine71_0
       5  ??Subroutine72_0
       3  ?Subroutine0
       5  ?Subroutine1
      21  ?Subroutine10
      13  ?Subroutine11
       4  ?Subroutine12
       6  ?Subroutine13
      10  ?Subroutine14
       9  ?Subroutine15
      13  ?Subroutine16
       3  ?Subroutine17
       2  ?Subroutine18
       2  ?Subroutine19
       2  ?Subroutine2
      21  ?Subroutine20
       5  ?Subroutine21
       1  ?Subroutine22
      16  ?Subroutine23
       4  ?Subroutine24
       9  ?Subroutine25
      14  ?Subroutine26
       2  ?Subroutine27
       3  ?Subroutine28
       9  ?Subroutine29
       3  ?Subroutine3
      11  ?Subroutine30
      14  ?Subroutine31
      12  ?Subroutine32
      22  ?Subroutine33
      15  ?Subroutine34
       8  ?Subroutine35
      18  ?Subroutine36
       8  ?Subroutine37
      11  ?Subroutine38
       6  ?Subroutine39
      31  ?Subroutine4
      10  ?Subroutine40
       1  ?Subroutine41
       6  ?Subroutine42
      14  ?Subroutine43
      10  ?Subroutine44
       9  ?Subroutine45
       1  ?Subroutine46
       2  ?Subroutine47
      10  ?Subroutine48
      15  ?Subroutine49
       8  ?Subroutine5
       2  ?Subroutine6
       7  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
       3  AddrMgrWriteNVRequest
       1  MatchRsps
       3  ZDAppCheckForHoldKey
      82  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     237  ZDApp_AgeOutPendingBindEntry
     112  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      22  ZDApp_ChangeState
      10  ZDApp_CoordStartPANIDConflictCB
      48  ZDApp_DeviceAuthEvt
      85  ZDApp_DeviceConfigured
     115  ZDApp_ForceConcentratorChange
      55  ZDApp_GetEmptyPendingBindReq
      90  ZDApp_InMsgCB
      69  ZDApp_Init
      61  ZDApp_InitPendingBind
      89  ZDApp_InitUserDesc
      22  ZDApp_InitZdoCBFunc
      70  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      71  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      47  ZDApp_LeaveCtrlStartup
     121  ZDApp_LeaveReset
     116  ZDApp_LeaveUpdate
       3  ZDApp_NVUpdate
      11  ZDApp_NetworkDiscoveryReq
      41  ZDApp_NetworkInit
      97  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
     273  ZDApp_NwkDescListProcessing
      14  ZDApp_NwkStateUpdateCB
     151  ZDApp_ProcessMsgCBs
     492  ZDApp_ProcessNetworkJoin
     656  ZDApp_ProcessOSALMsg
     252  ZDApp_ProcessPendingBindReq
      72  ZDApp_ProcessSecEvent
      56  ZDApp_ProcessSecMsg
      23  ZDApp_ReadNetworkRestoreState
      31  ZDApp_RegisterCBs
      38  ZDApp_ResetNwkKey
      26  ZDApp_ResetTimerCancel
      31  ZDApp_ResetTimerStart
     204  ZDApp_RestoreNwkKey
       3  ZDApp_SaveNetworkStateEvt
      65  ZDApp_SaveNwkKey
       4  ZDApp_SavedPollRate
     134  ZDApp_SecInit
      15  ZDApp_SendEventMsg
      90  ZDApp_SendMsg
     114  ZDApp_SendParentAnnce
      51  ZDApp_SetParentAnnceTimer
      32  ZDApp_SetPendingBindDefault
      18  ZDApp_SetRejoinBackoffDuration
      16  ZDApp_SetRejoinScanDuration
      39  ZDApp_StartJoiningCycle
      36  ZDApp_StopJoiningCycle
       6  ZDApp_epDesc
     252  ZDApp_event_loop
     114  ZDOInitDevice
      96  ZDO_AddrChangeIndicationCB
      45  ZDO_ConcentratorIndicationCB
      23  ZDO_DeregisterForZdoCB
     205  ZDO_JoinConfirmCB
     184  ZDO_JoinIndicationCB
      59  ZDO_LeaveCnf
     181  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      59  ZDO_NetworkDiscoveryConfirmCB
      28  ZDO_NetworkFormationConfirmCB
      10  ZDO_NetworkStatusCB
      37  ZDO_PermitJoinCB
       3  ZDO_PollConfirmCB
      27  ZDO_RegisterForZdoCB
      51  ZDO_SrcRtgIndCB
      28  ZDO_StartRouterConfirmCB
      64  ZDO_SyncIndicationCB
       5  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     615  ZDO_beaconNotifyIndCB
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter
     462  -- Other

 
 7 394 bytes in segment BANKED_CODE
   462 bytes in segment BANK_RELAYS
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    24 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
   476 bytes of CODE     memory
     0 bytes of CONST    memory (+ 24 bytes shared)
 7 394 bytes of HUGECODE memory
    79 bytes of XDATA    memory

Errors: none
Warnings: none
