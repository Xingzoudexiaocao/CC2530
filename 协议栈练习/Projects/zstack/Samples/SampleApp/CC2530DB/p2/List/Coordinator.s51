///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        25/Dec/2017  21:07:51 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\yzk\Desktop\实训10                       /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\Source\Coordinator.c                     /
//    Command line       =  -f "C:\Users\yzk\Desktop\实训10                   /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoor /
//                          d.cfg" (-DCPU32MHZ -DROOT=__near_func             /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Users\yzk\Desktop\实训10                   /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf /
//                          ig.cfg" (-DZIGBEEPRO -DSECURE=0                   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\yzk\Desktop\实训 /
//                          10 基于Z-Stack的点对点通信\Projects\zstack\Sample /
//                          s\SampleApp\Source\Coordinator.c" -D ZTOOL_P1 -D  /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "C:\Users\yzk\Desktop\实训10                      /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\p2\List\" -lA                   /
//                          "C:\Users\yzk\Desktop\实训10                      /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\p2\List\" --diag_suppress       /
//                          Pe001,Pa010 -o "C:\Users\yzk\Desktop\实训10       /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\p2\Obj\" -e --no_code_motion    /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "C:\Users\yzk\Desktop\实训10                   /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\" -I "C:\Users\yzk\Desktop\实训 /
//                          10 基于Z-Stack的点对点通信\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\Source\" -I               /
//                          "C:\Users\yzk\Desktop\实训10                      /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I    /
//                          "C:\Users\yzk\Desktop\实训10                      /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\hal\i /
//                          nclude\" -I "C:\Users\yzk\Desktop\实训10          /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\hal\t /
//                          arget\CC2530EB\" -I "C:\Users\yzk\Desktop\实训10  /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\mac\i /
//                          nclude\" -I "C:\Users\yzk\Desktop\实训10          /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\mac\h /
//                          igh_level\" -I "C:\Users\yzk\Desktop\实训10       /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf04\" -I "C:\Users\yzk\Desktop\实训10  /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\mac\l /
//                          ow_level\srf04\single_chip\" -I                   /
//                          "C:\Users\yzk\Desktop\实训10                      /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\mt\"  /
//                          -I "C:\Users\yzk\Desktop\实训10                   /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\osal\ /
//                          include\" -I "C:\Users\yzk\Desktop\实训10         /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\servi /
//                          ces\saddr\" -I "C:\Users\yzk\Desktop\实训10       /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\servi /
//                          ces\sdata\" -I "C:\Users\yzk\Desktop\实训10       /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \af\" -I "C:\Users\yzk\Desktop\实训10             /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \nwk\" -I "C:\Users\yzk\Desktop\实训10            /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \sapi\" -I "C:\Users\yzk\Desktop\实训10           /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \sec\" -I "C:\Users\yzk\Desktop\实训10            /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \sys\" -I "C:\Users\yzk\Desktop\实训10            /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \zdo\" -I "C:\Users\yzk\Desktop\实训10            /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\zmac\ /
//                          " -I "C:\Users\yzk\Desktop\实训10                 /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\zmac\ /
//                          f8w\" -Ohz --require_prototypes                   /
//    List file          =  C:\Users\yzk\Desktop\实训10                       /
//                          基于Z-Stack的点对点通信\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\p2\List\Coordinator.s51         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_memcpy         SYMBOL "osal_memcpy"
HalLedBlink         SYMBOL "HalLedBlink"
HalLedSet           SYMBOL "HalLedSet"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H

// C:\Users\yzk\Desktop\实训10 基于Z-Stack的点对点通信\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
//    1 #include "OSAL.h"
//    2 #include "ZGlobals.h"
//    3 #include "AF.h"
//    4 #include "ZDApp.h"
//    5 
//    6 #include "Coordinator.h"
//    7 
//    8 #include "OnBoard.h"
//    9 #include "hal_lcd.h"
//   10 #include "hal_led.h"
//   11 #include "hal_key.h"
//   12 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   13 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 0
//   14 {
//   15   SAMPLEAPP_PERIODIC_CLUSTERID
//   16 };
//   17 //用来描述一个ZigBee设备节点，称为简单设备描述符

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   18 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 0
        DATA16
        DW 0H
//   19 {
//   20   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   21   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   22   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   23   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   24   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   25   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   26   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   27   0,           
//   28   (cId_t *)NULL    
//   29 };
//   30 // This is the Endpoint/Interface description.  It is defined here, but
//   31 // filled-in in SampleApp_Init().  Another way to go would be to fill
//   32 // in the structure here and make it a "const" (in code space).  The
//   33 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   34 endPointDesc_t SampleApp_epDesc;  //节点描述符
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   35 uint8 SampleApp_TaskID;           //任务优先级
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   36 uint8 SampleApp_TransID;          //数据发送序列号
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   37 /*********************************************************************
//   38  * LOCAL FUNCTIONS
//   39  */
//   40 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );//声明消息处理函数
//   41 /*********************************************************************
//   42  * NETWORK LAYER CALLBACKS
//   43  */
//   44 
//   45 /*********************************************************************
//   46  * PUBLIC FUNCTIONS
//   47  */
//   48 
//   49 /*********************************************************************
//   50  * @fn      SampleApp_Init
//   51  *
//   52  * @brief   Initialization function for the Generic App Task.
//   53  *          This is called during initialization and should contain
//   54  *          any application specific initialization (ie. hardware
//   55  *          initialization/setup, table initialization, power up
//   56  *          notificaiton ... ).
//   57  *
//   58  * @param   task_id - the ID assigned by OSAL.  This ID should be
//   59  *                    used to send messages and set timers.
//   60  *
//   61  * @return  none
//   62  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   63 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//   64 {
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   65   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//   66   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//   67   
//   68   // Fill out the endpoint description.
//   69   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//   70   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//   71   SampleApp_epDesc.simpleDesc
//   72             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//   73   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   74 
//   75   // Register the endpoint description with the AF
//   76   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//   77 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   78 /*********************************************************************
//   79  * @fn      SampleApp_ProcessEvent
//   80  *
//   81  * @brief   Generic Application Task event processor.  This function
//   82  *          is called to process all events for the task.  Events
//   83  *          include timers, messages and any other user defined events.
//   84  *
//   85  * @param   task_id  - The OSAL assigned task ID.
//   86  * @param   events - events to process.  This is a bit map and can
//   87  *                   contain more than one event.
//   88  *
//   89  * @return  none
//   90  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   91 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//   92 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   93   afIncomingMSGPacket_t *MSGpkt;
//   94 
//   95   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//   96   {
//   97     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//   98     while ( MSGpkt )
//   99     {
//  100       switch ( MSGpkt->hdr.event )
??SampleApp_ProcessEvent_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1a
        JNZ     ??SampleApp_ProcessEvent_3
//  101       {
//  102         // Received when a messages is received (OTA) for this endpoint
//  103         case AF_INCOMING_MSG_CMD:
//  104           SampleApp_MessageMSGCB( MSGpkt );
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??SampleApp_MessageMSGCB?relay
//  105           break;
//  106 
//  107         default:
//  108           break;
//  109       }
//  110 
//  111       // Release the memory
//  112       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  113 
//  114       // Next - if one is available
//  115       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  116     }
        MOV     A,R6
        ORL     A,R7
        JNZ     ??SampleApp_ProcessEvent_2
//  117 
//  118     // return unprocessed events
//  119     return (events ^ SYS_EVENT_MSG);
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_4
//  120   }
//  121   // Discard unknown events
//  122   return 0;
??SampleApp_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_4:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  123 }
//  124 /*********************************************************************
//  125  * LOCAL FUNCTIONS
//  126  */
//  127 
//  128 /*********************************************************************
//  129  * @fn      SampleApp_MessageMSGCB
//  130  *
//  131  * @brief   Data message processor callback.  This function processes
//  132  *          any incoming data - probably from other devices.  So, based
//  133  *          on cluster ID, perform the intended action.
//  134  *
//  135  * @param   none
//  136  *
//  137  * @return  none
//  138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  140 {
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  141   unsigned char buffer[6]=" ";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant " ">` >> 8) & 0xff
        MOV     DPL,#`?<Constant " ">` & 0xff
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  142 
//  143   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JNZ     ??SampleApp_MessageMSGCB_1
//  144   {
//  145     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  146       osal_memcpy(buffer,pkt->cmd.Data,6);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  147       if((buffer[0]=='L')||(buffer[1]=='E')||(buffer[2]=='D'))
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x4c
        JZ      ??SampleApp_MessageMSGCB_2
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x45
        JZ      ??SampleApp_MessageMSGCB_2
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x44
        JNZ     ??SampleApp_MessageMSGCB_3
//  148       {
//  149         HalLedBlink( HAL_LED_2, 0, 50, 500 );
??SampleApp_MessageMSGCB_2:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
        SJMP    ??SampleApp_MessageMSGCB_1
//  150       }
//  151       else
//  152       {
//  153        HalLedSet( HAL_LED_2,HAL_LED_MODE_ON);         
??SampleApp_MessageMSGCB_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  154       }
//  155       break;
//  156       
//  157   default:
//  158     break;
//  159   }
//  160 }
??SampleApp_MessageMSGCB_1:
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " ">`:
        DB " "
        DB 0, 0, 0, 0

        END
// 
// 286 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//  22 bytes in segment XDATA_ROM_C
//   8 bytes in segment XDATA_Z
// 
// 304 bytes of CODE  memory
//  22 bytes of CONST memory
//   8 bytes of XDATA memory
//
//Errors: none
//Warnings: none
