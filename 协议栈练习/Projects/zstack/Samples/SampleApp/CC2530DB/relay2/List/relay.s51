///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        05/Jan/2018  15:03:06 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\Source\relay.c                   /
//    Command line       =  -f C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC253 /
//                          0DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func   /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\yzk\Desktop\–≠“È’ /
//                          ª¡∑œ∞\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg             /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0x0001                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\yzk\Desktop\–≠“È’ /
//                          ª¡∑œ∞\Projects\zstack\Samples\SampleApp\Source\re /
//                          lay.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D  /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D HAL_UART=TRUE -lC          /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\relay2\List\ -lA        /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\relay2\List\            /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\relay2\Obj\ -e          /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\ -I                     /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\Source\ -I           /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB /
//                          \ -I C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\hal\include\ -I                           /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\hal\target\CC2530EB\ -I                        /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\include\ -I C:\Users\yzk\Desktop\–≠“È’ª¡∑œ /
//                          ∞\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\mac\high_level\ -I          /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\low_level\srf04\ -I                        /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mac\low_level\srf04\single_chip\ -I            /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\mt\ -I C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Project /
//                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. /
//                          .\Components\osal\include\ -I                     /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\services\saddr\ -I C:\Users\yzk\Desktop\–≠“È’ª /
//                          ¡∑œ∞\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\..\..\Components\services\sdata\ -I       /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\af\ -I C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\P /
//                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\nwk\ -I                  /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sapi\ -I C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞ /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sec\ -I                /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sys\ -I C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\ /
//                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ /
//                          ..\..\..\Components\stack\zdo\ -I                 /
//                          C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\zmac\ -I C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\Components\zmac\f8w\ -Ohz                     /
//                          --require_prototypes                              /
//    List file          =  C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\relay2\List\relay.s51   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME relay

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??NewProcessAPP_MessageMSGCB?relay
        FUNCTION ??NewProcessAPP_MessageMSGCB?relay,0203H
        PUBLIC ??NewProcessApp_Init?relay
        FUNCTION ??NewProcessApp_Init?relay,0203H
        PUBLIC ??NewProcessApp_ProcessEvent?relay
        FUNCTION ??NewProcessApp_ProcessEvent?relay,0203H
        PUBLIC ??relay_scan?relay
        FUNCTION ??relay_scan?relay,0203H
        PUBLIC NewProcessAPP_ClusterList
        PUBLIC NewProcessAPP_MessageMSGCB
        FUNCTION NewProcessAPP_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC NewProcessAPP_NwkState
        PUBLIC NewProcessAPP_SimpleDesc
        PUBLIC NewProcessAPP_TaskID
        PUBLIC NewProcessAPP_TransID
        PUBLIC NewProcessAPP_epDesc
        PUBLIC NewProcessApp_Init
        FUNCTION NewProcessApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC NewProcessApp_ProcessEvent
        FUNCTION NewProcessApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK P2DIR
        PUBWEAK P2SEL
        PUBWEAK _A_P2
        PUBLIC relay_scan
        FUNCTION relay_scan,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
HalUARTOpen         SYMBOL "HalUARTOpen"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_memcpy         SYMBOL "osal_memcpy"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalLedBlink         SYMBOL "HalLedBlink"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
NewProcessAPP_MessageMSGCB SYMBOL "NewProcessAPP_MessageMSGCB"
??NewProcessAPP_MessageMSGCB?relay SYMBOL "?relay", NewProcessAPP_MessageMSGCB
NewProcessApp_Init  SYMBOL "NewProcessApp_Init"
??NewProcessApp_Init?relay SYMBOL "?relay", NewProcessApp_Init
NewProcessApp_ProcessEvent SYMBOL "NewProcessApp_ProcessEvent"
??NewProcessApp_ProcessEvent?relay SYMBOL "?relay", NewProcessApp_ProcessEvent
relay_scan          SYMBOL "relay_scan"
??relay_scan?relay  SYMBOL "?relay", relay_scan

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H

// C:\Users\yzk\Desktop\–≠“È’ª¡∑œ∞\Projects\zstack\Samples\SampleApp\Source\relay.c
//    1 #include "OSAL.h"
//    2 #include "ZGlobals.h"
//    3 #include "AF.h"
//    4 #include "ZDApp.h"
//    5 
//    6 #include "NewProcessApp.h"
//    7 
//    8 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    9 #include "hal_lcd.h"
//   10 #include "hal_led.h"
//   11 #include "hal_key.h"
//   12 #include "hal_uart.h"
//   13 #include "get_adc.h"
//   14 #include "iocc2530.h"
//   15 // This list should be filled with Application specific Cluster IDs.
//   16 
//   17 //#define SEND_DATA_EVENT  0X01//ÃÌº”∂® ± ± ¬º˛
//   18 #define relay (P2_0) //ºÃµÁ∆˜∂®“Â

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   19 const cId_t NewProcessAPP_ClusterList[NEWPROCESSAPP_MAX_CLUSTERS] =
NewProcessAPP_ClusterList:
        DATA16
        DW 1
        DW 0
//   20 {
//   21   NEWPROCESSAPP_PERIODIC_CLUSTERID
//   22 };
//   23 //”√¿¥√Ë ˆ“ª∏ˆZigBee…Ë±∏Ω⁄µ„£¨≥∆Œ™ºÚµ•…Ë±∏√Ë ˆ∑˚
//   24 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   25 const SimpleDescriptionFormat_t NewProcessAPP_SimpleDesc =
NewProcessAPP_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW NewProcessAPP_ClusterList
        DATA8
        DB 0
        DATA16
        DW 0H
//   26 {
//   27   NEWPROCESSAPP_ENDPOINT,              //  int Endpoint;
//   28   NEWPROCESSAPP_PROFID,                //  uint16 AppProfId[2];
//   29   NEWPROCESSAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   30   NEWPROCESSAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   31   NEWPROCESSAPP_FLAGS,                 //  int   AppFlags:4;
//   32   NEWPROCESSAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   33   (cId_t *)NewProcessAPP_ClusterList,  //  uint8 *pAppInClusterList;
//   34   0,           
//   35   (cId_t *)NULL    
//   36 };
//   37 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   38 endPointDesc_t NewProcessAPP_epDesc;  //Ω⁄µ„√Ë ˆ∑˚
NewProcessAPP_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   39 uint8 NewProcessAPP_TaskID;           //»ŒŒÒ”≈œ»º∂
NewProcessAPP_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   40 uint8 NewProcessAPP_TransID;          // ˝æ›∑¢ÀÕ–Ú¡–∫≈
NewProcessAPP_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 devStates_t NewProcessAPP_NwkState;   //***//±£¥ÊΩ⁄µ„◊¥Ã¨µƒ±‰¡ø
NewProcessAPP_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   42 
//   43 
//   44 //******************************************************************************
//   45 void NewProcessAPP_MessageMSGCB( afIncomingMSGPacket_t *pckt );//…˘√˜œ˚œ¢¥¶¿Ì∫Ø ˝
//   46 //void NewProcessAPP_SendTheMessage( void );                     // ˝æ›∑¢ÀÕ∫Ø ˝
//   47 void relay_scan(uint8 *buffer);
//   48 //******************************************************************************
//   49 
//   50 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   51 void NewProcessApp_Init( uint8 task_id )//»ŒŒÒ≥ı ºªØ∫Ø ˝
NewProcessApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function NewProcessApp_Init
        CODE
//   52 {
        FUNCALL NewProcessApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NewProcessApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
//   53   halUARTCfg_t uartConfig;   
//   54   //hal_adc_Init();                                 //adc≤…ºØ≥ı ºªØ
//   55   NewProcessAPP_TaskID           = task_id;       //≥ı ºªØ»ŒŒÒ”≈œ»º∂
        MOV     DPTR,#NewProcessAPP_TaskID
        MOVX    @DPTR,A
//   56   NewProcessAPP_NwkState         = DEV_INIT;      //**Ω´…Ë±∏◊¥Ã¨≥ı ºªØŒ™DEV_INIT£¨±Ì æΩ⁄µ„√ª¡¨Ω”µΩÕ¯¬Á
        MOV     DPTR,#NewProcessAPP_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//   57   NewProcessAPP_TransID          = 0;             //Ω´∑¢ÀÕ ˝æ›∞¸–Ú∫≈≥ı ºªØŒ™0
        MOV     DPTR,#NewProcessAPP_TransID
        CLR     A
        MOVX    @DPTR,A
//   58   
//   59   NewProcessAPP_epDesc.endPoint  = NEWPROCESSAPP_ENDPOINT;//∂‘Ω⁄µ„√Ë ˆ∑˚Ω¯––≥ı ºªØ
        MOV     DPTR,#NewProcessAPP_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//   60   NewProcessAPP_epDesc.task_id   = &NewProcessAPP_TaskID;
        INC     DPTR
        MOV     A,#NewProcessAPP_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(NewProcessAPP_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//   61   NewProcessAPP_epDesc.simpleDesc
//   62             = (SimpleDescriptionFormat_t *)&NewProcessAPP_SimpleDesc;
        INC     DPTR
        MOV     A,#NewProcessAPP_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(NewProcessAPP_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//   63   NewProcessAPP_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   64 
//   65   // π”√afRegister∫Ø ˝Ω´Ω⁄µ„√Ë ˆ∑˚Ω¯––◊¢≤·≤≈ø…“‘ π”√OSAL∑˛ŒÒ
//   66   afRegister( &NewProcessAPP_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#NewProcessAPP_epDesc & 0xff
        MOV     R3,#(NewProcessAPP_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//   67    //*********************uart≈‰÷√±Ì********************//  
//   68   uartConfig.configured           = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//   69   uartConfig.baudRate             = HAL_UART_BR_115200;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//   70   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   71   uartConfig.callBackFunc         = NULL;//Œﬁ–Ëªÿµ˜∫Ø ˝
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   72   HalUARTOpen(0,&uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,A
        LCALL   ??HalUARTOpen?relay
//   73   P2SEL &=~0X01;
        ANL     0xf5,#0xfe
//   74   P2DIR |=0X01;
        ORL     0xff,#0x1
//   75   relay=0;
        CLR     0xa0.0
//   76 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE _A_P2
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   77 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   78 uint16 NewProcessApp_ProcessEvent(uint8 task_id,uint16 events)//œ˚œ¢¥¶¿Ì∫Ø ˝
NewProcessApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function NewProcessApp_ProcessEvent
        CODE
//   79 {
        FUNCALL NewProcessApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NewProcessApp_ProcessEvent, NewProcessAPP_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NewProcessApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NewProcessApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   80 
//   81   afIncomingMSGPacket_t *MSGpkt;//∂®“Â“ª∏ˆ÷∏œÚΩ” ’œ˚œ¢Ω·ππÃÂµƒ÷∏’ÎMSGpkt
//   82    
//   83    if( events & SYS_EVENT_MSG)
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??NewProcessApp_ProcessEvent_0
//   84    {   // π”√osal_msg_receive∫Ø ˝¥”œ˚œ¢∂”¡–…œΩ” ’œ˚œ¢£¨∏√œ˚œ¢÷–∞¸∫¨Ω” ’µΩŒﬁœﬂ ˝æ›∞¸
//   85        //£®◊º»∑Àµ «∞¸∫¨¡À÷∏œÚΩ” ’µΩµƒŒﬁœﬂ ˝æ›∞¸µƒ÷∏’Î£©
//   86       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(NewProcessAPP_TaskID);
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??NewProcessApp_ProcessEvent_1
//   87       while( MSGpkt)
//   88       {
//   89         switch(MSGpkt->hdr.event)
//   90         {
//   91            case ZDO_STATE_CHANGE: //**∂‘Ω” ’µΩµƒœ˚œ¢Ω¯––≈–∂œ,»Áπ˚ «‘Úµ˜”√œ¬¡–∫Ø ˝¥¶¿Ì
//   92 	NewProcessAPP_NwkState = (devStates_t)(MSGpkt->hdr.status);//**∂¡»°Ω⁄µ„…Ë±∏¿‡–Õ
//   93 	if(NewProcessAPP_NwkState == DEV_END_DEVICE)
//   94 	{ //**∂‘Ω⁄µ„…Ë±∏¿‡–ÕΩ¯––≈–∂œ£¨»Áπ˚ «÷’∂ÀΩ⁄µ„DEV_END_DEVICE÷¥––œ¬“ª≤Ω 
//   95 	//   osal_set_event(NewProcessAPP_TaskID,SEND_DATA_EVENT);//*
//   96 	   
//   97 	}
//   98 	
//   99 	break;
//  100 	case AF_INCOMING_MSG_CMD: //∂‘Ω” ’µΩµƒœ˚œ¢Ω¯––≈–∂œ,»Áπ˚ «Œﬁœﬂ–≈∫≈‘Úµ˜”√œ¬¡–∫Ø ˝¥¶¿Ì
//  101 	NewProcessAPP_MessageMSGCB(MSGpkt);//…˘√˜œ˚œ¢¥¶¿Ì∫Ø ˝
??NewProcessApp_ProcessEvent_2:
        ; Setup parameters for call to function NewProcessAPP_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??NewProcessAPP_MessageMSGCB?relay
//  102 	break;
//  103         default:    //µ±À˘”–case x:∂º≤ª÷¥–– ±÷¥––default£∫
//  104           break;
//  105         }
//  106         osal_msg_deallocate((uint8 *)MSGpkt);//Ω” ’œ˚œ¢¥¶¿ÌÕÍ≥…£¨ Õ∑≈œ˚œ¢À˘’º”√¥Ê¥¢ø’º‰
??NewProcessApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  107         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( NewProcessAPP_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??NewProcessApp_ProcessEvent_1:
        MOV     DPTR,#NewProcessAPP_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??NewProcessApp_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??NewProcessApp_ProcessEvent_2
        ADD     A,#0x49
        JNZ     ??NewProcessApp_ProcessEvent_3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#NewProcessAPP_NwkState
        MOVX    @DPTR,A
        SJMP    ??NewProcessApp_ProcessEvent_3
//  108         //¥¶¿ÌÕÍ≥…∫Û£¨‘Ÿ π”√osal_msg_receive∫Ø ˝¥”œ˚œ¢∂”¡–…œΩ” ’œ˚œ¢
//  109       }
//  110       return (events ^ SYS_EVENT_MSG);
??NewProcessApp_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??NewProcessApp_ProcessEvent_5
//  111    }
//  112 //   if(events & SEND_DATA_EVENT)  //*
//  113 //   {
//  114 //      NewProcessAPP_SendTheMessage();//**…˘√˜œ˚œ¢¥¶¿Ì∫Ø ˝
//  115 //      osal_start_timerEx(NewProcessAPP_TaskID,SEND_DATA_EVENT,2000);
//  116 //      return (events ^ SEND_DATA_EVENT);//*
//  117 //   }
//  118    return 0;
??NewProcessApp_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??NewProcessApp_ProcessEvent_5:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  119 }
//  120 //void NewProcessAPP_SendTheMessage(void)//Œﬁœﬂ∑¢ÀÕ∫Ø ˝
//  121 //{  
//  122 //   uint8 state=0;       //◊¥Ã¨±‰¡ø
//  123 //   uint16 chk=0XFF;
//  124 //   unsigned char theMessageData[5] = "     ";
//  125 //   state=get_swsensor();
//  126 //   
//  127 //   if(state==1)
//  128 //   {
//  129 //     theMessageData[3]=0XFF;
//  130 //   }
//  131 //   else if(state==0)
//  132 //   {
//  133 //     theMessageData[3]=0X00;
//  134 //   }
//  135 //   
//  136 //      theMessageData[0]=0XFE;
//  137 //      theMessageData[1]=0X0E;
//  138 //      theMessageData[2]=0X02;
//  139 //      chk=0X0E+0X02+theMessageData[3];
//  140 //      theMessageData[4]=(chk<<8)>>8;
//  141 //      
//  142 //   afAddrType_t my_DstAddr;
//  143 //   my_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//≥ı ºªØŒ™µ•≤•
//  144 //   my_DstAddr.endPoint = NEWPROCESSAPP_ENDPOINT;//≥ı ºªØ∂Àø⁄∫≈
//  145 //   my_DstAddr.addr.shortAddr = 0x0000;//–≠µ˜∆˜µÿ÷∑£¨œÚ–≠µ˜∆˜∑¢ÀÕ ˝æ›
//  146 //   
//  147 //   AF_DataRequest(&my_DstAddr,//∞¸∫¨¡ÀƒøµƒΩ⁄µ„µƒÕ¯¬Áµÿ÷∑º∞∑¢ÀÕ ˝æ›∏Ò Ω£¨»Áπ„≤•£¨µ•≤•£¨∂‡≤•
//  148 //	     &NewProcessAPP_epDesc,//÷∏∂®Ω⁄µ„µƒ∑¢ÀÕ∂Àø⁄∫≈
//  149 //	     NEWPROCESSAPP_PERIODIC_CLUSTERID,//√¸¡Ó∫≈
//  150 //	     5,//∑¢ÀÕ ˝æ›¥Û–°
//  151 //	     theMessageData,// ˝æ›ª∫¥Ê
//  152 //	     &NewProcessAPP_TransID,//÷∏œÚ∑¢ÀÕ÷∏’Î£¨√ø∑¢ÀÕ“ª¥Œº”“ª
//  153 //	     AF_DISCV_ROUTE, 
//  154 //	     AF_DEFAULT_RADIUS);
//  155 //                  HalLedBlink(HAL_LED_1,3,50,50);
//  156 //                 //HalLedBlink(HAL_LED_2,0,50,500);
//  157 //	     
//  158 //}
//  159 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  160 void NewProcessAPP_MessageMSGCB( afIncomingMSGPacket_t *pkt )
NewProcessAPP_MessageMSGCB:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function NewProcessAPP_MessageMSGCB
        CODE
//  161 {
        FUNCALL NewProcessAPP_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NewProcessAPP_MessageMSGCB, relay_scan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  162    unsigned char buffer[6] = "   ";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "   ">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "   ">` & 0xff
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  163    //uint16 chk;
//  164    switch( pkt->clusterId)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??NewProcessAPP_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??NewProcessAPP_MessageMSGCB_0:
        JNZ     ??NewProcessAPP_MessageMSGCB_1
//  165    { 
//  166      case NEWPROCESSAPP_PERIODIC_CLUSTERID:
//  167        osal_memcpy(buffer,pkt->cmd.Data,5);//Ω´ ’µΩµƒ ˝æ›øΩ±¥µΩbuffer÷–
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  168        relay_scan(buffer);
        ; Setup parameters for call to function relay_scan
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??relay_scan?relay
//  169        break;
//  170          
//  171   default:
//  172     break;
//  173    }
//  174 }
??NewProcessAPP_MessageMSGCB_1:
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 void relay_scan(uint8 *buffer)
relay_scan:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function relay_scan
        CODE
//  176 {
        FUNCALL relay_scan, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL relay_scan, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL relay_scan, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  177     HalUARTWrite(0,buffer,5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  178 #if defined (RELAY1 )   
//  179     if((buffer[0]==0XFE)&&(buffer[1]==0X0E)&&(buffer[2]==0X03)&&(buffer[3]==0X11)&&(buffer[4]==0x22))
//  180       {
//  181         HalLedBlink( HAL_LED_1, 1, 50, 50 );
//  182         //HalUARTWrite(0,"yes",3);
//  183         relay=1;
//  184       }
//  185     if((buffer[0]==0XFE)&&(buffer[1]==0X0E)&&(buffer[2]==0X03)&&(buffer[3]==0X22)&&(buffer[4]==0x33))
//  186       {
//  187         HalLedBlink( HAL_LED_2, 1, 50, 50 );
//  188         //HalUARTWrite(0,"no",2);
//  189         relay=0;
//  190       }
//  191 #endif
//  192       if((buffer[0]==0XFE)&&(buffer[1]==0X0E)&&(buffer[2]==0X04)&&(buffer[3]==0X11)&&(buffer[4]==0x23))
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??relay_scan_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xe
        JNZ     ??relay_scan_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??relay_scan_2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x11
        JNZ     ??relay_scan_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x23
        JNZ     ??relay_scan_4
//  193       {
//  194         HalLedBlink( HAL_LED_1, 1, 50, 50 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x32
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  195         //HalUARTWrite(0,"yes",3);
//  196         relay=1;
        SETB    0xa0.0
//  197       }
//  198     if((buffer[0]==0XFE)&&(buffer[1]==0X0E)&&(buffer[2]==0X04)&&(buffer[3]==0X22)&&(buffer[4]==0x34))
??relay_scan_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??relay_scan_4
??relay_scan_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xe
        JNZ     ??relay_scan_4
??relay_scan_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??relay_scan_4
??relay_scan_3:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x22
        JNZ     ??relay_scan_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??relay_scan_4
//  199       {
//  200         HalLedBlink( HAL_LED_2, 1, 50, 50 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x32
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedBlink?relay
//  201         //HalUARTWrite(0,"no",2);
//  202         relay=0;
        CLR     0xa0.0
//  203       }
//  204 }
??relay_scan_4:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock4
        REQUIRE _A_P2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NewProcessApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NewProcessApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NewProcessApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NewProcessApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NewProcessAPP_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NewProcessAPP_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??relay_scan?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    relay_scan

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "   ">`:
        DB "   "
        DB 0, 0

        END
// 
// 484 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//  22 bytes in segment XDATA_ROM_C
//   9 bytes in segment XDATA_Z
// 
// 508 bytes of CODE  memory
//  22 bytes of CONST memory
//   0 bytes of DATA  memory (+ 3 bytes shared)
//   9 bytes of XDATA memory
//
//Errors: none
//Warnings: none
