///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        10/Jan/2014  18:29:08 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\Source\LightLevel-End /
//                          Deviece.c                                         /
//    Command line       =  -f F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\ /
//                          Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ           /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\Too /
//                          ls\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO            /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\2014-1-10–≠“È’ª\ZStack- /
//                          CC2530-2.5.1a\Projects\zstack\Samples\Œﬁœﬂπ‚√Ù µ— /
//                          È\Source\LightLevel-EndDeviece.c -D               /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\EndDeviceEB\ /
//                          List\ -lA F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a /
//                          \Projects\zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\En /
//                          dDeviceEB\List\ --diag_suppress Pe001,Pa010 -o    /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\EndDeviceEB\ /
//                          Obj\ -e --no_code_motion --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\ -I          /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\Source\   /
//                          -I F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\ /
//                          ZMain\TI2530DB\ -I F:\2014-1-10–≠“È’ª\ZStack-CC25 /
//                          30-2.5.1a\Projects\zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC /
//                          2530DB\..\..\..\..\..\Components\hal\include\ -I  /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\hal\target\CC2530EB\ -I             /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\mac\include\ -I                     /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\mac\high_level\ -I                  /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf04\ -I             /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\mac\low_level\srf04\single_chip\    /
//                          -I F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\ /
//                          ..\..\Components\mt\ -I                           /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\osal\include\ -I                    /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\services\saddr\ -I                  /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\services\sdata\ -I                  /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\af\ -I                        /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\nwk\ -I                       /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\sapi\ -I                      /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\sec\ -I                       /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\sys\ -I                       /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\stack\zdo\ -I                       /
//                          F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\..\..\..\..\ /
//                          ..\Components\zmac\ -I F:\2014-1-10–≠“È’ª\ZStack- /
//                          CC2530-2.5.1a\Projects\zstack\Samples\Œﬁœﬂπ‚√Ù µ— /
//                          È\CC2530DB\..\..\..\..\..\Components\zmac\f8w\    /
//                          -Ohz --require_prototypes                         /
//    List file          =  F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\CC2530DB\EndDeviceEB\ /
//                          List\LightLevel-EndDeviece.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `LightLevel-EndDeviece`

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        PUBLIC ??myApp_ReadLightLevel?relay
        FUNCTION ??myApp_ReadLightLevel?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_DstAddr
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBLIC myApp_ReadLightLevel
        FUNCTION myApp_ReadLightLevel,0203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
HalLedSet           SYMBOL "HalLedSet"
osal_mem_free       SYMBOL "osal_mem_free"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
myApp_ReadLightLevel SYMBOL "myApp_ReadLightLevel"
??myApp_ReadLightLevel?relay SYMBOL "?relay", myApp_ReadLightLevel

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// F:\2014-1-10–≠“È’ª\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Œﬁœﬂπ‚√Ù µ—È\Source\LightLevel-EndDeviece.c
//    1 /******************************************************************************
//    2   Filename:       GenericApp.c
//    3   Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
//    4   Revision:       $Revision: 29656 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 5 seconds.  The application will also
//   46   receives "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 
//   69 #include "GenericApp.h"
//   70 #include "DebugTrace.h"
//   71 
//   72 #if !defined( WIN32 )
//   73   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1
//   74 #endif
//   75 
//   76 /* HAL */
//   77 #include "hal_lcd.h"
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_uart.h"
//   81 
//   82 /* RTOS */
//   83 #if defined( IAR_ARMCM3_LM )
//   84 #include "RTOS_App.h"
//   85 #endif  
//   86 
//   87 /*********************************************************************
//   88  * MACROS
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * CONSTANTS
//   93  */
//   94 
//   95 /*********************************************************************
//   96  * TYPEDEFS
//   97  */
//   98 
//   99 /*********************************************************************
//  100  * GLOBAL VARIABLES
//  101  */
//  102 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  103 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//  104 {
//  105   GENERICAPP_CLUSTERID
//  106 };
//  107 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  108 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//  109 {
//  110   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  111   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  112   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  113   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  114   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  115   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  116   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//  117   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  118   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  119 };
//  120 
//  121 // This is the Endpoint/Interface description.  It is defined here, but
//  122 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  123 // in the structure here and make it a "const" (in code space).  The
//  124 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  126 
//  127 /*********************************************************************
//  128  * EXTERNAL VARIABLES
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * EXTERNAL FUNCTIONS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * LOCAL VARIABLES
//  137  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 byte GenericApp_TaskID;   // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139                           // This variable will be received when
//  140                           // GenericApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 byte GenericApp_TransID;  // This is the unique message ID (counter)
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 afAddrType_t GenericApp_DstAddr;
GenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  147 
//  148 /*********************************************************************
//  149  * LOCAL FUNCTIONS
//  150  */
//  151 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  152 static void GenericApp_HandleKeys( byte shift, byte keys );
//  153 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  154 static void GenericApp_SendTheMessage( void );
//  155 
//  156 uint16 myApp_ReadLightLevel( void );//Œ“º”µƒ
//  157 
//  158 #if defined( IAR_ARMCM3_LM )
//  159 static void GenericApp_ProcessRtosMessage( void );
//  160 #endif
//  161 
//  162 /*********************************************************************
//  163  * NETWORK LAYER CALLBACKS
//  164  */
//  165 
//  166 /*********************************************************************
//  167  * PUBLIC FUNCTIONS
//  168  */
//  169 
//  170 /*********************************************************************
//  171  * @fn      GenericApp_Init
//  172  *
//  173  * @brief   Initialization function for the Generic App Task.
//  174  *          This is called during initialization and should contain
//  175  *          any application specific initialization (ie. hardware
//  176  *          initialization/setup, table initialization, power up
//  177  *          notificaiton ... ).
//  178  *
//  179  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  180  *                    used to send messages and set timers.
//  181  *
//  182  * @return  none
//  183  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  184 void GenericApp_Init( uint8 task_id )
GenericApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function GenericApp_Init
        CODE
//  185 {
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  186   GenericApp_TaskID = task_id;
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//  187   GenericApp_NwkState = DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  188   GenericApp_TransID = 0;
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  189 
//  190   // Device hardware initialization can be added here or in main() (Zmain.c).
//  191   // If the hardware is application specific - add it here.
//  192   // If the hardware is other parts of the device add it in main().
//  193 
//  194   GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  195   GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  196   GenericApp_DstAddr.addr.shortAddr = 0x0000;
        MOV     DPTR,#GenericApp_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  197 
//  198   // Fill out the endpoint description.
//  199   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  200   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  201   GenericApp_epDesc.simpleDesc
//  202             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  203   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  204 
//  205   // Register the endpoint description with the AF
//  206   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  207 
//  208   // Register for all key events - This app will handle all key events
//  209   RegisterForKeys( GenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  210 
//  211   // Update the display
//  212 #if defined ( LCD_SUPPORTED )
//  213   HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "GenericApp">` & 0xff
        MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  214 #endif
//  215 
//  216   ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  217   ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  218 
//  219 #if defined( IAR_ARMCM3_LM )
//  220   // Register this task with RTOS task initiator
//  221   RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
//  222 #endif
//  223 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  224 
//  225 /*********************************************************************
//  226  * @fn      GenericApp_ProcessEvent
//  227  *
//  228  * @brief   Generic Application Task event processor.  This function
//  229  *          is called to process all events for the task.  Events
//  230  *          include timers, messages and any other user defined events.
//  231  *
//  232  * @param   task_id  - The OSAL assigned task ID.
//  233  * @param   events - events to process.  This is a bit map and can
//  234  *                   contain more than one event.
//  235  *
//  236  * @return  none
//  237  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  238 uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
GenericApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GenericApp_ProcessEvent
        CODE
//  239 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLcdWriteScreen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, myApp_ReadLightLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  240   afIncomingMSGPacket_t *MSGpkt;
//  241   afDataConfirm_t *afDataConfirm;
//  242 
//  243   // Data Confirmation message fields
//  244   byte sentEP;
//  245   ZStatus_t sentStatus;
//  246   byte sentTransID;       // This should match the value sent
//  247   (void)task_id;  // Intentionally unreferenced parameter
//  248 
//  249   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
//  250   {
//  251     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  252     while ( MSGpkt )
//  253     {
//  254       switch ( MSGpkt->hdr.event )
//  255       {
//  256         case ZDO_CB_MSG:
//  257           GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  258           break;
//  259 
//  260         case KEY_CHANGE:
//  261           GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  262           break;
//  263 
//  264         case AF_DATA_CONFIRM_CMD:
//  265           // This message is received as a confirmation of a data packet sent.
//  266           // The status is of ZStatus_t type [defined in ZComDef.h]
//  267           // The message fields are defined in AF.h
//  268           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  269           sentEP = afDataConfirm->endpoint;
//  270           sentStatus = afDataConfirm->hdr.status;
//  271           sentTransID = afDataConfirm->transID;
//  272           (void)sentEP;
//  273           (void)sentTransID;
//  274 
//  275           // Action taken when confirmation is received.
//  276           if ( sentStatus != ZSuccess )
//  277           {
//  278             // The data wasn't delivered -- Do something
//  279           }
//  280           break;
//  281 
//  282         case AF_INCOMING_MSG_CMD:
//  283           GenericApp_MessageMSGCB( MSGpkt );
//  284           break;
//  285 
//  286         case ZDO_STATE_CHANGE:
//  287           GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//  288           if ( (GenericApp_NwkState == DEV_ZB_COORD)
//  289               || (GenericApp_NwkState == DEV_ROUTER)
//  290               || (GenericApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x9
        JZ      ??GenericApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??GenericApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_4
//  291           {
//  292             // Start sending "the" message in a regular interval.
//  293             osal_start_timerEx( GenericApp_TaskID,
//  294                                 GENERICAPP_SEND_MSG_EVT,
//  295                                 GENERICAPP_SEND_MSG_TIMEOUT );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  296           }
//  297           break;
//  298 
//  299         default:
//  300           break;
//  301       }
//  302 
//  303       // Release the memory
//  304       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  305 
//  306       // Next
//  307       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
        ADD     A,#0x5a
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_7 & 0xFFFF
        ADD     A,#-0x11
        JZ      ??GenericApp_ProcessEvent_2
        ADD     A,#-0x2
        JNZ     ??GenericApp_ProcessEvent_4
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for GenericApp_ProcessEvent>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_4
        CODE
??GenericApp_ProcessEvent_8:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??GenericApp_ProcessEvent_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessEvent_10
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??GenericApp_ProcessEvent_10
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#GenericApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_DstAddr + 9
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
??GenericApp_ProcessEvent_10:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_9:
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessEvent_11
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??GenericApp_ProcessEvent_12:
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_11:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??GenericApp_ProcessEvent_12
??GenericApp_ProcessEvent_7:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.1
        JNC     ??GenericApp_ProcessEvent_13
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
        MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 5
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 5,#0x1
        MOV     R0,#?V0 + 5
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPTR,#GenericApp_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
??GenericApp_ProcessEvent_13:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.3
        JC      $+5
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
        MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R1,#0x1
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_6:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_ProcessEvent_14
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_ProcessEvent_14:
        JZ      $+5
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#`?<Constant "rcvd">` & 0xff
        MOV     R5,#(`?<Constant "rcvd">` >> 8) & 0xff
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??HalLcdWriteScreen?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
//  308     }
//  309 
//  310     // return unprocessed events
//  311     return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_5:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??GenericApp_ProcessEvent_15 & 0xFFFF
//  312   }
//  313 
//  314   // Send a message out - This event is generated by a timer
//  315   //  (setup in GenericApp_Init()).
//  316   if ( events & GENERICAPP_SEND_MSG_EVT )
??GenericApp_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??GenericApp_ProcessEvent_16 & 0xFFFF
//  317   {
//  318     // Send "the" message
//  319     GenericApp_SendTheMessage();
        ; Setup parameters for call to function myApp_ReadLightLevel
        LCALL   ??myApp_ReadLightLevel?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 2,#GenericApp_TransID & 0xff
        MOV     ?V0 + 3,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 2,#0x2
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     R2,#GenericApp_DstAddr & 0xff
        MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
//  320 
//  321     // Setup to send message again
//  322     osal_start_timerEx( GenericApp_TaskID,
//  323                         GENERICAPP_SEND_MSG_EVT,
//  324                         GENERICAPP_SEND_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  325 
//  326     // return unprocessed events
//  327     return (events ^ GENERICAPP_SEND_MSG_EVT);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??GenericApp_ProcessEvent_15
//  328   }
//  329 
//  330   
//  331 #if defined( IAR_ARMCM3_LM )
//  332   // Receive a message from the RTOS queue
//  333   if ( events & GENERICAPP_RTOS_MSG_EVT )
//  334   {
//  335     // Process message from RTOS queue
//  336     GenericApp_ProcessRtosMessage();
//  337 
//  338     // return unprocessed events
//  339     return (events ^ GENERICAPP_RTOS_MSG_EVT);
//  340   }
//  341 #endif
//  342 
//  343   // Discard unknown events
//  344   return 0;
??GenericApp_ProcessEvent_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_15:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  345 }
//  346 
//  347 /*********************************************************************
//  348  * Event Generation Functions
//  349  */
//  350 
//  351 /*********************************************************************
//  352  * @fn      GenericApp_ProcessZDOMsgs()
//  353  *
//  354  * @brief   Process response messages
//  355  *
//  356  * @param   none
//  357  *
//  358  * @return  none
//  359  */
//  360 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  361 {
//  362   switch ( inMsg->clusterID )
//  363   {
//  364     case End_Device_Bind_rsp:
//  365       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  366       {
//  367         // Light LED
//  368         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  369       }
//  370 #if defined( BLINK_LEDS )
//  371       else
//  372       {
//  373         // Flash LED to show failure
//  374         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  375       }
//  376 #endif
//  377       break;
//  378 
//  379     case Match_Desc_rsp:
//  380       {
//  381         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  382         if ( pRsp )
//  383         {
//  384           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  385           {
//  386             GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  387             GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
//  388             // Take the first endpoint, Can be changed to search through endpoints
//  389             GenericApp_DstAddr.endPoint = pRsp->epList[0];
//  390 
//  391             // Light LED
//  392             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  393           }
//  394           osal_mem_free( pRsp );
//  395         }
//  396       }
//  397       break;
//  398   }
//  399 }
//  400 
//  401 /*********************************************************************
//  402  * @fn      GenericApp_HandleKeys
//  403  *
//  404  * @brief   Handles all key events for this device.
//  405  *
//  406  * @param   shift - true if in shift/alt.
//  407  * @param   keys - bit field for key events. Valid entries:
//  408  *                 HAL_KEY_SW_4
//  409  *                 HAL_KEY_SW_3
//  410  *                 HAL_KEY_SW_2
//  411  *                 HAL_KEY_SW_1
//  412  *
//  413  * @return  none
//  414  */
//  415 static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
//  416 {
//  417   zAddrType_t dstAddr;
//  418 
//  419   // Shift is used to make each button/switch dual purpose.
//  420   if ( shift )
//  421   {
//  422     if ( keys & HAL_KEY_SW_1 )
//  423     {
//  424     }
//  425     if ( keys & HAL_KEY_SW_2 )
//  426     {
//  427     }
//  428     if ( keys & HAL_KEY_SW_3 )
//  429     {
//  430     }
//  431     if ( keys & HAL_KEY_SW_4 )
//  432     {
//  433     }
//  434   }
//  435   else
//  436   {
//  437     if ( keys & HAL_KEY_SW_1 )
//  438     {
//  439       // Since SW1 isn't used for anything else in this application...
//  440 #if defined( SWITCH1_BIND )
//  441       // we can use SW1 to simulate SW2 for devices that only have one switch,
//  442       keys |= HAL_KEY_SW_2;
//  443 #elif defined( SWITCH1_MATCH )
//  444       // or use SW1 to simulate SW4 for devices that only have one switch
//  445       keys |= HAL_KEY_SW_4;
//  446 #endif
//  447     }
//  448 
//  449     if ( keys & HAL_KEY_SW_2 )
//  450     {
//  451       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  452 
//  453       // Initiate an End Device Bind Request for the mandatory endpoint
//  454       dstAddr.addrMode = Addr16Bit;
//  455       dstAddr.addr.shortAddr = 0x0000; // Coordinator
//  456       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  457                             GenericApp_epDesc.endPoint,
//  458                             GENERICAPP_PROFID,
//  459                             GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  460                             GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  461                             FALSE );
//  462     }
//  463 
//  464     if ( keys & HAL_KEY_SW_3 )
//  465     {
//  466     }
//  467 
//  468     if ( keys & HAL_KEY_SW_4 )
//  469     {
//  470       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  471       // Initiate a Match Description Request (Service Discovery)
//  472       dstAddr.addrMode = AddrBroadcast;
//  473       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  474       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  475                         GENERICAPP_PROFID,
//  476                         GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  477                         GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  478                         FALSE );
//  479     }
//  480   }
//  481 }
//  482 
//  483 /*********************************************************************
//  484  * LOCAL FUNCTIONS
//  485  */
//  486 
//  487 /*********************************************************************
//  488  * @fn      GenericApp_MessageMSGCB
//  489  *
//  490  * @brief   Data message processor callback.  This function processes
//  491  *          any incoming data - probably from other devices.  So, based
//  492  *          on cluster ID, perform the intended action.
//  493  *
//  494  * @param   none
//  495  *
//  496  * @return  none
//  497  */
//  498 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
//  499 {
//  500   switch ( pkt->clusterId )
//  501   {
//  502     case GENERICAPP_CLUSTERID:
//  503       // "the" message
//  504 #if defined( LCD_SUPPORTED )
//  505       HalLcdWriteScreen( (char*)pkt->cmd.Data, "rcvd" );
//  506 #elif defined( WIN32 )
//  507       WPRINTSTR( pkt->cmd.Data );
//  508 #endif
//  509       break;
//  510   }
//  511 }
//  512 
//  513 /*********************************************************************
//  514  * @fn      GenericApp_SendTheMessage
//  515  *
//  516  * @brief   Send "the" message.
//  517  *
//  518  * @param   none
//  519  *
//  520  * @return  none
//  521  */
//  522 static void GenericApp_SendTheMessage( void )
//  523 {
//  524   unsigned char theMessageData[2] ;
//  525   uint16 LightLevel;
//  526   LightLevel = myApp_ReadLightLevel();
//  527   theMessageData[0] = LightLevel / 10 + '0';
//  528   theMessageData[1] = LightLevel % 10 + '0';
//  529   
//  530  AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
//  531                        GENERICAPP_CLUSTERID,
//  532                        2,
//  533                        theMessageData,
//  534                        &GenericApp_TransID,
//  535                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
//  536 }
//  537 
//  538 #if defined( IAR_ARMCM3_LM )
//  539 /*********************************************************************
//  540  * @fn      GenericApp_ProcessRtosMessage
//  541  *
//  542  * @brief   Receive message from RTOS queue, send response back.
//  543  *
//  544  * @param   none
//  545  *
//  546  * @return  none
//  547  */
//  548 static void GenericApp_ProcessRtosMessage( void )
//  549 {
//  550   osalQueue_t inMsg;
//  551 
//  552   if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
//  553   {
//  554     uint8 cmndId = inMsg.cmnd;
//  555     uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
//  556 
//  557     switch ( cmndId )
//  558     {
//  559       case CMD_INCR:
//  560         counter += 1;  /* Increment the incoming counter */
//  561                        /* Intentionally fall through next case */
//  562 
//  563       case CMD_ECHO:
//  564       {
//  565         userQueue_t outMsg;
//  566 
//  567         outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
//  568         osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
//  569         osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
//  570         break;
//  571       }
//  572       
//  573       default:
//  574         break;  /* Ignore unknown command */    
//  575     }
//  576   }
//  577 }
//  578 #endif
//  579 
//  580 /*********************************************************************
//  581 ∂¡»°π‚«ø∫Ø ˝
//  582 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  583 uint16 myApp_ReadLightLevel( void )
myApp_ReadLightLevel:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function myApp_ReadLightLevel
        CODE
//  584 {
        ; Saved register size: 0
        ; Auto size: 0
//  585   uint16 reading = 0;
//  586   
//  587   /* Enable channel */
//  588   ADCCFG |= 0x02;
        ORL     0xf2,#0x2
//  589   
//  590   /* writing to this register starts the extra conversion */
//  591   ADCCON3 = 0x81;
        MOV     0xb6,#-0x7f
//  592   
//  593   /* Wait for the conversion to be done */
//  594   while (!(ADCCON1 & 0x80));
??myApp_ReadLightLevel_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??myApp_ReadLightLevel_0
//  595   
//  596   /* Disable channel after done conversion */
//  597   ADCCFG &= (0x02 ^ 0xFF);
        ANL     0xf2,#0xfd
//  598   
//  599   /* Read the result */
//  600   reading = ADCH;
        MOV     A,0xbb
//  601   reading |= (int16) (ADCH << 8); 
//  602   
//  603   reading >>= 8;
//  604   
//  605   return (reading);
        MOV     A,0xbb
        MOV     R2,A
        CLR     A
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCH
//  606 } 

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??myApp_ReadLightLevel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    myApp_ReadLightLevel

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GenericApp">`:
        DB "GenericApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "rcvd">`:
        DB "rcvd"

        END
// 
// 871 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
//  30 bytes in segment XDATA_ROM_C
//  21 bytes in segment XDATA_Z
// 
// 889 bytes of CODE  memory
//  30 bytes of CONST memory
//   0 bytes of DATA  memory (+ 4 bytes shared)
//  21 bytes of XDATA memory
//
//Errors: none
//Warnings: none
