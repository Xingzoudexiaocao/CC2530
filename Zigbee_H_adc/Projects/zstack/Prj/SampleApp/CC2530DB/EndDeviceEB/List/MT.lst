###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               31/Oct/2019  10:27:29
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Components\mt\MT.c
#    Command line       =  
#        -f C:\Users\hhhho\AppData\Local\Temp\EW2393.tmp
#        ("C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Components\mt\MT.c" -D SECURE=1 -D xNV_INIT -D xNV_RESTORE -D
#        xPOWER_SAVING -D NWK_AUTO_POLL -D ZTOOL_P1 -D LCD_SUPPORTED=FALSE -D
#        MULTICAST_ENABLED=FALSE -D FEATURE_SYSTEM_STATS -lC
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List" -lA
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj" -e
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\" -I
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\Source\" -I
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\Source\" -I
#        "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\List\MT.lst
#    Object file        =  
#        C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD
#        -END\Projects\zstack\Prj\SampleApp\CC2530DB\EndDeviceEB\Obj\MT.r51
#
###############################################################################

C:\Users\hhhho\Desktop\Z-Stack1.2.2a-spp-v001-AD -END\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2015-01-18 19:44:10 -0800 (Sun, 18 Jan 2015) $
      4            Revision:       $Revision: 41896 $
      5          
      6            Description:    MonitorTest Event Loop functions.
      7                            Everything in the MonitorTest Task (except the serial driver).
      8          
      9          
     10            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40           **************************************************************************************************/
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          
     46          #include "ZComDef.h"
     47          #include "MT.h"
     48          #include "MT_APP.h"
     49          #include "MT_DEBUG.h"
     50          #include "MT_UTIL.h"
     51          #include "MT_SYS.h"
     52          
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Memory.h"
     56          #include "OSAL_Nv.h"
     57          
     58          #include "DebugTrace.h"
     59          #include "ZMAC.h"
     60          
     61          #if !defined ( NONWK )
     62            #include "NLMEDE.h"
     63            #include "nwk_bufs.h"
     64            #include "ZDObject.h"
     65            #include "ssp.h"
     66            #include "nwk_util.h"
     67            #include "AF.h"
     68            #include "MT_SAPI.h"
     69          #endif
     70          
     71          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     72            #include "MT_MAC.h"
     73          #endif
     74          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     75            #include "MT_NWK.h"
     76            #include "nwk.h"
     77            #include "nwk_bufs.h"
     78          #endif
     79          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     80            #include "MT_AF.h"
     81          #endif
     82          #if defined( MT_USER_TEST_FUNC )
     83            #include "AF.h"
     84          #endif
     85          #if defined( MT_ZDO_FUNC )
     86            #include "MT_ZDO.h"
     87          #endif
     88          #if defined (MT_SAPI_FUNC)
     89          	#include "MT_SAPI.h"
     90          #endif
     91          #if defined (MT_OTA_FUNC)
     92            #include "MT_OTA.h"
     93          #endif
     94          
     95          #if defined( APP_TP )
     96           #include "TestProfile.h"
     97          #endif
     98          #if defined( APP_TP2 )
     99           #include "TestProfile2.h"
    100          #endif
    101          
    102          #if defined(APP_TGEN)
    103            #include "TrafficGenApp.h"
    104          #endif
    105          #if defined(APP_DEBUG)
    106          	#include "DebugApp.h"
    107          #endif
    108          #if defined (NWK_TEST)
    109          	#include "HWTTApp.h"
    110          #endif
    111          #if defined (MT_UBL_FUNC)
    112            extern uint8 MT_UblCommandProcessing(uint8 *pBuf);
    113          #endif
    114          #if defined (MT_ZNP_FUNC)
    115            #include "MT_ZNP.h"
    116          #endif
    117          #if defined (MT_MAC_PROTOBUF_FUNC)
    118            #include "mtmacpb.h"
    119          #endif
    120          #if defined (MT_GP_FUNC)
    121            #include "MT_GP.h"
    122          #endif
    123          
    124          #include "hal_uart.h"
    125          #include "hal_led.h"
    126          #include "hal_key.h"
    127          #include "MT_UART.h"
    128          
    129          #if defined (FEATURE_DUAL_MAC)
    130            #include "dmmgr.h"
    131          #endif 
    132          
    133          /**************************************************************************************************
    134           * CONSTANTS
    135           **************************************************************************************************/
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 44
   \   00002C                REQUIRE __INIT_XDATA_Z
    138          {
    139            NULL,                               // MT_RPC_SYS_RES0
    140          
    141          #if defined (MT_SYS_FUNC)
    142            MT_SysCommandProcessing,            // MT_RPC_SYS_SYS
    143          #else
    144            NULL,
    145          #endif
    146          
    147          #if defined (MT_MAC_FUNC)
    148            MT_MacCommandProcessing,            // MT_RPC_SYS_MAC
    149          #else
    150            NULL,
    151          #endif
    152          
    153          #if defined (MT_NWK_FUNC)
    154            MT_NwkCommandProcessing,            // MT_RPC_SYS_NWK
    155          #else
    156            NULL,
    157          #endif
    158          
    159          #if defined (MT_AF_FUNC)
    160            MT_AfCommandProcessing,             // MT_RPC_SYS_AF
    161          #else
    162            NULL,
    163          #endif
    164          
    165          #if defined (MT_ZDO_FUNC)
    166            MT_ZdoCommandProcessing,            // MT_RPC_SYS_ZDO
    167          #else
    168            NULL,
    169          #endif
    170          
    171          #if defined (MT_SAPI_FUNC)
    172            MT_SapiCommandProcessing,           // MT_RPC_SYS_SAPI
    173          #else
    174            NULL,
    175          #endif
    176          
    177          #if defined (MT_UTIL_FUNC)
    178            MT_UtilCommandProcessing,           // MT_RPC_SYS_UTIL
    179          #else
    180            NULL,
    181          #endif
    182          
    183          #if defined (MT_DEBUG_FUNC)
    184            MT_DebugCommandProcessing,          // MT_RPC_SYS_DBG
    185          #else
    186            NULL,
    187          #endif
    188          
    189          #if defined (MT_APP_FUNC)
    190            MT_AppCommandProcessing,            // MT_RPC_SYS_APP
    191          #else
    192            NULL,
    193          #endif
    194          
    195          #if defined (MT_OTA_FUNC)
    196            MT_OtaCommandProcessing,            // MT_RPC_SYS_OTA
    197          #else
    198            NULL,
    199          #endif
    200          
    201          #if defined (MT_ZNP_FUNC)
    202            MT_ZnpCommandProcessing,
    203          #else
    204            NULL,
    205          #endif
    206          
    207            NULL,  // Spare sub-system 12.
    208          
    209          #if defined (MT_UBL_FUNC)
    210            MT_UblCommandProcessing,
    211          #else
    212            NULL,
    213          #endif
    214          
    215            NULL,                               // MT_RPC_SYS_RESERVED14
    216            NULL,                               // MT_RPC_SYS_RESERVED15
    217            NULL,                               // MT_RPC_SYS_RESERVED16
    218          #if defined (MT_MAC_PROTOBUF_FUNC)
    219            MT_MacPBCmdProc,                    // MT_RPC_SYS_PROTOBUF
    220          #else
    221            NULL,
    222          #endif
    223            NULL,                               // MT_RPC_SYS_RES18
    224            NULL,                               // MT_RPC_SYS_RES19
    225            NULL,                               // MT_RPC_SYS_RES20
    226          #if defined (MT_GP_FUNC)
    227            MT_GpCommandProcessing,
    228          #else
    229            NULL,
    230          #endif
    231          };
    232          
    233          /**************************************************************************************************
    234           * GLOBAL VARIABLES
    235           **************************************************************************************************/
    236          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    237          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    238          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    239          
    240          /**************************************************************************************************
    241           * LOCAL FUNCTIONS
    242           **************************************************************************************************/
    243          
    244          void MT_MsgQueueInit( void );
    245          void MT_ResetMsgQueue( void );
    246          byte MT_QueueMsg( byte *msg , byte len );
    247          void MT_ProcessQueue( void );
    248          
    249          #if defined ( MT_USER_TEST_FUNC )
    250          void MT_ProcessAppUserCmd( byte *pData );
    251          #endif
    252          
    253          /**************************************************************************************************
    254           * @fn         MT_Init
    255           *
    256           * @brief      This function is the secondary initialization that resolves conflicts during
    257           *             osalInitTasks(). For example, since MT is the highest priority task, and
    258           *             specifically because the MT task is initialized before the ZDApp task, if MT_Init()
    259           *             registers anything with ZDO_RegisterForZdoCB(), it is wiped out when ZDApp task
    260           *             initialization invokes ZDApp_InitZdoCBFunc().
    261           *             There may be other existing or future such races, so try to do all possible
    262           *             MT initialization here vice in MT_TaskInit().
    263           *
    264           * input parameters
    265           *
    266           * None.
    267           *
    268           * output parameters
    269           *
    270           * None.
    271           *
    272           * @return      None.
    273           **************************************************************************************************
    274           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void MT_Init(uint8 taskID)
   \                     MT_Init:
    276          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    277            MT_TaskID = taskID;
   \   000006   90....       MOV       DPTR,#MT_TaskID
   \   000009   F0           MOVX      @DPTR,A
    278            debugThreshold = 0;
   \   00000A   90....       MOV       DPTR,#debugThreshold
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    279            debugCompId = 0;
   \   00000F   90....       MOV       DPTR,#debugCompId
   \   000012   F0           MOVX      @DPTR,A
    280          
    281          #if defined (MT_ZDO_FUNC)
    282            MT_ZdoInit();
    283          #endif
    284          #ifndef ZBIT
    285            MT_SysResetInd();
   \   000013                ; Setup parameters for call to function MT_SysResetInd
   \   000013   12....       LCALL     `??MT_SysResetInd::?relay`; Banked call to: MT_SysResetInd
    286          #endif /* !ZBIT */
    287          }
   \   000016                REQUIRE ?Subroutine0
   \   000016                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    288          
    289          /***************************************************************************************************
    290           * @fn      MT_BuildAndSendZToolResponse
    291           *
    292           * @brief   Build and send a ZTOOL msg
    293           * @param   uint8 cmdType - include type and subsystem
    294           *          uint8 cmdId - command ID
    295           *          byte dataLen
    296           *          byte *pData
    297           *
    298           * @return  void
    299           ***************************************************************************************************/
    300          #if !defined(NPI)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V7,R2
   \   000009   8B..         MOV       ?V2,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
    303            uint8 *msg_ptr;
    304          
    305          #ifdef FEATURE_DUAL_MAC
    306            msg_ptr = DMMGR_BuildRspMsg( cmdType, cmdId, dataLen, pData );
    307          
    308            if ( msg_ptr )
    309            {
    310              MT_TransportSend(msg_ptr);
    311            }
    312          #else
    313            if ((msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen)) != NULL)
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   AA..         MOV       R2,?V2
   \   000011   74E0         MOV       A,#-0x20
   \   000013   59           ANL       A,R1
   \   000014   F9           MOV       R1,A
   \   000015   12....       LCALL     `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000018   8A..         MOV       ?V4,R2
   \   00001A   8B..         MOV       ?V5,R3
   \   00001C   AE..         MOV       R6,?V4
   \   00001E   AF..         MOV       R7,?V5
   \   000020   EA           MOV       A,R2
   \   000021   4F           ORL       A,R7
   \   000022   603C         JZ        ??MT_BuildAndSendZToolResponse_0
    314            {
    315              msg_ptr[MT_RPC_POS_LEN] = dataLen;
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E5..         MOV       A,?V2
   \   00002A   F0           MOVX      @DPTR,A
    316              msg_ptr[MT_RPC_POS_CMD0] = cmdType;
   \   00002B   A3           INC       DPTR
   \   00002C   E5..         MOV       A,?V3
   \   00002E   F0           MOVX      @DPTR,A
    317              msg_ptr[MT_RPC_POS_CMD1] = cmdId;
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E5..         MOV       A,?V7
   \   000037   F0           MOVX      @DPTR,A
    318              (void)osal_memcpy(msg_ptr+MT_RPC_POS_DAT0, pData, dataLen);
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   85....       MOV       ?V4,?V0
   \   00003B   85....       MOV       ?V5,?V1
   \   00003E   75..00       MOV       ?V6,#0x0
   \   000041   78..         MOV       R0,#?V4
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000046   AC..         MOV       R4,?V2
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   EA           MOV       A,R2
   \   00004B   2403         ADD       A,#0x3
   \   00004D   FA           MOV       R2,A
   \   00004E   E4           CLR       A
   \   00004F   3F           ADDC      A,R7
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000054   7403         MOV       A,#0x3
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
    319          
    320              MT_TransportSend(msg_ptr);
   \   000059                ; Setup parameters for call to function MT_TransportSend
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    321            }
    322          #endif /* FEATURE_DUAL_MAC */
    323          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   000060   7F08         MOV       R7,#0x8
   \   000062   02....       LJMP      ?BANKED_LEAVE_XDATA
    324          #endif /* NPI */
    325          /***************************************************************************************************
    326           * @fn      MT_ProcessIncoming
    327           *
    328           * @brief  Process Incoming Message.
    329           *
    330           * @param   byte *pBuf - pointer to event message
    331           *
    332           * @return  void
    333           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    335          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    336            mtProcessMsg_t func;
    337            uint8 rsp[MT_RPC_FRAME_HDR_SZ];
    338          
    339            /* pre-build response message:  | status | cmd0 | cmd1 | */
    340            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   7401         MOV       A,#0x1
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
    341            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   C0E0         PUSH      A
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   D0E0         POP       A
   \   000027   F0           MOVX      @DPTR,A
    342          
    343            /* check length */
    344            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C3           CLR       C
   \   00002E   94FB         SUBB      A,#-0x5
   \   000030   400A         JC        ??MT_ProcessIncoming_0
    345            {
    346              rsp[0] = MT_RPC_ERR_LENGTH;
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   7404         MOV       A,#0x4
   \   00003A   803D         SJMP      ??MT_ProcessIncoming_1
    347            }
    348            /* check subsystem range */
    349            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   00003C   741F         MOV       A,#0x1f
   \   00003E   58           ANL       A,R0
   \   00003F   C3           CLR       C
   \   000040   9416         SUBB      A,#0x16
   \   000042   502D         JNC       ??MT_ProcessIncoming_2
    350            {
    351              /* look up processing function */
    352              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   000044   E8           MOV       A,R0
   \   000045   541F         ANL       A,#0x1f
   \   000047   25E0         ADD       A,0xE0 /* A   */
   \   000049   F8           MOV       R0,A
   \   00004A   74..         MOV       A,#mtProcessIncoming & 0xff
   \   00004C   28           ADD       A,R0
   \   00004D   F582         MOV       DPL,A
   \   00004F   E4           CLR       A
   \   000050   34..         ADDC      A,#(mtProcessIncoming >> 8) & 0xff
   \   000052   F583         MOV       DPH,A
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F8           MOV       R0,A
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   8882         MOV       DPL,R0
   \   00005A   F583         MOV       DPH,A
    353              if (func)
   \   00005C   E582         MOV       A,DPL
   \   00005E   4583         ORL       A,DPH
   \   000060   600F         JZ        ??MT_ProcessIncoming_2
    354              {
    355                /* execute processing function */
    356                rsp[0] = (*func)(pBuf);
   \   000062                ; Setup parameters for indirect call
   \   000062   12....       LCALL     ?CALL_IND
   \   000065   E9           MOV       A,R1
   \   000066   85..82       MOV       DPL,?XSP + 0
   \   000069   85..83       MOV       DPH,?XSP + 1
   \   00006C   F0           MOVX      @DPTR,A
    357              }
    358              else
    359              {
    360                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    361              }
    362            }
    363            else
    364            {
    365              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    366            }
    367          
    368            /* if error and this was an SREQ, send error message */
    369            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \   00006D   700B         JNZ       ??MT_ProcessIncoming_3
   \   00006F   8022         SJMP      ??MT_ProcessIncoming_4
   \                     ??MT_ProcessIncoming_2:
   \   000071   85..82       MOV       DPL,?XSP + 0
   \   000074   85..83       MOV       DPH,?XSP + 1
   \   000077   7401         MOV       A,#0x1
   \                     ??MT_ProcessIncoming_1:
   \   000079   F0           MOVX      @DPTR,A
   \                     ??MT_ProcessIncoming_3:
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   54E0         ANL       A,#0xe0
   \   000082   6420         XRL       A,#0x20
   \   000084   700D         JNZ       ??MT_ProcessIncoming_4
    370            {
    371              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0,
    372                                                                            MT_RPC_FRAME_HDR_SZ, rsp);
   \   000086                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000086   AC..         MOV       R4,?XSP + 0
   \   000088   AD..         MOV       R5,?XSP + 1
   \   00008A   7B03         MOV       R3,#0x3
   \   00008C   7A00         MOV       R2,#0x0
   \   00008E   7960         MOV       R1,#0x60
   \   000090   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    373            }
    374          }
   \                     ??MT_ProcessIncoming_4:
   \   000093   7403         MOV       A,#0x3
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   D083         POP       DPH
   \   00009A   D082         POP       DPL
   \   00009C   02....       LJMP      ?BRET
    375          
    376          /***************************************************************************************************
    377           * @fn      MTProcessAppRspMsg
    378           *
    379           * @brief   Process the User App Response Message
    380           *
    381           * @param   data - output serial buffer.  The first byte must be the
    382           *          endpoint that send this message.
    383           * @param   len - data length
    384           *
    385           * @return  none
    386           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    388          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FC           MOV       R4,A
   \   000007   EB           MOV       A,R3
   \   000008   FD           MOV       R5,A
   \   000009   E9           MOV       A,R1
    389            /* Send out Reset Response message */
    390            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000A   FB           MOV       R3,A
   \   00000B   7A80         MOV       R2,#-0x80
   \   00000D   7969         MOV       R1,#0x69
   \   00000F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    391          }
   \   000012   02....       LJMP      ?Subroutine0 & 0xFFFF
    392          
    393          
    394          /***************************************************************************************************
    395           * @fn      MT_ReverseBytes
    396           *
    397           * @brief
    398           *
    399           *   Reverses bytes within an array
    400           *
    401           * @param   data - ptr to data buffer to reverse
    402           * @param    len - number of bytes in buffer
    403           *
    404           * @return  void
    405           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    408            byte i,j;
    409            byte temp;
    410          
    411            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000005   75..00       MOV       ?V0,#0x0
   \   000008   74FF         MOV       A,#-0x1
   \   00000A   29           ADD       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   802D         SJMP      ??MT_ReverseBytes_0
    412            {
    413              temp = pData[i];
   \                     ??MT_ReverseBytes_1:
   \   00000E   AC..         MOV       R4,?V0
   \   000010   EA           MOV       A,R2
   \   000011   2C           ADD       A,R4
   \   000012   FC           MOV       R4,A
   \   000013   E4           CLR       A
   \   000014   3B           ADDC      A,R3
   \   000015   FD           MOV       R5,A
   \   000016   8C82         MOV       DPL,R4
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V1,A
    414              pData[i++] = pData[j];
   \   00001D   E8           MOV       A,R0
   \   00001E   FE           MOV       R6,A
   \   00001F   EA           MOV       A,R2
   \   000020   2E           ADD       A,R6
   \   000021   FE           MOV       R6,A
   \   000022   E4           CLR       A
   \   000023   3B           ADDC      A,R3
   \   000024   FF           MOV       R7,A
   \   000025   8E82         MOV       DPL,R6
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   8C82         MOV       DPL,R4
   \   00002C   8D83         MOV       DPH,R5
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   05..         INC       ?V0
    415              pData[j--] = temp;
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   E5..         MOV       A,?V1
   \   000037   F0           MOVX      @DPTR,A
   \   000038   18           DEC       R0
    416            }
   \   000039   19           DEC       R1
   \   00003A   19           DEC       R1
   \                     ??MT_ReverseBytes_0:
   \   00003B   E9           MOV       A,R1
   \   00003C   C3           CLR       C
   \   00003D   9402         SUBB      A,#0x2
   \   00003F   50CD         JNC       ??MT_ReverseBytes_1
    417          }
   \   000041   7F03         MOV       R7,#0x3
   \   000043   02....       LJMP      ?BANKED_LEAVE_XDATA
    418          
    419          
    420          /***************************************************************************************************
    421           * @fn      MT_Word2Buf
    422           *
    423           * @brief   Copy a uint16 array to a byte array, little endian.
    424           *
    425           * @param   pBuf - byte array
    426           * @param   pWord - uint16 array
    427           * @param   len - length of uint16 array
    428           *
    429           * @return  pointer to end of byte array
    430           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    432          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8024         SJMP      ??MT_Word2Buf_0
    433            while ( len-- > 0 )
    434            {
    435              *pBuf++ = LO_UINT16( *pWord );
   \                     ??MT_Word2Buf_1:
   \   000007   8C82         MOV       DPL,R4
   \   000009   8D83         MOV       DPH,R5
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   F0           MOVX      @DPTR,A
    436              *pBuf++ = HI_UINT16( *pWord );
   \   000011   8C82         MOV       DPL,R4
   \   000013   8D83         MOV       DPH,R5
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   EA           MOV       A,R2
   \   00001E   2402         ADD       A,#0x2
   \   000020   FA           MOV       R2,A
   \   000021   5001         JNC       ??MT_Word2Buf_2
   \   000023   0B           INC       R3
    437              pWord++;
   \                     ??MT_Word2Buf_2:
   \   000024   EC           MOV       A,R4
   \   000025   2402         ADD       A,#0x2
   \   000027   FC           MOV       R4,A
   \   000028   5001         JNC       ??MT_Word2Buf_0
   \   00002A   0D           INC       R5
    438            }
   \                     ??MT_Word2Buf_0:
   \   00002B   E9           MOV       A,R1
   \   00002C   F8           MOV       R0,A
   \   00002D   74FF         MOV       A,#-0x1
   \   00002F   28           ADD       A,R0
   \   000030   F9           MOV       R1,A
   \   000031   04           INC       A
   \   000032   70D3         JNZ       ??MT_Word2Buf_1
    439          
    440            return pBuf;
   \   000034   02....       LJMP      ?Subroutine0 & 0xFFFF
    441          }
    442          #if !defined(NONWK)
    443          /***************************************************************************************************
    444           * @fn      MT_BuildEndpointDesc
    445           *
    446           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    447           *
    448           * @param   pBuf - byte array
    449           *
    450           * @return  epDesc - pointer to the endpoint descriptor
    451           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    452          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    453          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    454            uint8 i;
    455            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV       ?V0,#0x0
    456            endPointDesc_t *epDesc;
    457          
    458            epDesc = (endPointDesc_t *)param;
    459            /* check if this endpoint is already registered */
    460            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000010                ; Setup parameters for call to function afFindEndPointDesc
   \   000010   8A82         MOV       DPL,R2
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000019   EA           MOV       A,R2
   \   00001A   4B           ORL       A,R3
   \   00001B   6006         JZ        ??MT_BuildEndpointDesc_0
    461            {
    462              ret = ZApsDuplicateEntry;
   \   00001D   75..B8       MOV       ?V0,#-0x48
   \   000020   02....       LJMP      ??MT_BuildEndpointDesc_1 & 0xFFFF
    463            }
    464            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   000023   E5..         MOV       A,?V2
   \   000025   45..         ORL       A,?V3
   \   000027   7003         JNZ       $+5
   \   000029   02....       LJMP      ??MT_BuildEndpointDesc_1 & 0xFFFF
    465            {
    466              epDesc->endPoint = *pBuf;
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   E0           MOVX      A,@DPTR
   \   000031   85..82       MOV       DPL,?V2
   \   000034   85..83       MOV       DPH,?V3
   \   000037   F0           MOVX      @DPTR,A
    467          
    468              /* Ignore the latency reqs */
    469              epDesc->latencyReq = noLatencyReqs;
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E4           CLR       A
   \   00003E   F0           MOVX      @DPTR,A
    470          
    471              /* allocate memory for the simple descriptor */
    472              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   7A0C         MOV       R2,#0xc
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8B..         MOV       ?V5,R3
   \   000047   A9..         MOV       R1,?V5
   \   000049   E5..         MOV       A,?V2
   \   00004B   2403         ADD       A,#0x3
   \   00004D   F5..         MOV       ?V2,A
   \   00004F   5002         JNC       ??MT_BuildEndpointDesc_2
   \   000051   05..         INC       ?V3
   \                     ??MT_BuildEndpointDesc_2:
   \   000053   F582         MOV       DPL,A
   \   000055   85..83       MOV       DPH,?V3
   \   000058   EA           MOV       A,R2
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \   00005B   EB           MOV       A,R3
   \   00005C   F0           MOVX      @DPTR,A
    473              if (epDesc->simpleDesc)
   \   00005D   EA           MOV       A,R2
   \   00005E   49           ORL       A,R1
   \   00005F   7003         JNZ       $+5
   \   000061   02....       LJMP      ??MT_BuildEndpointDesc_3 & 0xFFFF
    474              {
    475                /* Endpoint */
    476                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   E0           MOVX      A,@DPTR
   \   000069   8A82         MOV       DPL,R2
   \   00006B   8B83         MOV       DPH,R3
   \   00006D   12....       LCALL     ?Subroutine2 & 0xFFFF
    477          
    478                /* AppProfId */
    479                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_2:
   \   000070   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000073   E8           MOV       A,R0
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E9           MOV       A,R1
   \   000077   F0           MOVX      @DPTR,A
    480                pBuf += sizeof(uint16);
   \   000078   EE           MOV       A,R6
   \   000079   2402         ADD       A,#0x2
   \   00007B   FE           MOV       R6,A
   \   00007C   5001         JNC       ??MT_BuildEndpointDesc_4
   \   00007E   0F           INC       R7
    481          
    482                /* AppDeviceId */
    483                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??MT_BuildEndpointDesc_4:
   \   00007F   F582         MOV       DPL,A
   \   000081   8F83         MOV       DPH,R7
   \   000083   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E8           MOV       A,R0
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   E9           MOV       A,R1
   \   00008C   12....       LCALL     ?Subroutine13 & 0xFFFF
    484                pBuf += sizeof(uint16);
    485          
    486                /* AppDevVer */
    487                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??CrossCallReturnLabel_24:
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   540F         ANL       A,#0xf
   \   000093   FA           MOV       R2,A
   \   000094   85..82       MOV       DPL,?V2
   \   000097   85..83       MOV       DPH,?V3
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   2405         ADD       A,#0x5
   \   00009D   F8           MOV       R0,A
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   3400         ADDC      A,#0x0
   \   0000A2   8882         MOV       DPL,R0
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   54F0         ANL       A,#0xf0
   \   0000A9   4A           ORL       A,R2
   \   0000AA   12....       LCALL     ?Subroutine13 & 0xFFFF
    488          
    489                /* LatencyReq */
    490                pBuf++;
    491          
    492                /* AppNumInClusters */
    493                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_25:
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   C0E0         PUSH      A
   \   0000B3   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000B6   D0E0         POP       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   EE           MOV       A,R6
   \   0000BA   2405         ADD       A,#0x5
   \   0000BC   FE           MOV       R6,A
   \   0000BD   5001         JNC       ??MT_BuildEndpointDesc_5
   \   0000BF   0F           INC       R7
   \                     ??MT_BuildEndpointDesc_5:
   \   0000C0   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   602A         JZ        ??MT_BuildEndpointDesc_6
    494                if (epDesc->simpleDesc->AppNumInClusters)
    495                {
    496                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    497                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0000C6                ; Setup parameters for call to function osal_mem_alloc
   \   0000C6   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000C9   2407         ADD       A,#0x7
   \   0000CB   12....       LCALL     ?Subroutine1 & 0xFFFF
    498                  if ( epDesc->simpleDesc->pAppInClusterList )
   \                     ??CrossCallReturnLabel_0:
   \   0000CE   2407         ADD       A,#0x7
   \   0000D0   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000D3   6018         JZ        ??MT_BuildEndpointDesc_7
    499                  {
    500                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   0000D5   7A00         MOV       R2,#0x0
   \                     ??MT_BuildEndpointDesc_8:
   \   0000D7   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   FB           MOV       R3,A
   \   0000DC   EA           MOV       A,R2
   \   0000DD   C3           CLR       C
   \   0000DE   9B           SUBB      A,R3
   \   0000DF   500F         JNC       ??MT_BuildEndpointDesc_6
    501                    {
    502                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   0000E1   12....       LCALL     ?Subroutine4 & 0xFFFF
    503                      pBuf += 2;
    504                    }
   \                     ??CrossCallReturnLabel_6:
   \   0000E4   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000E7   5001         JNC       ??MT_BuildEndpointDesc_9
   \   0000E9   0F           INC       R7
   \                     ??MT_BuildEndpointDesc_9:
   \   0000EA   0A           INC       R2
   \   0000EB   80EA         SJMP      ??MT_BuildEndpointDesc_8
    505                  }
    506                  else
    507                  {
    508                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_7:
   \   0000ED   75..10       MOV       ?V0,#0x10
    509                  }
    510                }
    511          
    512                /* AppNumOutClusters */
    513                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_6:
   \   0000F0   8E82         MOV       DPL,R6
   \   0000F2   8F83         MOV       DPH,R7
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   C0E0         PUSH      A
   \   0000F7   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000FA   D0E0         POP       A
   \   0000FC   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000FF   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000102   E0           MOVX      A,@DPTR
   \   000103   602E         JZ        ??MT_BuildEndpointDesc_10
    514                if (epDesc->simpleDesc->AppNumOutClusters)
    515                {
    516                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    517                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   000105                ; Setup parameters for call to function osal_mem_alloc
   \   000105   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000108   240A         ADD       A,#0xa
   \   00010A   12....       LCALL     ?Subroutine1 & 0xFFFF
    518                  if (epDesc->simpleDesc->pAppOutClusterList)
   \                     ??CrossCallReturnLabel_1:
   \   00010D   240A         ADD       A,#0xa
   \   00010F   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000112   601A         JZ        ??MT_BuildEndpointDesc_11
    519                  {
    520                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   000114   7A00         MOV       R2,#0x0
   \                     ??MT_BuildEndpointDesc_12:
   \   000116   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000119   FB           MOV       R3,A
   \   00011A   EA           MOV       A,R2
   \   00011B   C3           CLR       C
   \   00011C   9B           SUBB      A,R3
   \   00011D   5014         JNC       ??MT_BuildEndpointDesc_10
    521                    {
    522                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   00011F   12....       LCALL     ?Subroutine4 & 0xFFFF
    523                      pBuf += 2;
    524                    }
   \                     ??CrossCallReturnLabel_7:
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000128   5001         JNC       ??MT_BuildEndpointDesc_13
   \   00012A   0F           INC       R7
   \                     ??MT_BuildEndpointDesc_13:
   \   00012B   0A           INC       R2
   \   00012C   80E8         SJMP      ??MT_BuildEndpointDesc_12
    525                  }
    526                  else
    527                  {
    528                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_11:
   \   00012E   75..10       MOV       ?V0,#0x10
   \   000131   8006         SJMP      ??MT_BuildEndpointDesc_14
    529                  }
    530                }
    531          
    532                /* if any list cannot be allocated...free all */
    533                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_10:
   \   000133   7410         MOV       A,#0x10
   \   000135   65..         XRL       A,?V0
   \   000137   703B         JNZ       ??MT_BuildEndpointDesc_1
   \                     ??MT_BuildEndpointDesc_14:
   \   000139   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00013C   2407         ADD       A,#0x7
   \   00013E   F582         MOV       DPL,A
   \   000140   E4           CLR       A
   \   000141   38           ADDC      A,R0
   \   000142   F583         MOV       DPH,A
   \   000144   E0           MOVX      A,@DPTR
   \   000145   FA           MOV       R2,A
   \   000146   A3           INC       DPTR
   \   000147   E0           MOVX      A,@DPTR
   \   000148   FB           MOV       R3,A
   \   000149   EA           MOV       A,R2
   \   00014A   4B           ORL       A,R3
   \   00014B   6003         JZ        ??MT_BuildEndpointDesc_15
    534                {
    535                  if (epDesc->simpleDesc->pAppInClusterList)
    536                  {
    537                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    538                  }
    539          
    540                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??MT_BuildEndpointDesc_15:
   \   000150   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000153   6011         JZ        ??CrossCallReturnLabel_18
    541                  {
    542                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   000155                ; Setup parameters for call to function osal_mem_free
   \   000155   8882         MOV       DPL,R0
   \   000157   8983         MOV       DPH,R1
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   A3           INC       DPTR
   \   000160   A3           INC       DPTR
   \   000161   A3           INC       DPTR
   \   000162   A3           INC       DPTR
   \   000163   12....       LCALL     ?Subroutine10 & 0xFFFF
    543                  }
    544          
    545                  osal_mem_free(epDesc->simpleDesc);
   \                     ??CrossCallReturnLabel_18:
   \   000166                ; Setup parameters for call to function osal_mem_free
   \   000166   85..82       MOV       DPL,?V2
   \   000169   85..83       MOV       DPH,?V3
   \   00016C   12....       LCALL     ?Subroutine10 & 0xFFFF
    546                }
    547              }
   \                     ??CrossCallReturnLabel_19:
   \   00016F   8003         SJMP      ??MT_BuildEndpointDesc_1
    548              else
    549              {
    550                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_3:
   \   000171   75..10       MOV       ?V0,#0x10
    551              }
    552            }
    553          
    554            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   000174   A9..         MOV       R1,?V0
   \   000176   7F06         MOV       R7,#0x6
   \   000178   02....       LJMP      ?BANKED_LEAVE_XDATA
    555          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   E8           MOV       A,R0
   \   00000C   49           ORL       A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   2409         ADD       A,#0x9
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   2406         ADD       A,#0x6
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   8882         MOV       DPL,R0
   \   00000D   F583         MOV       DPH,A
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000009   8A..         MOV       ?V4,R2
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   85..83       MOV       DPH,?V3
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FA           MOV       R2,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   CA           XCH       A,R2
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   85..82       MOV       DPL,?V2
   \   00000A   85..83       MOV       DPH,?V3
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F583         MOV       DPH,A
   \   000013   8A82         MOV       DPL,R2
   \   000015   A3           INC       DPTR
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V4,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   CC           XCH       A,R4
   \   00000C   FD           MOV       R5,A
   \   00000D   E5..         MOV       A,?V4
   \   00000F   2C           ADD       A,R4
   \   000010   E4           CLR       A
   \   000011   3D           ADDC      A,R5
   \   000012   F5..         MOV       ?V5,A
   \   000014   EA           MOV       A,R2
   \   000015   25E0         ADD       A,0xE0 /* A   */
   \   000017   FC           MOV       R4,A
   \   000018   E4           CLR       A
   \   000019   33           RLC       A
   \   00001A   FD           MOV       R5,A
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   2C           ADD       A,R4
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3D           ADDC      A,R5
   \   00000D   8882         MOV       DPL,R0
   \   00000F   F583         MOV       DPH,A
   \   000011   E5..         MOV       A,?V4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   E5..         MOV       A,?V5
   \   000017   F0           MOVX      @DPTR,A
   \   000018   EE           MOV       A,R6
   \   000019   2402         ADD       A,#0x2
   \   00001B   FE           MOV       R6,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   AE82         MOV       R6,DPL
   \   000005   AF83         MOV       R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3A           ADDC      A,R2
   \   000004   F583         MOV       DPH,A
   \   000006   E5..         MOV       A,?V4
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   C8           XCH       A,R0
   \   00000B   22           RET
    556          #endif
    557          /***************************************************************************************************
    558          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MTProcessAppRspMsg
        0      9   -> MT_BuildAndSendZToolResponse
      1     28   MT_BuildAndSendZToolResponse
        0     16   -> MT_TransportAlloc
        0     16   -> MT_TransportSend
        0     19   -> osal_memcpy
      1     14   MT_BuildEndpointDesc
        0     14   -> afFindEndPointDesc
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      0      9   MT_Init
        0      9   -> MT_SysResetInd
      3      3   MT_ProcessIncoming
        2      3   -> MT_BuildAndSendZToolResponse
      1     11   MT_ReverseBytes
      1      9   MT_Word2Buf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?Subroutine0
      16  ?Subroutine1
       9  ?Subroutine10
      14  ?Subroutine11
      22  ?Subroutine12
       7  ?Subroutine13
      12  ?Subroutine14
       8  ?Subroutine2
      29  ?Subroutine3
      32  ?Subroutine4
      23  ?Subroutine5
      23  ?Subroutine6
       8  ?Subroutine7
      12  ?Subroutine8
      12  ?Subroutine9
      21  MTProcessAppRspMsg
     101  MT_BuildAndSendZToolResponse
     379  MT_BuildEndpointDesc
      22  MT_Init
     159  MT_ProcessIncoming
      70  MT_ReverseBytes
      55  MT_Word2Buf
       1  debugCompId
       1  debugThreshold
      44  mtProcessIncoming
      42  -- Other

 
 1 039 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    46 bytes in segment XDATA_Z
 
    42 bytes of CODE     memory
 1 039 bytes of HUGECODE memory
    46 bytes of XDATA    memory

Errors: none
Warnings: none
